"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/request";
exports.ids = ["vendor-chunks/request"];
exports.modules = {

/***/ "(rsc)/./node_modules/request/index.js":
/*!***************************************!*\
  !*** ./node_modules/request/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2010-2012 Mikeal Rogers\n//\n//    Licensed under the Apache License, Version 2.0 (the \"License\");\n//    you may not use this file except in compliance with the License.\n//    You may obtain a copy of the License at\n//\n//        http://www.apache.org/licenses/LICENSE-2.0\n//\n//    Unless required by applicable law or agreed to in writing, software\n//    distributed under the License is distributed on an \"AS IS\" BASIS,\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//    See the License for the specific language governing permissions and\n//    limitations under the License.\n\nvar extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nvar cookies = __webpack_require__(/*! ./lib/cookies */ \"(rsc)/./node_modules/request/lib/cookies.js\");\nvar helpers = __webpack_require__(/*! ./lib/helpers */ \"(rsc)/./node_modules/request/lib/helpers.js\");\nvar paramsHaveRequestBody = helpers.paramsHaveRequestBody;\n// organize params for patch, post, put, head, del\nfunction initParams(uri, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n    }\n    var params = {};\n    if (options !== null && typeof options === \"object\") {\n        extend(params, options, {\n            uri: uri\n        });\n    } else if (typeof uri === \"string\") {\n        extend(params, {\n            uri: uri\n        });\n    } else {\n        extend(params, uri);\n    }\n    params.callback = callback || params.callback;\n    return params;\n}\nfunction request(uri, options, callback) {\n    if (typeof uri === \"undefined\") {\n        throw new Error(\"undefined is not a valid uri or options object.\");\n    }\n    var params = initParams(uri, options, callback);\n    if (params.method === \"HEAD\" && paramsHaveRequestBody(params)) {\n        throw new Error(\"HTTP HEAD requests MUST NOT include a request body.\");\n    }\n    return new request.Request(params);\n}\nfunction verbFunc(verb) {\n    var method = verb.toUpperCase();\n    return function(uri, options, callback) {\n        var params = initParams(uri, options, callback);\n        params.method = method;\n        return request(params, params.callback);\n    };\n}\n// define like this to please codeintel/intellisense IDEs\nrequest.get = verbFunc(\"get\");\nrequest.head = verbFunc(\"head\");\nrequest.options = verbFunc(\"options\");\nrequest.post = verbFunc(\"post\");\nrequest.put = verbFunc(\"put\");\nrequest.patch = verbFunc(\"patch\");\nrequest.del = verbFunc(\"delete\");\nrequest[\"delete\"] = verbFunc(\"delete\");\nrequest.jar = function(store) {\n    return cookies.jar(store);\n};\nrequest.cookie = function(str) {\n    return cookies.parse(str);\n};\nfunction wrapRequestMethod(method, options, requester, verb) {\n    return function(uri, opts, callback) {\n        var params = initParams(uri, opts, callback);\n        var target = {};\n        extend(true, target, options, params);\n        target.pool = params.pool || options.pool;\n        if (verb) {\n            target.method = verb.toUpperCase();\n        }\n        if (typeof requester === \"function\") {\n            method = requester;\n        }\n        return method(target, target.callback);\n    };\n}\nrequest.defaults = function(options, requester) {\n    var self = this;\n    options = options || {};\n    if (typeof options === \"function\") {\n        requester = options;\n        options = {};\n    }\n    var defaults = wrapRequestMethod(self, options, requester);\n    var verbs = [\n        \"get\",\n        \"head\",\n        \"post\",\n        \"put\",\n        \"patch\",\n        \"del\",\n        \"delete\"\n    ];\n    verbs.forEach(function(verb) {\n        defaults[verb] = wrapRequestMethod(self[verb], options, requester, verb);\n    });\n    defaults.cookie = wrapRequestMethod(self.cookie, options, requester);\n    defaults.jar = self.jar;\n    defaults.defaults = self.defaults;\n    return defaults;\n};\nrequest.forever = function(agentOptions, optionsArg) {\n    var options = {};\n    if (optionsArg) {\n        extend(options, optionsArg);\n    }\n    if (agentOptions) {\n        options.agentOptions = agentOptions;\n    }\n    options.forever = true;\n    return request.defaults(options);\n};\n// Exports\nmodule.exports = request;\nrequest.Request = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/request/request.js\");\nrequest.initParams = initParams;\n// Backwards compatibility for request.debug\nObject.defineProperty(request, \"debug\", {\n    enumerable: true,\n    get: function() {\n        return request.Request.debug;\n    },\n    set: function(debug) {\n        request.Request.debug = debug;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/request/lib/auth.js":
/*!******************************************!*\
  !*** ./node_modules/request/lib/auth.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar caseless = __webpack_require__(/*! caseless */ \"(rsc)/./node_modules/caseless/index.js\");\nvar uuid = __webpack_require__(/*! uuid/v4 */ \"(rsc)/./node_modules/uuid/v4.js\");\nvar helpers = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/request/lib/helpers.js\");\nvar md5 = helpers.md5;\nvar toBase64 = helpers.toBase64;\nfunction Auth(request) {\n    // define all public properties here\n    this.request = request;\n    this.hasAuth = false;\n    this.sentAuth = false;\n    this.bearerToken = null;\n    this.user = null;\n    this.pass = null;\n}\nAuth.prototype.basic = function(user, pass, sendImmediately) {\n    var self = this;\n    if (typeof user !== \"string\" || pass !== undefined && typeof pass !== \"string\") {\n        self.request.emit(\"error\", new Error(\"auth() received invalid user or password\"));\n    }\n    self.user = user;\n    self.pass = pass;\n    self.hasAuth = true;\n    var header = user + \":\" + (pass || \"\");\n    if (sendImmediately || typeof sendImmediately === \"undefined\") {\n        var authHeader = \"Basic \" + toBase64(header);\n        self.sentAuth = true;\n        return authHeader;\n    }\n};\nAuth.prototype.bearer = function(bearer, sendImmediately) {\n    var self = this;\n    self.bearerToken = bearer;\n    self.hasAuth = true;\n    if (sendImmediately || typeof sendImmediately === \"undefined\") {\n        if (typeof bearer === \"function\") {\n            bearer = bearer();\n        }\n        var authHeader = \"Bearer \" + (bearer || \"\");\n        self.sentAuth = true;\n        return authHeader;\n    }\n};\nAuth.prototype.digest = function(method, path, authHeader) {\n    // TODO: More complete implementation of RFC 2617.\n    //   - handle challenge.domain\n    //   - support qop=\"auth-int\" only\n    //   - handle Authentication-Info (not necessarily?)\n    //   - check challenge.stale (not necessarily?)\n    //   - increase nc (not necessarily?)\n    // For reference:\n    // http://tools.ietf.org/html/rfc2617#section-3\n    // https://github.com/bagder/curl/blob/master/lib/http_digest.c\n    var self = this;\n    var challenge = {};\n    var re = /([a-z0-9_-]+)=(?:\"([^\"]+)\"|([a-z0-9_-]+))/gi;\n    while(true){\n        var match = re.exec(authHeader);\n        if (!match) {\n            break;\n        }\n        challenge[match[1]] = match[2] || match[3];\n    }\n    /**\n   * RFC 2617: handle both MD5 and MD5-sess algorithms.\n   *\n   * If the algorithm directive's value is \"MD5\" or unspecified, then HA1 is\n   *   HA1=MD5(username:realm:password)\n   * If the algorithm directive's value is \"MD5-sess\", then HA1 is\n   *   HA1=MD5(MD5(username:realm:password):nonce:cnonce)\n   */ var ha1Compute = function(algorithm, user, realm, pass, nonce, cnonce) {\n        var ha1 = md5(user + \":\" + realm + \":\" + pass);\n        if (algorithm && algorithm.toLowerCase() === \"md5-sess\") {\n            return md5(ha1 + \":\" + nonce + \":\" + cnonce);\n        } else {\n            return ha1;\n        }\n    };\n    var qop = /(^|,)\\s*auth\\s*($|,)/.test(challenge.qop) && \"auth\";\n    var nc = qop && \"00000001\";\n    var cnonce = qop && uuid().replace(/-/g, \"\");\n    var ha1 = ha1Compute(challenge.algorithm, self.user, challenge.realm, self.pass, challenge.nonce, cnonce);\n    var ha2 = md5(method + \":\" + path);\n    var digestResponse = qop ? md5(ha1 + \":\" + challenge.nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\" + ha2) : md5(ha1 + \":\" + challenge.nonce + \":\" + ha2);\n    var authValues = {\n        username: self.user,\n        realm: challenge.realm,\n        nonce: challenge.nonce,\n        uri: path,\n        qop: qop,\n        response: digestResponse,\n        nc: nc,\n        cnonce: cnonce,\n        algorithm: challenge.algorithm,\n        opaque: challenge.opaque\n    };\n    authHeader = [];\n    for(var k in authValues){\n        if (authValues[k]) {\n            if (k === \"qop\" || k === \"nc\" || k === \"algorithm\") {\n                authHeader.push(k + \"=\" + authValues[k]);\n            } else {\n                authHeader.push(k + '=\"' + authValues[k] + '\"');\n            }\n        }\n    }\n    authHeader = \"Digest \" + authHeader.join(\", \");\n    self.sentAuth = true;\n    return authHeader;\n};\nAuth.prototype.onRequest = function(user, pass, sendImmediately, bearer) {\n    var self = this;\n    var request = self.request;\n    var authHeader;\n    if (bearer === undefined && user === undefined) {\n        self.request.emit(\"error\", new Error(\"no auth mechanism defined\"));\n    } else if (bearer !== undefined) {\n        authHeader = self.bearer(bearer, sendImmediately);\n    } else {\n        authHeader = self.basic(user, pass, sendImmediately);\n    }\n    if (authHeader) {\n        request.setHeader(\"authorization\", authHeader);\n    }\n};\nAuth.prototype.onResponse = function(response) {\n    var self = this;\n    var request = self.request;\n    if (!self.hasAuth || self.sentAuth) {\n        return null;\n    }\n    var c = caseless(response.headers);\n    var authHeader = c.get(\"www-authenticate\");\n    var authVerb = authHeader && authHeader.split(\" \")[0].toLowerCase();\n    request.debug(\"reauth\", authVerb);\n    switch(authVerb){\n        case \"basic\":\n            return self.basic(self.user, self.pass, true);\n        case \"bearer\":\n            return self.bearer(self.bearerToken, true);\n        case \"digest\":\n            return self.digest(request.method, request.path, authHeader);\n    }\n};\nexports.Auth = Auth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/lib/auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/request/lib/cookies.js":
/*!*********************************************!*\
  !*** ./node_modules/request/lib/cookies.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar tough = __webpack_require__(/*! tough-cookie */ \"(rsc)/./node_modules/tough-cookie/lib/cookie.js\");\nvar Cookie = tough.Cookie;\nvar CookieJar = tough.CookieJar;\nexports.parse = function(str) {\n    if (str && str.uri) {\n        str = str.uri;\n    }\n    if (typeof str !== \"string\") {\n        throw new Error(\"The cookie function only accepts STRING as param\");\n    }\n    return Cookie.parse(str, {\n        loose: true\n    });\n};\n// Adapt the sometimes-Async api of tough.CookieJar to our requirements\nfunction RequestJar(store) {\n    var self = this;\n    self._jar = new CookieJar(store, {\n        looseMode: true\n    });\n}\nRequestJar.prototype.setCookie = function(cookieOrStr, uri, options) {\n    var self = this;\n    return self._jar.setCookieSync(cookieOrStr, uri, options || {});\n};\nRequestJar.prototype.getCookieString = function(uri) {\n    var self = this;\n    return self._jar.getCookieStringSync(uri);\n};\nRequestJar.prototype.getCookies = function(uri) {\n    var self = this;\n    return self._jar.getCookiesSync(uri);\n};\nexports.jar = function(store) {\n    return new RequestJar(store);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvY29va2llcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCLElBQUlDLFNBQVNGLE1BQU1FLE1BQU07QUFDekIsSUFBSUMsWUFBWUgsTUFBTUcsU0FBUztBQUUvQkMsYUFBYSxHQUFHLFNBQVVFLEdBQUc7SUFDM0IsSUFBSUEsT0FBT0EsSUFBSUMsR0FBRyxFQUFFO1FBQ2xCRCxNQUFNQSxJQUFJQyxHQUFHO0lBQ2Y7SUFDQSxJQUFJLE9BQU9ELFFBQVEsVUFBVTtRQUMzQixNQUFNLElBQUlFLE1BQU07SUFDbEI7SUFDQSxPQUFPTixPQUFPRyxLQUFLLENBQUNDLEtBQUs7UUFBQ0csT0FBTztJQUFJO0FBQ3ZDO0FBRUEsdUVBQXVFO0FBQ3ZFLFNBQVNDLFdBQVlDLEtBQUs7SUFDeEIsSUFBSUMsT0FBTyxJQUFJO0lBQ2ZBLEtBQUtDLElBQUksR0FBRyxJQUFJVixVQUFVUSxPQUFPO1FBQUNHLFdBQVc7SUFBSTtBQUNuRDtBQUNBSixXQUFXSyxTQUFTLENBQUNDLFNBQVMsR0FBRyxTQUFVQyxXQUFXLEVBQUVWLEdBQUcsRUFBRVcsT0FBTztJQUNsRSxJQUFJTixPQUFPLElBQUk7SUFDZixPQUFPQSxLQUFLQyxJQUFJLENBQUNNLGFBQWEsQ0FBQ0YsYUFBYVYsS0FBS1csV0FBVyxDQUFDO0FBQy9EO0FBQ0FSLFdBQVdLLFNBQVMsQ0FBQ0ssZUFBZSxHQUFHLFNBQVViLEdBQUc7SUFDbEQsSUFBSUssT0FBTyxJQUFJO0lBQ2YsT0FBT0EsS0FBS0MsSUFBSSxDQUFDUSxtQkFBbUIsQ0FBQ2Q7QUFDdkM7QUFDQUcsV0FBV0ssU0FBUyxDQUFDTyxVQUFVLEdBQUcsU0FBVWYsR0FBRztJQUM3QyxJQUFJSyxPQUFPLElBQUk7SUFDZixPQUFPQSxLQUFLQyxJQUFJLENBQUNVLGNBQWMsQ0FBQ2hCO0FBQ2xDO0FBRUFILFdBQVcsR0FBRyxTQUFVTyxLQUFLO0lBQzNCLE9BQU8sSUFBSUQsV0FBV0M7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3JlcXVlc3QvbGliL2Nvb2tpZXMuanM/YzM5YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIHRvdWdoID0gcmVxdWlyZSgndG91Z2gtY29va2llJylcblxudmFyIENvb2tpZSA9IHRvdWdoLkNvb2tpZVxudmFyIENvb2tpZUphciA9IHRvdWdoLkNvb2tpZUphclxuXG5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24gKHN0cikge1xuICBpZiAoc3RyICYmIHN0ci51cmkpIHtcbiAgICBzdHIgPSBzdHIudXJpXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY29va2llIGZ1bmN0aW9uIG9ubHkgYWNjZXB0cyBTVFJJTkcgYXMgcGFyYW0nKVxuICB9XG4gIHJldHVybiBDb29raWUucGFyc2Uoc3RyLCB7bG9vc2U6IHRydWV9KVxufVxuXG4vLyBBZGFwdCB0aGUgc29tZXRpbWVzLUFzeW5jIGFwaSBvZiB0b3VnaC5Db29raWVKYXIgdG8gb3VyIHJlcXVpcmVtZW50c1xuZnVuY3Rpb24gUmVxdWVzdEphciAoc3RvcmUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHNlbGYuX2phciA9IG5ldyBDb29raWVKYXIoc3RvcmUsIHtsb29zZU1vZGU6IHRydWV9KVxufVxuUmVxdWVzdEphci5wcm90b3R5cGUuc2V0Q29va2llID0gZnVuY3Rpb24gKGNvb2tpZU9yU3RyLCB1cmksIG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHJldHVybiBzZWxmLl9qYXIuc2V0Q29va2llU3luYyhjb29raWVPclN0ciwgdXJpLCBvcHRpb25zIHx8IHt9KVxufVxuUmVxdWVzdEphci5wcm90b3R5cGUuZ2V0Q29va2llU3RyaW5nID0gZnVuY3Rpb24gKHVyaSkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgcmV0dXJuIHNlbGYuX2phci5nZXRDb29raWVTdHJpbmdTeW5jKHVyaSlcbn1cblJlcXVlc3RKYXIucHJvdG90eXBlLmdldENvb2tpZXMgPSBmdW5jdGlvbiAodXJpKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICByZXR1cm4gc2VsZi5famFyLmdldENvb2tpZXNTeW5jKHVyaSlcbn1cblxuZXhwb3J0cy5qYXIgPSBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0SmFyKHN0b3JlKVxufVxuIl0sIm5hbWVzIjpbInRvdWdoIiwicmVxdWlyZSIsIkNvb2tpZSIsIkNvb2tpZUphciIsImV4cG9ydHMiLCJwYXJzZSIsInN0ciIsInVyaSIsIkVycm9yIiwibG9vc2UiLCJSZXF1ZXN0SmFyIiwic3RvcmUiLCJzZWxmIiwiX2phciIsImxvb3NlTW9kZSIsInByb3RvdHlwZSIsInNldENvb2tpZSIsImNvb2tpZU9yU3RyIiwib3B0aW9ucyIsInNldENvb2tpZVN5bmMiLCJnZXRDb29raWVTdHJpbmciLCJnZXRDb29raWVTdHJpbmdTeW5jIiwiZ2V0Q29va2llcyIsImdldENvb2tpZXNTeW5jIiwiamFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/lib/cookies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/request/lib/getProxyFromURI.js":
/*!*****************************************************!*\
  !*** ./node_modules/request/lib/getProxyFromURI.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nfunction formatHostname(hostname) {\n    // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n    return hostname.replace(/^\\.*/, \".\").toLowerCase();\n}\nfunction parseNoProxyZone(zone) {\n    zone = zone.trim().toLowerCase();\n    var zoneParts = zone.split(\":\", 2);\n    var zoneHost = formatHostname(zoneParts[0]);\n    var zonePort = zoneParts[1];\n    var hasPort = zone.indexOf(\":\") > -1;\n    return {\n        hostname: zoneHost,\n        port: zonePort,\n        hasPort: hasPort\n    };\n}\nfunction uriInNoProxy(uri, noProxy) {\n    var port = uri.port || (uri.protocol === \"https:\" ? \"443\" : \"80\");\n    var hostname = formatHostname(uri.hostname);\n    var noProxyList = noProxy.split(\",\");\n    // iterate through the noProxyList until it finds a match.\n    return noProxyList.map(parseNoProxyZone).some(function(noProxyZone) {\n        var isMatchedAt = hostname.indexOf(noProxyZone.hostname);\n        var hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length;\n        if (noProxyZone.hasPort) {\n            return port === noProxyZone.port && hostnameMatched;\n        }\n        return hostnameMatched;\n    });\n}\nfunction getProxyFromURI(uri) {\n    // Decide the proper request proxy to use based on the request URI object and the\n    // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n    // respect NO_PROXY environment variables (see: https://lynx.invisible-island.net/lynx2.8.7/breakout/lynx_help/keystrokes/environments.html)\n    var noProxy = process.env.NO_PROXY || process.env.no_proxy || \"\";\n    // if the noProxy is a wildcard then return null\n    if (noProxy === \"*\") {\n        return null;\n    }\n    // if the noProxy is not empty and the uri is found return null\n    if (noProxy !== \"\" && uriInNoProxy(uri, noProxy)) {\n        return null;\n    }\n    // Check for HTTP or HTTPS Proxy in environment Else default to null\n    if (uri.protocol === \"http:\") {\n        return process.env.HTTP_PROXY || process.env.http_proxy || null;\n    }\n    if (uri.protocol === \"https:\") {\n        return process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;\n    }\n    // if none of that works, return null\n    // (What uri protocol are you using then?)\n    return null;\n}\nmodule.exports = getProxyFromURI;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvZ2V0UHJveHlGcm9tVVJJLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0EsZUFBZ0JDLFFBQVE7SUFDL0IsMEVBQTBFO0lBQzFFLE9BQU9BLFNBQVNDLE9BQU8sQ0FBQyxRQUFRLEtBQUtDLFdBQVc7QUFDbEQ7QUFFQSxTQUFTQyxpQkFBa0JDLElBQUk7SUFDN0JBLE9BQU9BLEtBQUtDLElBQUksR0FBR0gsV0FBVztJQUU5QixJQUFJSSxZQUFZRixLQUFLRyxLQUFLLENBQUMsS0FBSztJQUNoQyxJQUFJQyxXQUFXVCxlQUFlTyxTQUFTLENBQUMsRUFBRTtJQUMxQyxJQUFJRyxXQUFXSCxTQUFTLENBQUMsRUFBRTtJQUMzQixJQUFJSSxVQUFVTixLQUFLTyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBRW5DLE9BQU87UUFBQ1gsVUFBVVE7UUFBVUksTUFBTUg7UUFBVUMsU0FBU0E7SUFBTztBQUM5RDtBQUVBLFNBQVNHLGFBQWNDLEdBQUcsRUFBRUMsT0FBTztJQUNqQyxJQUFJSCxPQUFPRSxJQUFJRixJQUFJLElBQUtFLENBQUFBLElBQUlFLFFBQVEsS0FBSyxXQUFXLFFBQVEsSUFBRztJQUMvRCxJQUFJaEIsV0FBV0QsZUFBZWUsSUFBSWQsUUFBUTtJQUMxQyxJQUFJaUIsY0FBY0YsUUFBUVIsS0FBSyxDQUFDO0lBRWhDLDBEQUEwRDtJQUMxRCxPQUFPVSxZQUFZQyxHQUFHLENBQUNmLGtCQUFrQmdCLElBQUksQ0FBQyxTQUFVQyxXQUFXO1FBQ2pFLElBQUlDLGNBQWNyQixTQUFTVyxPQUFPLENBQUNTLFlBQVlwQixRQUFRO1FBQ3ZELElBQUlzQixrQkFDRkQsY0FBYyxDQUFDLEtBQ1pBLGdCQUFnQnJCLFNBQVN1QixNQUFNLEdBQUdILFlBQVlwQixRQUFRLENBQUN1QixNQUFNO1FBR2xFLElBQUlILFlBQVlWLE9BQU8sRUFBRTtZQUN2QixPQUFPLFNBQVVVLFlBQVlSLElBQUksSUFBS1U7UUFDeEM7UUFFQSxPQUFPQTtJQUNUO0FBQ0Y7QUFFQSxTQUFTRSxnQkFBaUJWLEdBQUc7SUFDM0IsaUZBQWlGO0lBQ2pGLHVEQUF1RDtJQUN2RCw0SUFBNEk7SUFFNUksSUFBSUMsVUFBVVUsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLElBQUlGLFFBQVFDLEdBQUcsQ0FBQ0UsUUFBUSxJQUFJO0lBRTlELGdEQUFnRDtJQUVoRCxJQUFJYixZQUFZLEtBQUs7UUFDbkIsT0FBTztJQUNUO0lBRUEsK0RBQStEO0lBRS9ELElBQUlBLFlBQVksTUFBTUYsYUFBYUMsS0FBS0MsVUFBVTtRQUNoRCxPQUFPO0lBQ1Q7SUFFQSxvRUFBb0U7SUFFcEUsSUFBSUQsSUFBSUUsUUFBUSxLQUFLLFNBQVM7UUFDNUIsT0FBT1MsUUFBUUMsR0FBRyxDQUFDRyxVQUFVLElBQzNCSixRQUFRQyxHQUFHLENBQUNJLFVBQVUsSUFBSTtJQUM5QjtJQUVBLElBQUloQixJQUFJRSxRQUFRLEtBQUssVUFBVTtRQUM3QixPQUFPUyxRQUFRQyxHQUFHLENBQUNLLFdBQVcsSUFDNUJOLFFBQVFDLEdBQUcsQ0FBQ00sV0FBVyxJQUN2QlAsUUFBUUMsR0FBRyxDQUFDRyxVQUFVLElBQ3RCSixRQUFRQyxHQUFHLENBQUNJLFVBQVUsSUFBSTtJQUM5QjtJQUVBLHFDQUFxQztJQUNyQywwQ0FBMEM7SUFFMUMsT0FBTztBQUNUO0FBRUFHLE9BQU9DLE9BQU8sR0FBR1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3JlcXVlc3QvbGliL2dldFByb3h5RnJvbVVSSS5qcz9kODcyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5mdW5jdGlvbiBmb3JtYXRIb3N0bmFtZSAoaG9zdG5hbWUpIHtcbiAgLy8gY2Fub25pY2FsaXplIHRoZSBob3N0bmFtZSwgc28gdGhhdCAnb29nbGUuY29tJyB3b24ndCBtYXRjaCAnZ29vZ2xlLmNvbSdcbiAgcmV0dXJuIGhvc3RuYW1lLnJlcGxhY2UoL15cXC4qLywgJy4nKS50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIHBhcnNlTm9Qcm94eVpvbmUgKHpvbmUpIHtcbiAgem9uZSA9IHpvbmUudHJpbSgpLnRvTG93ZXJDYXNlKClcblxuICB2YXIgem9uZVBhcnRzID0gem9uZS5zcGxpdCgnOicsIDIpXG4gIHZhciB6b25lSG9zdCA9IGZvcm1hdEhvc3RuYW1lKHpvbmVQYXJ0c1swXSlcbiAgdmFyIHpvbmVQb3J0ID0gem9uZVBhcnRzWzFdXG4gIHZhciBoYXNQb3J0ID0gem9uZS5pbmRleE9mKCc6JykgPiAtMVxuXG4gIHJldHVybiB7aG9zdG5hbWU6IHpvbmVIb3N0LCBwb3J0OiB6b25lUG9ydCwgaGFzUG9ydDogaGFzUG9ydH1cbn1cblxuZnVuY3Rpb24gdXJpSW5Ob1Byb3h5ICh1cmksIG5vUHJveHkpIHtcbiAgdmFyIHBvcnQgPSB1cmkucG9ydCB8fCAodXJpLnByb3RvY29sID09PSAnaHR0cHM6JyA/ICc0NDMnIDogJzgwJylcbiAgdmFyIGhvc3RuYW1lID0gZm9ybWF0SG9zdG5hbWUodXJpLmhvc3RuYW1lKVxuICB2YXIgbm9Qcm94eUxpc3QgPSBub1Byb3h5LnNwbGl0KCcsJylcblxuICAvLyBpdGVyYXRlIHRocm91Z2ggdGhlIG5vUHJveHlMaXN0IHVudGlsIGl0IGZpbmRzIGEgbWF0Y2guXG4gIHJldHVybiBub1Byb3h5TGlzdC5tYXAocGFyc2VOb1Byb3h5Wm9uZSkuc29tZShmdW5jdGlvbiAobm9Qcm94eVpvbmUpIHtcbiAgICB2YXIgaXNNYXRjaGVkQXQgPSBob3N0bmFtZS5pbmRleE9mKG5vUHJveHlab25lLmhvc3RuYW1lKVxuICAgIHZhciBob3N0bmFtZU1hdGNoZWQgPSAoXG4gICAgICBpc01hdGNoZWRBdCA+IC0xICYmXG4gICAgICAgIChpc01hdGNoZWRBdCA9PT0gaG9zdG5hbWUubGVuZ3RoIC0gbm9Qcm94eVpvbmUuaG9zdG5hbWUubGVuZ3RoKVxuICAgIClcblxuICAgIGlmIChub1Byb3h5Wm9uZS5oYXNQb3J0KSB7XG4gICAgICByZXR1cm4gKHBvcnQgPT09IG5vUHJveHlab25lLnBvcnQpICYmIGhvc3RuYW1lTWF0Y2hlZFxuICAgIH1cblxuICAgIHJldHVybiBob3N0bmFtZU1hdGNoZWRcbiAgfSlcbn1cblxuZnVuY3Rpb24gZ2V0UHJveHlGcm9tVVJJICh1cmkpIHtcbiAgLy8gRGVjaWRlIHRoZSBwcm9wZXIgcmVxdWVzdCBwcm94eSB0byB1c2UgYmFzZWQgb24gdGhlIHJlcXVlc3QgVVJJIG9iamVjdCBhbmQgdGhlXG4gIC8vIGVudmlyb25tZW50YWwgdmFyaWFibGVzIChOT19QUk9YWSwgSFRUUF9QUk9YWSwgZXRjLilcbiAgLy8gcmVzcGVjdCBOT19QUk9YWSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgKHNlZTogaHR0cHM6Ly9seW54LmludmlzaWJsZS1pc2xhbmQubmV0L2x5bngyLjguNy9icmVha291dC9seW54X2hlbHAva2V5c3Ryb2tlcy9lbnZpcm9ubWVudHMuaHRtbClcblxuICB2YXIgbm9Qcm94eSA9IHByb2Nlc3MuZW52Lk5PX1BST1hZIHx8IHByb2Nlc3MuZW52Lm5vX3Byb3h5IHx8ICcnXG5cbiAgLy8gaWYgdGhlIG5vUHJveHkgaXMgYSB3aWxkY2FyZCB0aGVuIHJldHVybiBudWxsXG5cbiAgaWYgKG5vUHJveHkgPT09ICcqJykge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvLyBpZiB0aGUgbm9Qcm94eSBpcyBub3QgZW1wdHkgYW5kIHRoZSB1cmkgaXMgZm91bmQgcmV0dXJuIG51bGxcblxuICBpZiAobm9Qcm94eSAhPT0gJycgJiYgdXJpSW5Ob1Byb3h5KHVyaSwgbm9Qcm94eSkpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLy8gQ2hlY2sgZm9yIEhUVFAgb3IgSFRUUFMgUHJveHkgaW4gZW52aXJvbm1lbnQgRWxzZSBkZWZhdWx0IHRvIG51bGxcblxuICBpZiAodXJpLnByb3RvY29sID09PSAnaHR0cDonKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52LkhUVFBfUFJPWFkgfHxcbiAgICAgIHByb2Nlc3MuZW52Lmh0dHBfcHJveHkgfHwgbnVsbFxuICB9XG5cbiAgaWYgKHVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuSFRUUFNfUFJPWFkgfHxcbiAgICAgIHByb2Nlc3MuZW52Lmh0dHBzX3Byb3h5IHx8XG4gICAgICBwcm9jZXNzLmVudi5IVFRQX1BST1hZIHx8XG4gICAgICBwcm9jZXNzLmVudi5odHRwX3Byb3h5IHx8IG51bGxcbiAgfVxuXG4gIC8vIGlmIG5vbmUgb2YgdGhhdCB3b3JrcywgcmV0dXJuIG51bGxcbiAgLy8gKFdoYXQgdXJpIHByb3RvY29sIGFyZSB5b3UgdXNpbmcgdGhlbj8pXG5cbiAgcmV0dXJuIG51bGxcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRQcm94eUZyb21VUklcbiJdLCJuYW1lcyI6WyJmb3JtYXRIb3N0bmFtZSIsImhvc3RuYW1lIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwicGFyc2VOb1Byb3h5Wm9uZSIsInpvbmUiLCJ0cmltIiwiem9uZVBhcnRzIiwic3BsaXQiLCJ6b25lSG9zdCIsInpvbmVQb3J0IiwiaGFzUG9ydCIsImluZGV4T2YiLCJwb3J0IiwidXJpSW5Ob1Byb3h5IiwidXJpIiwibm9Qcm94eSIsInByb3RvY29sIiwibm9Qcm94eUxpc3QiLCJtYXAiLCJzb21lIiwibm9Qcm94eVpvbmUiLCJpc01hdGNoZWRBdCIsImhvc3RuYW1lTWF0Y2hlZCIsImxlbmd0aCIsImdldFByb3h5RnJvbVVSSSIsInByb2Nlc3MiLCJlbnYiLCJOT19QUk9YWSIsIm5vX3Byb3h5IiwiSFRUUF9QUk9YWSIsImh0dHBfcHJveHkiLCJIVFRQU19QUk9YWSIsImh0dHBzX3Byb3h5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/lib/getProxyFromURI.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/request/lib/har.js":
/*!*****************************************!*\
  !*** ./node_modules/request/lib/har.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar qs = __webpack_require__(/*! querystring */ \"querystring\");\nvar validate = __webpack_require__(/*! har-validator */ \"(rsc)/./node_modules/har-validator/lib/promise.js\");\nvar extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nfunction Har(request) {\n    this.request = request;\n}\nHar.prototype.reducer = function(obj, pair) {\n    // new property ?\n    if (obj[pair.name] === undefined) {\n        obj[pair.name] = pair.value;\n        return obj;\n    }\n    // existing? convert to array\n    var arr = [\n        obj[pair.name],\n        pair.value\n    ];\n    obj[pair.name] = arr;\n    return obj;\n};\nHar.prototype.prep = function(data) {\n    // construct utility properties\n    data.queryObj = {};\n    data.headersObj = {};\n    data.postData.jsonObj = false;\n    data.postData.paramsObj = false;\n    // construct query objects\n    if (data.queryString && data.queryString.length) {\n        data.queryObj = data.queryString.reduce(this.reducer, {});\n    }\n    // construct headers objects\n    if (data.headers && data.headers.length) {\n        // loweCase header keys\n        data.headersObj = data.headers.reduceRight(function(headers, header) {\n            headers[header.name] = header.value;\n            return headers;\n        }, {});\n    }\n    // construct Cookie header\n    if (data.cookies && data.cookies.length) {\n        var cookies = data.cookies.map(function(cookie) {\n            return cookie.name + \"=\" + cookie.value;\n        });\n        if (cookies.length) {\n            data.headersObj.cookie = cookies.join(\"; \");\n        }\n    }\n    // prep body\n    function some(arr) {\n        return arr.some(function(type) {\n            return data.postData.mimeType.indexOf(type) === 0;\n        });\n    }\n    if (some([\n        \"multipart/mixed\",\n        \"multipart/related\",\n        \"multipart/form-data\",\n        \"multipart/alternative\"\n    ])) {\n        // reset values\n        data.postData.mimeType = \"multipart/form-data\";\n    } else if (some([\n        \"application/x-www-form-urlencoded\"\n    ])) {\n        if (!data.postData.params) {\n            data.postData.text = \"\";\n        } else {\n            data.postData.paramsObj = data.postData.params.reduce(this.reducer, {});\n            // always overwrite\n            data.postData.text = qs.stringify(data.postData.paramsObj);\n        }\n    } else if (some([\n        \"text/json\",\n        \"text/x-json\",\n        \"application/json\",\n        \"application/x-json\"\n    ])) {\n        data.postData.mimeType = \"application/json\";\n        if (data.postData.text) {\n            try {\n                data.postData.jsonObj = JSON.parse(data.postData.text);\n            } catch (e) {\n                this.request.debug(e);\n                // force back to text/plain\n                data.postData.mimeType = \"text/plain\";\n            }\n        }\n    }\n    return data;\n};\nHar.prototype.options = function(options) {\n    // skip if no har property defined\n    if (!options.har) {\n        return options;\n    }\n    var har = {};\n    extend(har, options.har);\n    // only process the first entry\n    if (har.log && har.log.entries) {\n        har = har.log.entries[0];\n    }\n    // add optional properties to make validation successful\n    har.url = har.url || options.url || options.uri || options.baseUrl || \"/\";\n    har.httpVersion = har.httpVersion || \"HTTP/1.1\";\n    har.queryString = har.queryString || [];\n    har.headers = har.headers || [];\n    har.cookies = har.cookies || [];\n    har.postData = har.postData || {};\n    har.postData.mimeType = har.postData.mimeType || \"application/octet-stream\";\n    har.bodySize = 0;\n    har.headersSize = 0;\n    har.postData.size = 0;\n    if (!validate.request(har)) {\n        return options;\n    }\n    // clean up and get some utility properties\n    var req = this.prep(har);\n    // construct new options\n    if (req.url) {\n        options.url = req.url;\n    }\n    if (req.method) {\n        options.method = req.method;\n    }\n    if (Object.keys(req.queryObj).length) {\n        options.qs = req.queryObj;\n    }\n    if (Object.keys(req.headersObj).length) {\n        options.headers = req.headersObj;\n    }\n    function test(type) {\n        return req.postData.mimeType.indexOf(type) === 0;\n    }\n    if (test(\"application/x-www-form-urlencoded\")) {\n        options.form = req.postData.paramsObj;\n    } else if (test(\"application/json\")) {\n        if (req.postData.jsonObj) {\n            options.body = req.postData.jsonObj;\n            options.json = true;\n        }\n    } else if (test(\"multipart/form-data\")) {\n        options.formData = {};\n        req.postData.params.forEach(function(param) {\n            var attachment = {};\n            if (!param.fileName && !param.contentType) {\n                options.formData[param.name] = param.value;\n                return;\n            }\n            // attempt to read from disk!\n            if (param.fileName && !param.value) {\n                attachment.value = fs.createReadStream(param.fileName);\n            } else if (param.value) {\n                attachment.value = param.value;\n            }\n            if (param.fileName) {\n                attachment.options = {\n                    filename: param.fileName,\n                    contentType: param.contentType ? param.contentType : null\n                };\n            }\n            options.formData[param.name] = attachment;\n        });\n    } else {\n        if (req.postData.text) {\n            options.body = req.postData.text;\n        }\n    }\n    return options;\n};\nexports.Har = Har;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/lib/har.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/request/lib/hawk.js":
/*!******************************************!*\
  !*** ./node_modules/request/lib/hawk.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nfunction randomString(size) {\n    var bits = (size + 1) * 6;\n    var buffer = crypto.randomBytes(Math.ceil(bits / 8));\n    var string = buffer.toString(\"base64\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n    return string.slice(0, size);\n}\nfunction calculatePayloadHash(payload, algorithm, contentType) {\n    var hash = crypto.createHash(algorithm);\n    hash.update(\"hawk.1.payload\\n\");\n    hash.update((contentType ? contentType.split(\";\")[0].trim().toLowerCase() : \"\") + \"\\n\");\n    hash.update(payload || \"\");\n    hash.update(\"\\n\");\n    return hash.digest(\"base64\");\n}\nexports.calculateMac = function(credentials, opts) {\n    var normalized = \"hawk.1.header\\n\" + opts.ts + \"\\n\" + opts.nonce + \"\\n\" + (opts.method || \"\").toUpperCase() + \"\\n\" + opts.resource + \"\\n\" + opts.host.toLowerCase() + \"\\n\" + opts.port + \"\\n\" + (opts.hash || \"\") + \"\\n\";\n    if (opts.ext) {\n        normalized = normalized + opts.ext.replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\n\", \"\\\\n\");\n    }\n    normalized = normalized + \"\\n\";\n    if (opts.app) {\n        normalized = normalized + opts.app + \"\\n\" + (opts.dlg || \"\") + \"\\n\";\n    }\n    var hmac = crypto.createHmac(credentials.algorithm, credentials.key).update(normalized);\n    var digest = hmac.digest(\"base64\");\n    return digest;\n};\nexports.header = function(uri, method, opts) {\n    var timestamp = opts.timestamp || Math.floor((Date.now() + (opts.localtimeOffsetMsec || 0)) / 1000);\n    var credentials = opts.credentials;\n    if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {\n        return \"\";\n    }\n    if ([\n        \"sha1\",\n        \"sha256\"\n    ].indexOf(credentials.algorithm) === -1) {\n        return \"\";\n    }\n    var artifacts = {\n        ts: timestamp,\n        nonce: opts.nonce || randomString(6),\n        method: method,\n        resource: uri.pathname + (uri.search || \"\"),\n        host: uri.hostname,\n        port: uri.port || (uri.protocol === \"http:\" ? 80 : 443),\n        hash: opts.hash,\n        ext: opts.ext,\n        app: opts.app,\n        dlg: opts.dlg\n    };\n    if (!artifacts.hash && (opts.payload || opts.payload === \"\")) {\n        artifacts.hash = calculatePayloadHash(opts.payload, credentials.algorithm, opts.contentType);\n    }\n    var mac = exports.calculateMac(credentials, artifacts);\n    var hasExt = artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== \"\";\n    var header = 'Hawk id=\"' + credentials.id + '\", ts=\"' + artifacts.ts + '\", nonce=\"' + artifacts.nonce + (artifacts.hash ? '\", hash=\"' + artifacts.hash : \"\") + (hasExt ? '\", ext=\"' + artifacts.ext.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') : \"\") + '\", mac=\"' + mac + '\"';\n    if (artifacts.app) {\n        header = header + ', app=\"' + artifacts.app + (artifacts.dlg ? '\", dlg=\"' + artifacts.dlg : \"\") + '\"';\n    }\n    return header;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/lib/hawk.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/request/lib/helpers.js":
/*!*********************************************!*\
  !*** ./node_modules/request/lib/helpers.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar jsonSafeStringify = __webpack_require__(/*! json-stringify-safe */ \"(rsc)/./node_modules/json-stringify-safe/stringify.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/safe-buffer/index.js\").Buffer);\nvar defer = typeof setImmediate === \"undefined\" ? process.nextTick : setImmediate;\nfunction paramsHaveRequestBody(params) {\n    return params.body || params.requestBodyStream || params.json && typeof params.json !== \"boolean\" || params.multipart;\n}\nfunction safeStringify(obj, replacer) {\n    var ret;\n    try {\n        ret = JSON.stringify(obj, replacer);\n    } catch (e) {\n        ret = jsonSafeStringify(obj, replacer);\n    }\n    return ret;\n}\nfunction md5(str) {\n    return crypto.createHash(\"md5\").update(str).digest(\"hex\");\n}\nfunction isReadStream(rs) {\n    return rs.readable && rs.path && rs.mode;\n}\nfunction toBase64(str) {\n    return Buffer.from(str || \"\", \"utf8\").toString(\"base64\");\n}\nfunction copy(obj) {\n    var o = {};\n    Object.keys(obj).forEach(function(i) {\n        o[i] = obj[i];\n    });\n    return o;\n}\nfunction version() {\n    var numbers = process.version.replace(\"v\", \"\").split(\".\");\n    return {\n        major: parseInt(numbers[0], 10),\n        minor: parseInt(numbers[1], 10),\n        patch: parseInt(numbers[2], 10)\n    };\n}\nexports.paramsHaveRequestBody = paramsHaveRequestBody;\nexports.safeStringify = safeStringify;\nexports.md5 = md5;\nexports.isReadStream = isReadStream;\nexports.toBase64 = toBase64;\nexports.copy = copy;\nexports.version = version;\nexports.defer = defer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLG9CQUFvQkMsbUJBQU9BLENBQUM7QUFDaEMsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsU0FBU0YsNEZBQTZCO0FBRTFDLElBQUlHLFFBQVEsT0FBT0MsaUJBQWlCLGNBQ2hDQyxRQUFRQyxRQUFRLEdBQ2hCRjtBQUVKLFNBQVNHLHNCQUF1QkMsTUFBTTtJQUNwQyxPQUNFQSxPQUFPQyxJQUFJLElBQ1hELE9BQU9FLGlCQUFpQixJQUN2QkYsT0FBT0csSUFBSSxJQUFJLE9BQU9ILE9BQU9HLElBQUksS0FBSyxhQUN2Q0gsT0FBT0ksU0FBUztBQUVwQjtBQUVBLFNBQVNDLGNBQWVDLEdBQUcsRUFBRUMsUUFBUTtJQUNuQyxJQUFJQztJQUNKLElBQUk7UUFDRkEsTUFBTUMsS0FBS0MsU0FBUyxDQUFDSixLQUFLQztJQUM1QixFQUFFLE9BQU9JLEdBQUc7UUFDVkgsTUFBTWpCLGtCQUFrQmUsS0FBS0M7SUFDL0I7SUFDQSxPQUFPQztBQUNUO0FBRUEsU0FBU0ksSUFBS0MsR0FBRztJQUNmLE9BQU9wQixPQUFPcUIsVUFBVSxDQUFDLE9BQU9DLE1BQU0sQ0FBQ0YsS0FBS0csTUFBTSxDQUFDO0FBQ3JEO0FBRUEsU0FBU0MsYUFBY0MsRUFBRTtJQUN2QixPQUFPQSxHQUFHQyxRQUFRLElBQUlELEdBQUdFLElBQUksSUFBSUYsR0FBR0csSUFBSTtBQUMxQztBQUVBLFNBQVNDLFNBQVVULEdBQUc7SUFDcEIsT0FBT25CLE9BQU82QixJQUFJLENBQUNWLE9BQU8sSUFBSSxRQUFRVyxRQUFRLENBQUM7QUFDakQ7QUFFQSxTQUFTQyxLQUFNbkIsR0FBRztJQUNoQixJQUFJb0IsSUFBSSxDQUFDO0lBQ1RDLE9BQU9DLElBQUksQ0FBQ3RCLEtBQUt1QixPQUFPLENBQUMsU0FBVUMsQ0FBQztRQUNsQ0osQ0FBQyxDQUFDSSxFQUFFLEdBQUd4QixHQUFHLENBQUN3QixFQUFFO0lBQ2Y7SUFDQSxPQUFPSjtBQUNUO0FBRUEsU0FBU0s7SUFDUCxJQUFJQyxVQUFVbkMsUUFBUWtDLE9BQU8sQ0FBQ0UsT0FBTyxDQUFDLEtBQUssSUFBSUMsS0FBSyxDQUFDO0lBQ3JELE9BQU87UUFDTEMsT0FBT0MsU0FBU0osT0FBTyxDQUFDLEVBQUUsRUFBRTtRQUM1QkssT0FBT0QsU0FBU0osT0FBTyxDQUFDLEVBQUUsRUFBRTtRQUM1Qk0sT0FBT0YsU0FBU0osT0FBTyxDQUFDLEVBQUUsRUFBRTtJQUM5QjtBQUNGO0FBRUFPLDZCQUE2QixHQUFHeEM7QUFDaEN3QyxxQkFBcUIsR0FBR2xDO0FBQ3hCa0MsV0FBVyxHQUFHM0I7QUFDZDJCLG9CQUFvQixHQUFHdEI7QUFDdkJzQixnQkFBZ0IsR0FBR2pCO0FBQ25CaUIsWUFBWSxHQUFHZDtBQUNmYyxlQUFlLEdBQUdSO0FBQ2xCUSxhQUFhLEdBQUc1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZGRpdC1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvaGVscGVycy5qcz9kMTA0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIganNvblNhZmVTdHJpbmdpZnkgPSByZXF1aXJlKCdqc29uLXN0cmluZ2lmeS1zYWZlJylcbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBkZWZlciA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICd1bmRlZmluZWQnXG4gID8gcHJvY2Vzcy5uZXh0VGlja1xuICA6IHNldEltbWVkaWF0ZVxuXG5mdW5jdGlvbiBwYXJhbXNIYXZlUmVxdWVzdEJvZHkgKHBhcmFtcykge1xuICByZXR1cm4gKFxuICAgIHBhcmFtcy5ib2R5IHx8XG4gICAgcGFyYW1zLnJlcXVlc3RCb2R5U3RyZWFtIHx8XG4gICAgKHBhcmFtcy5qc29uICYmIHR5cGVvZiBwYXJhbXMuanNvbiAhPT0gJ2Jvb2xlYW4nKSB8fFxuICAgIHBhcmFtcy5tdWx0aXBhcnRcbiAgKVxufVxuXG5mdW5jdGlvbiBzYWZlU3RyaW5naWZ5IChvYmosIHJlcGxhY2VyKSB7XG4gIHZhciByZXRcbiAgdHJ5IHtcbiAgICByZXQgPSBKU09OLnN0cmluZ2lmeShvYmosIHJlcGxhY2VyKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0ID0ganNvblNhZmVTdHJpbmdpZnkob2JqLCByZXBsYWNlcilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIG1kNSAoc3RyKSB7XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnbWQ1JykudXBkYXRlKHN0cikuZGlnZXN0KCdoZXgnKVxufVxuXG5mdW5jdGlvbiBpc1JlYWRTdHJlYW0gKHJzKSB7XG4gIHJldHVybiBycy5yZWFkYWJsZSAmJiBycy5wYXRoICYmIHJzLm1vZGVcbn1cblxuZnVuY3Rpb24gdG9CYXNlNjQgKHN0cikge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc3RyIHx8ICcnLCAndXRmOCcpLnRvU3RyaW5nKCdiYXNlNjQnKVxufVxuXG5mdW5jdGlvbiBjb3B5IChvYmopIHtcbiAgdmFyIG8gPSB7fVxuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICBvW2ldID0gb2JqW2ldXG4gIH0pXG4gIHJldHVybiBvXG59XG5cbmZ1bmN0aW9uIHZlcnNpb24gKCkge1xuICB2YXIgbnVtYmVycyA9IHByb2Nlc3MudmVyc2lvbi5yZXBsYWNlKCd2JywgJycpLnNwbGl0KCcuJylcbiAgcmV0dXJuIHtcbiAgICBtYWpvcjogcGFyc2VJbnQobnVtYmVyc1swXSwgMTApLFxuICAgIG1pbm9yOiBwYXJzZUludChudW1iZXJzWzFdLCAxMCksXG4gICAgcGF0Y2g6IHBhcnNlSW50KG51bWJlcnNbMl0sIDEwKVxuICB9XG59XG5cbmV4cG9ydHMucGFyYW1zSGF2ZVJlcXVlc3RCb2R5ID0gcGFyYW1zSGF2ZVJlcXVlc3RCb2R5XG5leHBvcnRzLnNhZmVTdHJpbmdpZnkgPSBzYWZlU3RyaW5naWZ5XG5leHBvcnRzLm1kNSA9IG1kNVxuZXhwb3J0cy5pc1JlYWRTdHJlYW0gPSBpc1JlYWRTdHJlYW1cbmV4cG9ydHMudG9CYXNlNjQgPSB0b0Jhc2U2NFxuZXhwb3J0cy5jb3B5ID0gY29weVxuZXhwb3J0cy52ZXJzaW9uID0gdmVyc2lvblxuZXhwb3J0cy5kZWZlciA9IGRlZmVyXG4iXSwibmFtZXMiOlsianNvblNhZmVTdHJpbmdpZnkiLCJyZXF1aXJlIiwiY3J5cHRvIiwiQnVmZmVyIiwiZGVmZXIiLCJzZXRJbW1lZGlhdGUiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJwYXJhbXNIYXZlUmVxdWVzdEJvZHkiLCJwYXJhbXMiLCJib2R5IiwicmVxdWVzdEJvZHlTdHJlYW0iLCJqc29uIiwibXVsdGlwYXJ0Iiwic2FmZVN0cmluZ2lmeSIsIm9iaiIsInJlcGxhY2VyIiwicmV0IiwiSlNPTiIsInN0cmluZ2lmeSIsImUiLCJtZDUiLCJzdHIiLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0IiwiaXNSZWFkU3RyZWFtIiwicnMiLCJyZWFkYWJsZSIsInBhdGgiLCJtb2RlIiwidG9CYXNlNjQiLCJmcm9tIiwidG9TdHJpbmciLCJjb3B5IiwibyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiaSIsInZlcnNpb24iLCJudW1iZXJzIiwicmVwbGFjZSIsInNwbGl0IiwibWFqb3IiLCJwYXJzZUludCIsIm1pbm9yIiwicGF0Y2giLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/lib/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/request/lib/multipart.js":
/*!***********************************************!*\
  !*** ./node_modules/request/lib/multipart.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar uuid = __webpack_require__(/*! uuid/v4 */ \"(rsc)/./node_modules/uuid/v4.js\");\nvar CombinedStream = __webpack_require__(/*! combined-stream */ \"(rsc)/./node_modules/combined-stream/lib/combined_stream.js\");\nvar isstream = __webpack_require__(/*! isstream */ \"(rsc)/./node_modules/isstream/isstream.js\");\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/safe-buffer/index.js\").Buffer);\nfunction Multipart(request) {\n    this.request = request;\n    this.boundary = uuid();\n    this.chunked = false;\n    this.body = null;\n}\nMultipart.prototype.isChunked = function(options) {\n    var self = this;\n    var chunked = false;\n    var parts = options.data || options;\n    if (!parts.forEach) {\n        self.request.emit(\"error\", new Error(\"Argument error, options.multipart.\"));\n    }\n    if (options.chunked !== undefined) {\n        chunked = options.chunked;\n    }\n    if (self.request.getHeader(\"transfer-encoding\") === \"chunked\") {\n        chunked = true;\n    }\n    if (!chunked) {\n        parts.forEach(function(part) {\n            if (typeof part.body === \"undefined\") {\n                self.request.emit(\"error\", new Error(\"Body attribute missing in multipart.\"));\n            }\n            if (isstream(part.body)) {\n                chunked = true;\n            }\n        });\n    }\n    return chunked;\n};\nMultipart.prototype.setHeaders = function(chunked) {\n    var self = this;\n    if (chunked && !self.request.hasHeader(\"transfer-encoding\")) {\n        self.request.setHeader(\"transfer-encoding\", \"chunked\");\n    }\n    var header = self.request.getHeader(\"content-type\");\n    if (!header || header.indexOf(\"multipart\") === -1) {\n        self.request.setHeader(\"content-type\", \"multipart/related; boundary=\" + self.boundary);\n    } else {\n        if (header.indexOf(\"boundary\") !== -1) {\n            self.boundary = header.replace(/.*boundary=([^\\s;]+).*/, \"$1\");\n        } else {\n            self.request.setHeader(\"content-type\", header + \"; boundary=\" + self.boundary);\n        }\n    }\n};\nMultipart.prototype.build = function(parts, chunked) {\n    var self = this;\n    var body = chunked ? new CombinedStream() : [];\n    function add(part) {\n        if (typeof part === \"number\") {\n            part = part.toString();\n        }\n        return chunked ? body.append(part) : body.push(Buffer.from(part));\n    }\n    if (self.request.preambleCRLF) {\n        add(\"\\r\\n\");\n    }\n    parts.forEach(function(part) {\n        var preamble = \"--\" + self.boundary + \"\\r\\n\";\n        Object.keys(part).forEach(function(key) {\n            if (key === \"body\") {\n                return;\n            }\n            preamble += key + \": \" + part[key] + \"\\r\\n\";\n        });\n        preamble += \"\\r\\n\";\n        add(preamble);\n        add(part.body);\n        add(\"\\r\\n\");\n    });\n    add(\"--\" + self.boundary + \"--\");\n    if (self.request.postambleCRLF) {\n        add(\"\\r\\n\");\n    }\n    return body;\n};\nMultipart.prototype.onRequest = function(options) {\n    var self = this;\n    var chunked = self.isChunked(options);\n    var parts = options.data || options;\n    self.setHeaders(chunked);\n    self.chunked = chunked;\n    self.body = self.build(parts, chunked);\n};\nexports.Multipart = Multipart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvbXVsdGlwYXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUMsaUJBQWlCRCxtQkFBT0EsQ0FBQztBQUM3QixJQUFJRSxXQUFXRixtQkFBT0EsQ0FBQztBQUN2QixJQUFJRyxTQUFTSCw0RkFBNkI7QUFFMUMsU0FBU0ksVUFBV0MsT0FBTztJQUN6QixJQUFJLENBQUNBLE9BQU8sR0FBR0E7SUFDZixJQUFJLENBQUNDLFFBQVEsR0FBR1A7SUFDaEIsSUFBSSxDQUFDUSxPQUFPLEdBQUc7SUFDZixJQUFJLENBQUNDLElBQUksR0FBRztBQUNkO0FBRUFKLFVBQVVLLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHLFNBQVVDLE9BQU87SUFDL0MsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSUwsVUFBVTtJQUNkLElBQUlNLFFBQVFGLFFBQVFHLElBQUksSUFBSUg7SUFFNUIsSUFBSSxDQUFDRSxNQUFNRSxPQUFPLEVBQUU7UUFDbEJILEtBQUtQLE9BQU8sQ0FBQ1csSUFBSSxDQUFDLFNBQVMsSUFBSUMsTUFBTTtJQUN2QztJQUVBLElBQUlOLFFBQVFKLE9BQU8sS0FBS1csV0FBVztRQUNqQ1gsVUFBVUksUUFBUUosT0FBTztJQUMzQjtJQUVBLElBQUlLLEtBQUtQLE9BQU8sQ0FBQ2MsU0FBUyxDQUFDLHlCQUF5QixXQUFXO1FBQzdEWixVQUFVO0lBQ1o7SUFFQSxJQUFJLENBQUNBLFNBQVM7UUFDWk0sTUFBTUUsT0FBTyxDQUFDLFNBQVVLLElBQUk7WUFDMUIsSUFBSSxPQUFPQSxLQUFLWixJQUFJLEtBQUssYUFBYTtnQkFDcENJLEtBQUtQLE9BQU8sQ0FBQ1csSUFBSSxDQUFDLFNBQVMsSUFBSUMsTUFBTTtZQUN2QztZQUNBLElBQUlmLFNBQVNrQixLQUFLWixJQUFJLEdBQUc7Z0JBQ3ZCRCxVQUFVO1lBQ1o7UUFDRjtJQUNGO0lBRUEsT0FBT0E7QUFDVDtBQUVBSCxVQUFVSyxTQUFTLENBQUNZLFVBQVUsR0FBRyxTQUFVZCxPQUFPO0lBQ2hELElBQUlLLE9BQU8sSUFBSTtJQUVmLElBQUlMLFdBQVcsQ0FBQ0ssS0FBS1AsT0FBTyxDQUFDaUIsU0FBUyxDQUFDLHNCQUFzQjtRQUMzRFYsS0FBS1AsT0FBTyxDQUFDa0IsU0FBUyxDQUFDLHFCQUFxQjtJQUM5QztJQUVBLElBQUlDLFNBQVNaLEtBQUtQLE9BQU8sQ0FBQ2MsU0FBUyxDQUFDO0lBRXBDLElBQUksQ0FBQ0ssVUFBVUEsT0FBT0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQUc7UUFDakRiLEtBQUtQLE9BQU8sQ0FBQ2tCLFNBQVMsQ0FBQyxnQkFBZ0IsaUNBQWlDWCxLQUFLTixRQUFRO0lBQ3ZGLE9BQU87UUFDTCxJQUFJa0IsT0FBT0MsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUc7WUFDckNiLEtBQUtOLFFBQVEsR0FBR2tCLE9BQU9FLE9BQU8sQ0FBQywwQkFBMEI7UUFDM0QsT0FBTztZQUNMZCxLQUFLUCxPQUFPLENBQUNrQixTQUFTLENBQUMsZ0JBQWdCQyxTQUFTLGdCQUFnQlosS0FBS04sUUFBUTtRQUMvRTtJQUNGO0FBQ0Y7QUFFQUYsVUFBVUssU0FBUyxDQUFDa0IsS0FBSyxHQUFHLFNBQVVkLEtBQUssRUFBRU4sT0FBTztJQUNsRCxJQUFJSyxPQUFPLElBQUk7SUFDZixJQUFJSixPQUFPRCxVQUFVLElBQUlOLG1CQUFtQixFQUFFO0lBRTlDLFNBQVMyQixJQUFLUixJQUFJO1FBQ2hCLElBQUksT0FBT0EsU0FBUyxVQUFVO1lBQzVCQSxPQUFPQSxLQUFLUyxRQUFRO1FBQ3RCO1FBQ0EsT0FBT3RCLFVBQVVDLEtBQUtzQixNQUFNLENBQUNWLFFBQVFaLEtBQUt1QixJQUFJLENBQUM1QixPQUFPNkIsSUFBSSxDQUFDWjtJQUM3RDtJQUVBLElBQUlSLEtBQUtQLE9BQU8sQ0FBQzRCLFlBQVksRUFBRTtRQUM3QkwsSUFBSTtJQUNOO0lBRUFmLE1BQU1FLE9BQU8sQ0FBQyxTQUFVSyxJQUFJO1FBQzFCLElBQUljLFdBQVcsT0FBT3RCLEtBQUtOLFFBQVEsR0FBRztRQUN0QzZCLE9BQU9DLElBQUksQ0FBQ2hCLE1BQU1MLE9BQU8sQ0FBQyxTQUFVc0IsR0FBRztZQUNyQyxJQUFJQSxRQUFRLFFBQVE7Z0JBQUU7WUFBTztZQUM3QkgsWUFBWUcsTUFBTSxPQUFPakIsSUFBSSxDQUFDaUIsSUFBSSxHQUFHO1FBQ3ZDO1FBQ0FILFlBQVk7UUFDWk4sSUFBSU07UUFDSk4sSUFBSVIsS0FBS1osSUFBSTtRQUNib0IsSUFBSTtJQUNOO0lBQ0FBLElBQUksT0FBT2hCLEtBQUtOLFFBQVEsR0FBRztJQUUzQixJQUFJTSxLQUFLUCxPQUFPLENBQUNpQyxhQUFhLEVBQUU7UUFDOUJWLElBQUk7SUFDTjtJQUVBLE9BQU9wQjtBQUNUO0FBRUFKLFVBQVVLLFNBQVMsQ0FBQzhCLFNBQVMsR0FBRyxTQUFVNUIsT0FBTztJQUMvQyxJQUFJQyxPQUFPLElBQUk7SUFFZixJQUFJTCxVQUFVSyxLQUFLRixTQUFTLENBQUNDO0lBQzdCLElBQUlFLFFBQVFGLFFBQVFHLElBQUksSUFBSUg7SUFFNUJDLEtBQUtTLFVBQVUsQ0FBQ2Q7SUFDaEJLLEtBQUtMLE9BQU8sR0FBR0E7SUFDZkssS0FBS0osSUFBSSxHQUFHSSxLQUFLZSxLQUFLLENBQUNkLE9BQU9OO0FBQ2hDO0FBRUFpQyxpQkFBaUIsR0FBR3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkZGl0LWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0L2xpYi9tdWx0aXBhcnQuanM/MGExMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIHV1aWQgPSByZXF1aXJlKCd1dWlkL3Y0JylcbnZhciBDb21iaW5lZFN0cmVhbSA9IHJlcXVpcmUoJ2NvbWJpbmVkLXN0cmVhbScpXG52YXIgaXNzdHJlYW0gPSByZXF1aXJlKCdpc3N0cmVhbScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gTXVsdGlwYXJ0IChyZXF1ZXN0KSB7XG4gIHRoaXMucmVxdWVzdCA9IHJlcXVlc3RcbiAgdGhpcy5ib3VuZGFyeSA9IHV1aWQoKVxuICB0aGlzLmNodW5rZWQgPSBmYWxzZVxuICB0aGlzLmJvZHkgPSBudWxsXG59XG5cbk11bHRpcGFydC5wcm90b3R5cGUuaXNDaHVua2VkID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBjaHVua2VkID0gZmFsc2VcbiAgdmFyIHBhcnRzID0gb3B0aW9ucy5kYXRhIHx8IG9wdGlvbnNcblxuICBpZiAoIXBhcnRzLmZvckVhY2gpIHtcbiAgICBzZWxmLnJlcXVlc3QuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0FyZ3VtZW50IGVycm9yLCBvcHRpb25zLm11bHRpcGFydC4nKSlcbiAgfVxuXG4gIGlmIChvcHRpb25zLmNodW5rZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIGNodW5rZWQgPSBvcHRpb25zLmNodW5rZWRcbiAgfVxuXG4gIGlmIChzZWxmLnJlcXVlc3QuZ2V0SGVhZGVyKCd0cmFuc2Zlci1lbmNvZGluZycpID09PSAnY2h1bmtlZCcpIHtcbiAgICBjaHVua2VkID0gdHJ1ZVxuICB9XG5cbiAgaWYgKCFjaHVua2VkKSB7XG4gICAgcGFydHMuZm9yRWFjaChmdW5jdGlvbiAocGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBwYXJ0LmJvZHkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYucmVxdWVzdC5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQm9keSBhdHRyaWJ1dGUgbWlzc2luZyBpbiBtdWx0aXBhcnQuJykpXG4gICAgICB9XG4gICAgICBpZiAoaXNzdHJlYW0ocGFydC5ib2R5KSkge1xuICAgICAgICBjaHVua2VkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gY2h1bmtlZFxufVxuXG5NdWx0aXBhcnQucHJvdG90eXBlLnNldEhlYWRlcnMgPSBmdW5jdGlvbiAoY2h1bmtlZCkge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBpZiAoY2h1bmtlZCAmJiAhc2VsZi5yZXF1ZXN0Lmhhc0hlYWRlcigndHJhbnNmZXItZW5jb2RpbmcnKSkge1xuICAgIHNlbGYucmVxdWVzdC5zZXRIZWFkZXIoJ3RyYW5zZmVyLWVuY29kaW5nJywgJ2NodW5rZWQnKVxuICB9XG5cbiAgdmFyIGhlYWRlciA9IHNlbGYucmVxdWVzdC5nZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScpXG5cbiAgaWYgKCFoZWFkZXIgfHwgaGVhZGVyLmluZGV4T2YoJ211bHRpcGFydCcpID09PSAtMSkge1xuICAgIHNlbGYucmVxdWVzdC5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdtdWx0aXBhcnQvcmVsYXRlZDsgYm91bmRhcnk9JyArIHNlbGYuYm91bmRhcnkpXG4gIH0gZWxzZSB7XG4gICAgaWYgKGhlYWRlci5pbmRleE9mKCdib3VuZGFyeScpICE9PSAtMSkge1xuICAgICAgc2VsZi5ib3VuZGFyeSA9IGhlYWRlci5yZXBsYWNlKC8uKmJvdW5kYXJ5PShbXlxccztdKykuKi8sICckMScpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYucmVxdWVzdC5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsIGhlYWRlciArICc7IGJvdW5kYXJ5PScgKyBzZWxmLmJvdW5kYXJ5KVxuICAgIH1cbiAgfVxufVxuXG5NdWx0aXBhcnQucHJvdG90eXBlLmJ1aWxkID0gZnVuY3Rpb24gKHBhcnRzLCBjaHVua2VkKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgYm9keSA9IGNodW5rZWQgPyBuZXcgQ29tYmluZWRTdHJlYW0oKSA6IFtdXG5cbiAgZnVuY3Rpb24gYWRkIChwYXJ0KSB7XG4gICAgaWYgKHR5cGVvZiBwYXJ0ID09PSAnbnVtYmVyJykge1xuICAgICAgcGFydCA9IHBhcnQudG9TdHJpbmcoKVxuICAgIH1cbiAgICByZXR1cm4gY2h1bmtlZCA/IGJvZHkuYXBwZW5kKHBhcnQpIDogYm9keS5wdXNoKEJ1ZmZlci5mcm9tKHBhcnQpKVxuICB9XG5cbiAgaWYgKHNlbGYucmVxdWVzdC5wcmVhbWJsZUNSTEYpIHtcbiAgICBhZGQoJ1xcclxcbicpXG4gIH1cblxuICBwYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgdmFyIHByZWFtYmxlID0gJy0tJyArIHNlbGYuYm91bmRhcnkgKyAnXFxyXFxuJ1xuICAgIE9iamVjdC5rZXlzKHBhcnQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2JvZHknKSB7IHJldHVybiB9XG4gICAgICBwcmVhbWJsZSArPSBrZXkgKyAnOiAnICsgcGFydFtrZXldICsgJ1xcclxcbidcbiAgICB9KVxuICAgIHByZWFtYmxlICs9ICdcXHJcXG4nXG4gICAgYWRkKHByZWFtYmxlKVxuICAgIGFkZChwYXJ0LmJvZHkpXG4gICAgYWRkKCdcXHJcXG4nKVxuICB9KVxuICBhZGQoJy0tJyArIHNlbGYuYm91bmRhcnkgKyAnLS0nKVxuXG4gIGlmIChzZWxmLnJlcXVlc3QucG9zdGFtYmxlQ1JMRikge1xuICAgIGFkZCgnXFxyXFxuJylcbiAgfVxuXG4gIHJldHVybiBib2R5XG59XG5cbk11bHRpcGFydC5wcm90b3R5cGUub25SZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgdmFyIGNodW5rZWQgPSBzZWxmLmlzQ2h1bmtlZChvcHRpb25zKVxuICB2YXIgcGFydHMgPSBvcHRpb25zLmRhdGEgfHwgb3B0aW9uc1xuXG4gIHNlbGYuc2V0SGVhZGVycyhjaHVua2VkKVxuICBzZWxmLmNodW5rZWQgPSBjaHVua2VkXG4gIHNlbGYuYm9keSA9IHNlbGYuYnVpbGQocGFydHMsIGNodW5rZWQpXG59XG5cbmV4cG9ydHMuTXVsdGlwYXJ0ID0gTXVsdGlwYXJ0XG4iXSwibmFtZXMiOlsidXVpZCIsInJlcXVpcmUiLCJDb21iaW5lZFN0cmVhbSIsImlzc3RyZWFtIiwiQnVmZmVyIiwiTXVsdGlwYXJ0IiwicmVxdWVzdCIsImJvdW5kYXJ5IiwiY2h1bmtlZCIsImJvZHkiLCJwcm90b3R5cGUiLCJpc0NodW5rZWQiLCJvcHRpb25zIiwic2VsZiIsInBhcnRzIiwiZGF0YSIsImZvckVhY2giLCJlbWl0IiwiRXJyb3IiLCJ1bmRlZmluZWQiLCJnZXRIZWFkZXIiLCJwYXJ0Iiwic2V0SGVhZGVycyIsImhhc0hlYWRlciIsInNldEhlYWRlciIsImhlYWRlciIsImluZGV4T2YiLCJyZXBsYWNlIiwiYnVpbGQiLCJhZGQiLCJ0b1N0cmluZyIsImFwcGVuZCIsInB1c2giLCJmcm9tIiwicHJlYW1ibGVDUkxGIiwicHJlYW1ibGUiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwicG9zdGFtYmxlQ1JMRiIsIm9uUmVxdWVzdCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/lib/multipart.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/request/lib/oauth.js":
/*!*******************************************!*\
  !*** ./node_modules/request/lib/oauth.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar url = __webpack_require__(/*! url */ \"url\");\nvar qs = __webpack_require__(/*! qs */ \"(rsc)/./node_modules/qs/lib/index.js\");\nvar caseless = __webpack_require__(/*! caseless */ \"(rsc)/./node_modules/caseless/index.js\");\nvar uuid = __webpack_require__(/*! uuid/v4 */ \"(rsc)/./node_modules/uuid/v4.js\");\nvar oauth = __webpack_require__(/*! oauth-sign */ \"(rsc)/./node_modules/oauth-sign/index.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/safe-buffer/index.js\").Buffer);\nfunction OAuth(request) {\n    this.request = request;\n    this.params = null;\n}\nOAuth.prototype.buildParams = function(_oauth, uri, method, query, form, qsLib) {\n    var oa = {};\n    for(var i in _oauth){\n        oa[\"oauth_\" + i] = _oauth[i];\n    }\n    if (!oa.oauth_version) {\n        oa.oauth_version = \"1.0\";\n    }\n    if (!oa.oauth_timestamp) {\n        oa.oauth_timestamp = Math.floor(Date.now() / 1000).toString();\n    }\n    if (!oa.oauth_nonce) {\n        oa.oauth_nonce = uuid().replace(/-/g, \"\");\n    }\n    if (!oa.oauth_signature_method) {\n        oa.oauth_signature_method = \"HMAC-SHA1\";\n    }\n    var consumer_secret_or_private_key = oa.oauth_consumer_secret || oa.oauth_private_key // eslint-disable-line camelcase\n    ;\n    delete oa.oauth_consumer_secret;\n    delete oa.oauth_private_key;\n    var token_secret = oa.oauth_token_secret // eslint-disable-line camelcase\n    ;\n    delete oa.oauth_token_secret;\n    var realm = oa.oauth_realm;\n    delete oa.oauth_realm;\n    delete oa.oauth_transport_method;\n    var baseurl = uri.protocol + \"//\" + uri.host + uri.pathname;\n    var params = qsLib.parse([].concat(query, form, qsLib.stringify(oa)).join(\"&\"));\n    oa.oauth_signature = oauth.sign(oa.oauth_signature_method, method, baseurl, params, consumer_secret_or_private_key, token_secret // eslint-disable-line camelcase\n    );\n    if (realm) {\n        oa.realm = realm;\n    }\n    return oa;\n};\nOAuth.prototype.buildBodyHash = function(_oauth, body) {\n    if ([\n        \"HMAC-SHA1\",\n        \"RSA-SHA1\"\n    ].indexOf(_oauth.signature_method || \"HMAC-SHA1\") < 0) {\n        this.request.emit(\"error\", new Error(\"oauth: \" + _oauth.signature_method + \" signature_method not supported with body_hash signing.\"));\n    }\n    var shasum = crypto.createHash(\"sha1\");\n    shasum.update(body || \"\");\n    var sha1 = shasum.digest(\"hex\");\n    return Buffer.from(sha1, \"hex\").toString(\"base64\");\n};\nOAuth.prototype.concatParams = function(oa, sep, wrap) {\n    wrap = wrap || \"\";\n    var params = Object.keys(oa).filter(function(i) {\n        return i !== \"realm\" && i !== \"oauth_signature\";\n    }).sort();\n    if (oa.realm) {\n        params.splice(0, 0, \"realm\");\n    }\n    params.push(\"oauth_signature\");\n    return params.map(function(i) {\n        return i + \"=\" + wrap + oauth.rfc3986(oa[i]) + wrap;\n    }).join(sep);\n};\nOAuth.prototype.onRequest = function(_oauth) {\n    var self = this;\n    self.params = _oauth;\n    var uri = self.request.uri || {};\n    var method = self.request.method || \"\";\n    var headers = caseless(self.request.headers);\n    var body = self.request.body || \"\";\n    var qsLib = self.request.qsLib || qs;\n    var form;\n    var query;\n    var contentType = headers.get(\"content-type\") || \"\";\n    var formContentType = \"application/x-www-form-urlencoded\";\n    var transport = _oauth.transport_method || \"header\";\n    if (contentType.slice(0, formContentType.length) === formContentType) {\n        contentType = formContentType;\n        form = body;\n    }\n    if (uri.query) {\n        query = uri.query;\n    }\n    if (transport === \"body\" && (method !== \"POST\" || contentType !== formContentType)) {\n        self.request.emit(\"error\", new Error(\"oauth: transport_method of body requires POST \" + \"and content-type \" + formContentType));\n    }\n    if (!form && typeof _oauth.body_hash === \"boolean\") {\n        _oauth.body_hash = self.buildBodyHash(_oauth, self.request.body.toString());\n    }\n    var oa = self.buildParams(_oauth, uri, method, query, form, qsLib);\n    switch(transport){\n        case \"header\":\n            self.request.setHeader(\"Authorization\", \"OAuth \" + self.concatParams(oa, \",\", '\"'));\n            break;\n        case \"query\":\n            var href = self.request.uri.href += (query ? \"&\" : \"?\") + self.concatParams(oa, \"&\");\n            self.request.uri = url.parse(href);\n            self.request.path = self.request.uri.path;\n            break;\n        case \"body\":\n            self.request.body = (form ? form + \"&\" : \"\") + self.concatParams(oa, \"&\");\n            break;\n        default:\n            self.request.emit(\"error\", new Error(\"oauth: transport_method invalid\"));\n    }\n};\nexports.OAuth = OAuth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvb2F1dGguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxNQUFNQyxtQkFBT0EsQ0FBQztBQUNsQixJQUFJQyxLQUFLRCxtQkFBT0EsQ0FBQztBQUNqQixJQUFJRSxXQUFXRixtQkFBT0EsQ0FBQztBQUN2QixJQUFJRyxPQUFPSCxtQkFBT0EsQ0FBQztBQUNuQixJQUFJSSxRQUFRSixtQkFBT0EsQ0FBQztBQUNwQixJQUFJSyxTQUFTTCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJTSxTQUFTTiw0RkFBNkI7QUFFMUMsU0FBU08sTUFBT0MsT0FBTztJQUNyQixJQUFJLENBQUNBLE9BQU8sR0FBR0E7SUFDZixJQUFJLENBQUNDLE1BQU0sR0FBRztBQUNoQjtBQUVBRixNQUFNRyxTQUFTLENBQUNDLFdBQVcsR0FBRyxTQUFVQyxNQUFNLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsS0FBSztJQUM3RSxJQUFJQyxLQUFLLENBQUM7SUFDVixJQUFLLElBQUlDLEtBQUtQLE9BQVE7UUFDcEJNLEVBQUUsQ0FBQyxXQUFXQyxFQUFFLEdBQUdQLE1BQU0sQ0FBQ08sRUFBRTtJQUM5QjtJQUNBLElBQUksQ0FBQ0QsR0FBR0UsYUFBYSxFQUFFO1FBQ3JCRixHQUFHRSxhQUFhLEdBQUc7SUFDckI7SUFDQSxJQUFJLENBQUNGLEdBQUdHLGVBQWUsRUFBRTtRQUN2QkgsR0FBR0csZUFBZSxHQUFHQyxLQUFLQyxLQUFLLENBQUNDLEtBQUtDLEdBQUcsS0FBSyxNQUFNQyxRQUFRO0lBQzdEO0lBQ0EsSUFBSSxDQUFDUixHQUFHUyxXQUFXLEVBQUU7UUFDbkJULEdBQUdTLFdBQVcsR0FBR3hCLE9BQU95QixPQUFPLENBQUMsTUFBTTtJQUN4QztJQUNBLElBQUksQ0FBQ1YsR0FBR1csc0JBQXNCLEVBQUU7UUFDOUJYLEdBQUdXLHNCQUFzQixHQUFHO0lBQzlCO0lBRUEsSUFBSUMsaUNBQWlDWixHQUFHYSxxQkFBcUIsSUFBSWIsR0FBR2MsaUJBQWlCLENBQUMsZ0NBQWdDOztJQUN0SCxPQUFPZCxHQUFHYSxxQkFBcUI7SUFDL0IsT0FBT2IsR0FBR2MsaUJBQWlCO0lBRTNCLElBQUlDLGVBQWVmLEdBQUdnQixrQkFBa0IsQ0FBQyxnQ0FBZ0M7O0lBQ3pFLE9BQU9oQixHQUFHZ0Isa0JBQWtCO0lBRTVCLElBQUlDLFFBQVFqQixHQUFHa0IsV0FBVztJQUMxQixPQUFPbEIsR0FBR2tCLFdBQVc7SUFDckIsT0FBT2xCLEdBQUdtQixzQkFBc0I7SUFFaEMsSUFBSUMsVUFBVXpCLElBQUkwQixRQUFRLEdBQUcsT0FBTzFCLElBQUkyQixJQUFJLEdBQUczQixJQUFJNEIsUUFBUTtJQUMzRCxJQUFJaEMsU0FBU1EsTUFBTXlCLEtBQUssQ0FBQyxFQUFFLENBQUNDLE1BQU0sQ0FBQzVCLE9BQU9DLE1BQU1DLE1BQU0yQixTQUFTLENBQUMxQixLQUFLMkIsSUFBSSxDQUFDO0lBRTFFM0IsR0FBRzRCLGVBQWUsR0FBRzFDLE1BQU0yQyxJQUFJLENBQzdCN0IsR0FBR1csc0JBQXNCLEVBQ3pCZixRQUNBd0IsU0FDQTdCLFFBQ0FxQixnQ0FDQUcsYUFBYSxnQ0FBZ0M7O0lBRy9DLElBQUlFLE9BQU87UUFDVGpCLEdBQUdpQixLQUFLLEdBQUdBO0lBQ2I7SUFFQSxPQUFPakI7QUFDVDtBQUVBWCxNQUFNRyxTQUFTLENBQUNzQyxhQUFhLEdBQUcsU0FBVXBDLE1BQU0sRUFBRXFDLElBQUk7SUFDcEQsSUFBSTtRQUFDO1FBQWE7S0FBVyxDQUFDQyxPQUFPLENBQUN0QyxPQUFPdUMsZ0JBQWdCLElBQUksZUFBZSxHQUFHO1FBQ2pGLElBQUksQ0FBQzNDLE9BQU8sQ0FBQzRDLElBQUksQ0FBQyxTQUFTLElBQUlDLE1BQU0sWUFBWXpDLE9BQU91QyxnQkFBZ0IsR0FDdEU7SUFDSjtJQUVBLElBQUlHLFNBQVNqRCxPQUFPa0QsVUFBVSxDQUFDO0lBQy9CRCxPQUFPRSxNQUFNLENBQUNQLFFBQVE7SUFDdEIsSUFBSVEsT0FBT0gsT0FBT0ksTUFBTSxDQUFDO0lBRXpCLE9BQU9wRCxPQUFPcUQsSUFBSSxDQUFDRixNQUFNLE9BQU8vQixRQUFRLENBQUM7QUFDM0M7QUFFQW5CLE1BQU1HLFNBQVMsQ0FBQ2tELFlBQVksR0FBRyxTQUFVMUMsRUFBRSxFQUFFMkMsR0FBRyxFQUFFQyxJQUFJO0lBQ3BEQSxPQUFPQSxRQUFRO0lBRWYsSUFBSXJELFNBQVNzRCxPQUFPQyxJQUFJLENBQUM5QyxJQUFJK0MsTUFBTSxDQUFDLFNBQVU5QyxDQUFDO1FBQzdDLE9BQU9BLE1BQU0sV0FBV0EsTUFBTTtJQUNoQyxHQUFHK0MsSUFBSTtJQUVQLElBQUloRCxHQUFHaUIsS0FBSyxFQUFFO1FBQ1oxQixPQUFPMEQsTUFBTSxDQUFDLEdBQUcsR0FBRztJQUN0QjtJQUNBMUQsT0FBTzJELElBQUksQ0FBQztJQUVaLE9BQU8zRCxPQUFPNEQsR0FBRyxDQUFDLFNBQVVsRCxDQUFDO1FBQzNCLE9BQU9BLElBQUksTUFBTTJDLE9BQU8xRCxNQUFNa0UsT0FBTyxDQUFDcEQsRUFBRSxDQUFDQyxFQUFFLElBQUkyQztJQUNqRCxHQUFHakIsSUFBSSxDQUFDZ0I7QUFDVjtBQUVBdEQsTUFBTUcsU0FBUyxDQUFDNkQsU0FBUyxHQUFHLFNBQVUzRCxNQUFNO0lBQzFDLElBQUk0RCxPQUFPLElBQUk7SUFDZkEsS0FBSy9ELE1BQU0sR0FBR0c7SUFFZCxJQUFJQyxNQUFNMkQsS0FBS2hFLE9BQU8sQ0FBQ0ssR0FBRyxJQUFJLENBQUM7SUFDL0IsSUFBSUMsU0FBUzBELEtBQUtoRSxPQUFPLENBQUNNLE1BQU0sSUFBSTtJQUNwQyxJQUFJMkQsVUFBVXZFLFNBQVNzRSxLQUFLaEUsT0FBTyxDQUFDaUUsT0FBTztJQUMzQyxJQUFJeEIsT0FBT3VCLEtBQUtoRSxPQUFPLENBQUN5QyxJQUFJLElBQUk7SUFDaEMsSUFBSWhDLFFBQVF1RCxLQUFLaEUsT0FBTyxDQUFDUyxLQUFLLElBQUloQjtJQUVsQyxJQUFJZTtJQUNKLElBQUlEO0lBQ0osSUFBSTJELGNBQWNELFFBQVFFLEdBQUcsQ0FBQyxtQkFBbUI7SUFDakQsSUFBSUMsa0JBQWtCO0lBQ3RCLElBQUlDLFlBQVlqRSxPQUFPa0UsZ0JBQWdCLElBQUk7SUFFM0MsSUFBSUosWUFBWUssS0FBSyxDQUFDLEdBQUdILGdCQUFnQkksTUFBTSxNQUFNSixpQkFBaUI7UUFDcEVGLGNBQWNFO1FBQ2Q1RCxPQUFPaUM7SUFDVDtJQUNBLElBQUlwQyxJQUFJRSxLQUFLLEVBQUU7UUFDYkEsUUFBUUYsSUFBSUUsS0FBSztJQUNuQjtJQUNBLElBQUk4RCxjQUFjLFVBQVcvRCxDQUFBQSxXQUFXLFVBQVU0RCxnQkFBZ0JFLGVBQWMsR0FBSTtRQUNsRkosS0FBS2hFLE9BQU8sQ0FBQzRDLElBQUksQ0FBQyxTQUFTLElBQUlDLE1BQU0sbURBQ25DLHNCQUFzQnVCO0lBQzFCO0lBRUEsSUFBSSxDQUFDNUQsUUFBUSxPQUFPSixPQUFPcUUsU0FBUyxLQUFLLFdBQVc7UUFDbERyRSxPQUFPcUUsU0FBUyxHQUFHVCxLQUFLeEIsYUFBYSxDQUFDcEMsUUFBUTRELEtBQUtoRSxPQUFPLENBQUN5QyxJQUFJLENBQUN2QixRQUFRO0lBQzFFO0lBRUEsSUFBSVIsS0FBS3NELEtBQUs3RCxXQUFXLENBQUNDLFFBQVFDLEtBQUtDLFFBQVFDLE9BQU9DLE1BQU1DO0lBRTVELE9BQVE0RDtRQUNOLEtBQUs7WUFDSEwsS0FBS2hFLE9BQU8sQ0FBQzBFLFNBQVMsQ0FBQyxpQkFBaUIsV0FBV1YsS0FBS1osWUFBWSxDQUFDMUMsSUFBSSxLQUFLO1lBQzlFO1FBRUYsS0FBSztZQUNILElBQUlpRSxPQUFPWCxLQUFLaEUsT0FBTyxDQUFDSyxHQUFHLENBQUNzRSxJQUFJLElBQUksQ0FBQ3BFLFFBQVEsTUFBTSxHQUFFLElBQUt5RCxLQUFLWixZQUFZLENBQUMxQyxJQUFJO1lBQ2hGc0QsS0FBS2hFLE9BQU8sQ0FBQ0ssR0FBRyxHQUFHZCxJQUFJMkMsS0FBSyxDQUFDeUM7WUFDN0JYLEtBQUtoRSxPQUFPLENBQUM0RSxJQUFJLEdBQUdaLEtBQUtoRSxPQUFPLENBQUNLLEdBQUcsQ0FBQ3VFLElBQUk7WUFDekM7UUFFRixLQUFLO1lBQ0haLEtBQUtoRSxPQUFPLENBQUN5QyxJQUFJLEdBQUcsQ0FBQ2pDLE9BQU9BLE9BQU8sTUFBTSxFQUFDLElBQUt3RCxLQUFLWixZQUFZLENBQUMxQyxJQUFJO1lBQ3JFO1FBRUY7WUFDRXNELEtBQUtoRSxPQUFPLENBQUM0QyxJQUFJLENBQUMsU0FBUyxJQUFJQyxNQUFNO0lBQ3pDO0FBQ0Y7QUFFQWdDLGFBQWEsR0FBRzlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkZGl0LWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0L2xpYi9vYXV0aC5qcz9jZGIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgdXJsID0gcmVxdWlyZSgndXJsJylcbnZhciBxcyA9IHJlcXVpcmUoJ3FzJylcbnZhciBjYXNlbGVzcyA9IHJlcXVpcmUoJ2Nhc2VsZXNzJylcbnZhciB1dWlkID0gcmVxdWlyZSgndXVpZC92NCcpXG52YXIgb2F1dGggPSByZXF1aXJlKCdvYXV0aC1zaWduJylcbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIE9BdXRoIChyZXF1ZXN0KSB7XG4gIHRoaXMucmVxdWVzdCA9IHJlcXVlc3RcbiAgdGhpcy5wYXJhbXMgPSBudWxsXG59XG5cbk9BdXRoLnByb3RvdHlwZS5idWlsZFBhcmFtcyA9IGZ1bmN0aW9uIChfb2F1dGgsIHVyaSwgbWV0aG9kLCBxdWVyeSwgZm9ybSwgcXNMaWIpIHtcbiAgdmFyIG9hID0ge31cbiAgZm9yICh2YXIgaSBpbiBfb2F1dGgpIHtcbiAgICBvYVsnb2F1dGhfJyArIGldID0gX29hdXRoW2ldXG4gIH1cbiAgaWYgKCFvYS5vYXV0aF92ZXJzaW9uKSB7XG4gICAgb2Eub2F1dGhfdmVyc2lvbiA9ICcxLjAnXG4gIH1cbiAgaWYgKCFvYS5vYXV0aF90aW1lc3RhbXApIHtcbiAgICBvYS5vYXV0aF90aW1lc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKS50b1N0cmluZygpXG4gIH1cbiAgaWYgKCFvYS5vYXV0aF9ub25jZSkge1xuICAgIG9hLm9hdXRoX25vbmNlID0gdXVpZCgpLnJlcGxhY2UoLy0vZywgJycpXG4gIH1cbiAgaWYgKCFvYS5vYXV0aF9zaWduYXR1cmVfbWV0aG9kKSB7XG4gICAgb2Eub2F1dGhfc2lnbmF0dXJlX21ldGhvZCA9ICdITUFDLVNIQTEnXG4gIH1cblxuICB2YXIgY29uc3VtZXJfc2VjcmV0X29yX3ByaXZhdGVfa2V5ID0gb2Eub2F1dGhfY29uc3VtZXJfc2VjcmV0IHx8IG9hLm9hdXRoX3ByaXZhdGVfa2V5IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG4gIGRlbGV0ZSBvYS5vYXV0aF9jb25zdW1lcl9zZWNyZXRcbiAgZGVsZXRlIG9hLm9hdXRoX3ByaXZhdGVfa2V5XG5cbiAgdmFyIHRva2VuX3NlY3JldCA9IG9hLm9hdXRoX3Rva2VuX3NlY3JldCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICBkZWxldGUgb2Eub2F1dGhfdG9rZW5fc2VjcmV0XG5cbiAgdmFyIHJlYWxtID0gb2Eub2F1dGhfcmVhbG1cbiAgZGVsZXRlIG9hLm9hdXRoX3JlYWxtXG4gIGRlbGV0ZSBvYS5vYXV0aF90cmFuc3BvcnRfbWV0aG9kXG5cbiAgdmFyIGJhc2V1cmwgPSB1cmkucHJvdG9jb2wgKyAnLy8nICsgdXJpLmhvc3QgKyB1cmkucGF0aG5hbWVcbiAgdmFyIHBhcmFtcyA9IHFzTGliLnBhcnNlKFtdLmNvbmNhdChxdWVyeSwgZm9ybSwgcXNMaWIuc3RyaW5naWZ5KG9hKSkuam9pbignJicpKVxuXG4gIG9hLm9hdXRoX3NpZ25hdHVyZSA9IG9hdXRoLnNpZ24oXG4gICAgb2Eub2F1dGhfc2lnbmF0dXJlX21ldGhvZCxcbiAgICBtZXRob2QsXG4gICAgYmFzZXVybCxcbiAgICBwYXJhbXMsXG4gICAgY29uc3VtZXJfc2VjcmV0X29yX3ByaXZhdGVfa2V5LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICAgIHRva2VuX3NlY3JldCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuICApXG5cbiAgaWYgKHJlYWxtKSB7XG4gICAgb2EucmVhbG0gPSByZWFsbVxuICB9XG5cbiAgcmV0dXJuIG9hXG59XG5cbk9BdXRoLnByb3RvdHlwZS5idWlsZEJvZHlIYXNoID0gZnVuY3Rpb24gKF9vYXV0aCwgYm9keSkge1xuICBpZiAoWydITUFDLVNIQTEnLCAnUlNBLVNIQTEnXS5pbmRleE9mKF9vYXV0aC5zaWduYXR1cmVfbWV0aG9kIHx8ICdITUFDLVNIQTEnKSA8IDApIHtcbiAgICB0aGlzLnJlcXVlc3QuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ29hdXRoOiAnICsgX29hdXRoLnNpZ25hdHVyZV9tZXRob2QgK1xuICAgICAgJyBzaWduYXR1cmVfbWV0aG9kIG5vdCBzdXBwb3J0ZWQgd2l0aCBib2R5X2hhc2ggc2lnbmluZy4nKSlcbiAgfVxuXG4gIHZhciBzaGFzdW0gPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpXG4gIHNoYXN1bS51cGRhdGUoYm9keSB8fCAnJylcbiAgdmFyIHNoYTEgPSBzaGFzdW0uZGlnZXN0KCdoZXgnKVxuXG4gIHJldHVybiBCdWZmZXIuZnJvbShzaGExLCAnaGV4JykudG9TdHJpbmcoJ2Jhc2U2NCcpXG59XG5cbk9BdXRoLnByb3RvdHlwZS5jb25jYXRQYXJhbXMgPSBmdW5jdGlvbiAob2EsIHNlcCwgd3JhcCkge1xuICB3cmFwID0gd3JhcCB8fCAnJ1xuXG4gIHZhciBwYXJhbXMgPSBPYmplY3Qua2V5cyhvYSkuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGkgIT09ICdyZWFsbScgJiYgaSAhPT0gJ29hdXRoX3NpZ25hdHVyZSdcbiAgfSkuc29ydCgpXG5cbiAgaWYgKG9hLnJlYWxtKSB7XG4gICAgcGFyYW1zLnNwbGljZSgwLCAwLCAncmVhbG0nKVxuICB9XG4gIHBhcmFtcy5wdXNoKCdvYXV0aF9zaWduYXR1cmUnKVxuXG4gIHJldHVybiBwYXJhbXMubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGkgKyAnPScgKyB3cmFwICsgb2F1dGgucmZjMzk4NihvYVtpXSkgKyB3cmFwXG4gIH0pLmpvaW4oc2VwKVxufVxuXG5PQXV0aC5wcm90b3R5cGUub25SZXF1ZXN0ID0gZnVuY3Rpb24gKF9vYXV0aCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgc2VsZi5wYXJhbXMgPSBfb2F1dGhcblxuICB2YXIgdXJpID0gc2VsZi5yZXF1ZXN0LnVyaSB8fCB7fVxuICB2YXIgbWV0aG9kID0gc2VsZi5yZXF1ZXN0Lm1ldGhvZCB8fCAnJ1xuICB2YXIgaGVhZGVycyA9IGNhc2VsZXNzKHNlbGYucmVxdWVzdC5oZWFkZXJzKVxuICB2YXIgYm9keSA9IHNlbGYucmVxdWVzdC5ib2R5IHx8ICcnXG4gIHZhciBxc0xpYiA9IHNlbGYucmVxdWVzdC5xc0xpYiB8fCBxc1xuXG4gIHZhciBmb3JtXG4gIHZhciBxdWVyeVxuICB2YXIgY29udGVudFR5cGUgPSBoZWFkZXJzLmdldCgnY29udGVudC10eXBlJykgfHwgJydcbiAgdmFyIGZvcm1Db250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gIHZhciB0cmFuc3BvcnQgPSBfb2F1dGgudHJhbnNwb3J0X21ldGhvZCB8fCAnaGVhZGVyJ1xuXG4gIGlmIChjb250ZW50VHlwZS5zbGljZSgwLCBmb3JtQ29udGVudFR5cGUubGVuZ3RoKSA9PT0gZm9ybUNvbnRlbnRUeXBlKSB7XG4gICAgY29udGVudFR5cGUgPSBmb3JtQ29udGVudFR5cGVcbiAgICBmb3JtID0gYm9keVxuICB9XG4gIGlmICh1cmkucXVlcnkpIHtcbiAgICBxdWVyeSA9IHVyaS5xdWVyeVxuICB9XG4gIGlmICh0cmFuc3BvcnQgPT09ICdib2R5JyAmJiAobWV0aG9kICE9PSAnUE9TVCcgfHwgY29udGVudFR5cGUgIT09IGZvcm1Db250ZW50VHlwZSkpIHtcbiAgICBzZWxmLnJlcXVlc3QuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ29hdXRoOiB0cmFuc3BvcnRfbWV0aG9kIG9mIGJvZHkgcmVxdWlyZXMgUE9TVCAnICtcbiAgICAgICdhbmQgY29udGVudC10eXBlICcgKyBmb3JtQ29udGVudFR5cGUpKVxuICB9XG5cbiAgaWYgKCFmb3JtICYmIHR5cGVvZiBfb2F1dGguYm9keV9oYXNoID09PSAnYm9vbGVhbicpIHtcbiAgICBfb2F1dGguYm9keV9oYXNoID0gc2VsZi5idWlsZEJvZHlIYXNoKF9vYXV0aCwgc2VsZi5yZXF1ZXN0LmJvZHkudG9TdHJpbmcoKSlcbiAgfVxuXG4gIHZhciBvYSA9IHNlbGYuYnVpbGRQYXJhbXMoX29hdXRoLCB1cmksIG1ldGhvZCwgcXVlcnksIGZvcm0sIHFzTGliKVxuXG4gIHN3aXRjaCAodHJhbnNwb3J0KSB7XG4gICAgY2FzZSAnaGVhZGVyJzpcbiAgICAgIHNlbGYucmVxdWVzdC5zZXRIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCAnT0F1dGggJyArIHNlbGYuY29uY2F0UGFyYW1zKG9hLCAnLCcsICdcIicpKVxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgJ3F1ZXJ5JzpcbiAgICAgIHZhciBocmVmID0gc2VsZi5yZXF1ZXN0LnVyaS5ocmVmICs9IChxdWVyeSA/ICcmJyA6ICc/JykgKyBzZWxmLmNvbmNhdFBhcmFtcyhvYSwgJyYnKVxuICAgICAgc2VsZi5yZXF1ZXN0LnVyaSA9IHVybC5wYXJzZShocmVmKVxuICAgICAgc2VsZi5yZXF1ZXN0LnBhdGggPSBzZWxmLnJlcXVlc3QudXJpLnBhdGhcbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlICdib2R5JzpcbiAgICAgIHNlbGYucmVxdWVzdC5ib2R5ID0gKGZvcm0gPyBmb3JtICsgJyYnIDogJycpICsgc2VsZi5jb25jYXRQYXJhbXMob2EsICcmJylcbiAgICAgIGJyZWFrXG5cbiAgICBkZWZhdWx0OlxuICAgICAgc2VsZi5yZXF1ZXN0LmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdvYXV0aDogdHJhbnNwb3J0X21ldGhvZCBpbnZhbGlkJykpXG4gIH1cbn1cblxuZXhwb3J0cy5PQXV0aCA9IE9BdXRoXG4iXSwibmFtZXMiOlsidXJsIiwicmVxdWlyZSIsInFzIiwiY2FzZWxlc3MiLCJ1dWlkIiwib2F1dGgiLCJjcnlwdG8iLCJCdWZmZXIiLCJPQXV0aCIsInJlcXVlc3QiLCJwYXJhbXMiLCJwcm90b3R5cGUiLCJidWlsZFBhcmFtcyIsIl9vYXV0aCIsInVyaSIsIm1ldGhvZCIsInF1ZXJ5IiwiZm9ybSIsInFzTGliIiwib2EiLCJpIiwib2F1dGhfdmVyc2lvbiIsIm9hdXRoX3RpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJ0b1N0cmluZyIsIm9hdXRoX25vbmNlIiwicmVwbGFjZSIsIm9hdXRoX3NpZ25hdHVyZV9tZXRob2QiLCJjb25zdW1lcl9zZWNyZXRfb3JfcHJpdmF0ZV9rZXkiLCJvYXV0aF9jb25zdW1lcl9zZWNyZXQiLCJvYXV0aF9wcml2YXRlX2tleSIsInRva2VuX3NlY3JldCIsIm9hdXRoX3Rva2VuX3NlY3JldCIsInJlYWxtIiwib2F1dGhfcmVhbG0iLCJvYXV0aF90cmFuc3BvcnRfbWV0aG9kIiwiYmFzZXVybCIsInByb3RvY29sIiwiaG9zdCIsInBhdGhuYW1lIiwicGFyc2UiLCJjb25jYXQiLCJzdHJpbmdpZnkiLCJqb2luIiwib2F1dGhfc2lnbmF0dXJlIiwic2lnbiIsImJ1aWxkQm9keUhhc2giLCJib2R5IiwiaW5kZXhPZiIsInNpZ25hdHVyZV9tZXRob2QiLCJlbWl0IiwiRXJyb3IiLCJzaGFzdW0iLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwic2hhMSIsImRpZ2VzdCIsImZyb20iLCJjb25jYXRQYXJhbXMiLCJzZXAiLCJ3cmFwIiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsInNvcnQiLCJzcGxpY2UiLCJwdXNoIiwibWFwIiwicmZjMzk4NiIsIm9uUmVxdWVzdCIsInNlbGYiLCJoZWFkZXJzIiwiY29udGVudFR5cGUiLCJnZXQiLCJmb3JtQ29udGVudFR5cGUiLCJ0cmFuc3BvcnQiLCJ0cmFuc3BvcnRfbWV0aG9kIiwic2xpY2UiLCJsZW5ndGgiLCJib2R5X2hhc2giLCJzZXRIZWFkZXIiLCJocmVmIiwicGF0aCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/lib/oauth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/request/lib/querystring.js":
/*!*************************************************!*\
  !*** ./node_modules/request/lib/querystring.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar qs = __webpack_require__(/*! qs */ \"(rsc)/./node_modules/qs/lib/index.js\");\nvar querystring = __webpack_require__(/*! querystring */ \"querystring\");\nfunction Querystring(request) {\n    this.request = request;\n    this.lib = null;\n    this.useQuerystring = null;\n    this.parseOptions = null;\n    this.stringifyOptions = null;\n}\nQuerystring.prototype.init = function(options) {\n    if (this.lib) {\n        return;\n    }\n    this.useQuerystring = options.useQuerystring;\n    this.lib = this.useQuerystring ? querystring : qs;\n    this.parseOptions = options.qsParseOptions || {};\n    this.stringifyOptions = options.qsStringifyOptions || {};\n};\nQuerystring.prototype.stringify = function(obj) {\n    return this.useQuerystring ? this.rfc3986(this.lib.stringify(obj, this.stringifyOptions.sep || null, this.stringifyOptions.eq || null, this.stringifyOptions)) : this.lib.stringify(obj, this.stringifyOptions);\n};\nQuerystring.prototype.parse = function(str) {\n    return this.useQuerystring ? this.lib.parse(str, this.parseOptions.sep || null, this.parseOptions.eq || null, this.parseOptions) : this.lib.parse(str, this.parseOptions);\n};\nQuerystring.prototype.rfc3986 = function(str) {\n    return str.replace(/[!'()*]/g, function(c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n};\nQuerystring.prototype.unescape = querystring.unescape;\nexports.Querystring = Querystring;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvcXVlcnlzdHJpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxLQUFLQyxtQkFBT0EsQ0FBQztBQUNqQixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUUxQixTQUFTRSxZQUFhQyxPQUFPO0lBQzNCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtJQUNmLElBQUksQ0FBQ0MsR0FBRyxHQUFHO0lBQ1gsSUFBSSxDQUFDQyxjQUFjLEdBQUc7SUFDdEIsSUFBSSxDQUFDQyxZQUFZLEdBQUc7SUFDcEIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRztBQUMxQjtBQUVBTCxZQUFZTSxTQUFTLENBQUNDLElBQUksR0FBRyxTQUFVQyxPQUFPO0lBQzVDLElBQUksSUFBSSxDQUFDTixHQUFHLEVBQUU7UUFBRTtJQUFPO0lBRXZCLElBQUksQ0FBQ0MsY0FBYyxHQUFHSyxRQUFRTCxjQUFjO0lBQzVDLElBQUksQ0FBQ0QsR0FBRyxHQUFJLElBQUksQ0FBQ0MsY0FBYyxHQUFHSixjQUFjRjtJQUVoRCxJQUFJLENBQUNPLFlBQVksR0FBR0ksUUFBUUMsY0FBYyxJQUFJLENBQUM7SUFDL0MsSUFBSSxDQUFDSixnQkFBZ0IsR0FBR0csUUFBUUUsa0JBQWtCLElBQUksQ0FBQztBQUN6RDtBQUVBVixZQUFZTSxTQUFTLENBQUNLLFNBQVMsR0FBRyxTQUFVQyxHQUFHO0lBQzdDLE9BQU8sSUFBSyxDQUFDVCxjQUFjLEdBQ3ZCLElBQUksQ0FBQ1UsT0FBTyxDQUFDLElBQUksQ0FBQ1gsR0FBRyxDQUFDUyxTQUFTLENBQUNDLEtBQ2hDLElBQUksQ0FBQ1AsZ0JBQWdCLENBQUNTLEdBQUcsSUFBSSxNQUM3QixJQUFJLENBQUNULGdCQUFnQixDQUFDVSxFQUFFLElBQUksTUFDNUIsSUFBSSxDQUFDVixnQkFBZ0IsS0FDckIsSUFBSSxDQUFDSCxHQUFHLENBQUNTLFNBQVMsQ0FBQ0MsS0FBSyxJQUFJLENBQUNQLGdCQUFnQjtBQUNuRDtBQUVBTCxZQUFZTSxTQUFTLENBQUNVLEtBQUssR0FBRyxTQUFVQyxHQUFHO0lBQ3pDLE9BQU8sSUFBSyxDQUFDZCxjQUFjLEdBQ3ZCLElBQUksQ0FBQ0QsR0FBRyxDQUFDYyxLQUFLLENBQUNDLEtBQ2YsSUFBSSxDQUFDYixZQUFZLENBQUNVLEdBQUcsSUFBSSxNQUN6QixJQUFJLENBQUNWLFlBQVksQ0FBQ1csRUFBRSxJQUFJLE1BQ3hCLElBQUksQ0FBQ1gsWUFBWSxJQUNqQixJQUFJLENBQUNGLEdBQUcsQ0FBQ2MsS0FBSyxDQUFDQyxLQUFLLElBQUksQ0FBQ2IsWUFBWTtBQUMzQztBQUVBSixZQUFZTSxTQUFTLENBQUNPLE9BQU8sR0FBRyxTQUFVSSxHQUFHO0lBQzNDLE9BQU9BLElBQUlDLE9BQU8sQ0FBQyxZQUFZLFNBQVVDLENBQUM7UUFDeEMsT0FBTyxNQUFNQSxFQUFFQyxVQUFVLENBQUMsR0FBR0MsUUFBUSxDQUFDLElBQUlDLFdBQVc7SUFDdkQ7QUFDRjtBQUVBdEIsWUFBWU0sU0FBUyxDQUFDaUIsUUFBUSxHQUFHeEIsWUFBWXdCLFFBQVE7QUFFckRDLG1CQUFtQixHQUFHeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3JlcXVlc3QvbGliL3F1ZXJ5c3RyaW5nLmpzP2I4NWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnZhciBxcyA9IHJlcXVpcmUoJ3FzJylcbnZhciBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJylcblxuZnVuY3Rpb24gUXVlcnlzdHJpbmcgKHJlcXVlc3QpIHtcbiAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdFxuICB0aGlzLmxpYiA9IG51bGxcbiAgdGhpcy51c2VRdWVyeXN0cmluZyA9IG51bGxcbiAgdGhpcy5wYXJzZU9wdGlvbnMgPSBudWxsXG4gIHRoaXMuc3RyaW5naWZ5T3B0aW9ucyA9IG51bGxcbn1cblxuUXVlcnlzdHJpbmcucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBpZiAodGhpcy5saWIpIHsgcmV0dXJuIH1cblxuICB0aGlzLnVzZVF1ZXJ5c3RyaW5nID0gb3B0aW9ucy51c2VRdWVyeXN0cmluZ1xuICB0aGlzLmxpYiA9ICh0aGlzLnVzZVF1ZXJ5c3RyaW5nID8gcXVlcnlzdHJpbmcgOiBxcylcblxuICB0aGlzLnBhcnNlT3B0aW9ucyA9IG9wdGlvbnMucXNQYXJzZU9wdGlvbnMgfHwge31cbiAgdGhpcy5zdHJpbmdpZnlPcHRpb25zID0gb3B0aW9ucy5xc1N0cmluZ2lmeU9wdGlvbnMgfHwge31cbn1cblxuUXVlcnlzdHJpbmcucHJvdG90eXBlLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuICh0aGlzLnVzZVF1ZXJ5c3RyaW5nKVxuICAgID8gdGhpcy5yZmMzOTg2KHRoaXMubGliLnN0cmluZ2lmeShvYmosXG4gICAgICB0aGlzLnN0cmluZ2lmeU9wdGlvbnMuc2VwIHx8IG51bGwsXG4gICAgICB0aGlzLnN0cmluZ2lmeU9wdGlvbnMuZXEgfHwgbnVsbCxcbiAgICAgIHRoaXMuc3RyaW5naWZ5T3B0aW9ucykpXG4gICAgOiB0aGlzLmxpYi5zdHJpbmdpZnkob2JqLCB0aGlzLnN0cmluZ2lmeU9wdGlvbnMpXG59XG5cblF1ZXJ5c3RyaW5nLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuICh0aGlzLnVzZVF1ZXJ5c3RyaW5nKVxuICAgID8gdGhpcy5saWIucGFyc2Uoc3RyLFxuICAgICAgdGhpcy5wYXJzZU9wdGlvbnMuc2VwIHx8IG51bGwsXG4gICAgICB0aGlzLnBhcnNlT3B0aW9ucy5lcSB8fCBudWxsLFxuICAgICAgdGhpcy5wYXJzZU9wdGlvbnMpXG4gICAgOiB0aGlzLmxpYi5wYXJzZShzdHIsIHRoaXMucGFyc2VPcHRpb25zKVxufVxuXG5RdWVyeXN0cmluZy5wcm90b3R5cGUucmZjMzk4NiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bIScoKSpdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG5RdWVyeXN0cmluZy5wcm90b3R5cGUudW5lc2NhcGUgPSBxdWVyeXN0cmluZy51bmVzY2FwZVxuXG5leHBvcnRzLlF1ZXJ5c3RyaW5nID0gUXVlcnlzdHJpbmdcbiJdLCJuYW1lcyI6WyJxcyIsInJlcXVpcmUiLCJxdWVyeXN0cmluZyIsIlF1ZXJ5c3RyaW5nIiwicmVxdWVzdCIsImxpYiIsInVzZVF1ZXJ5c3RyaW5nIiwicGFyc2VPcHRpb25zIiwic3RyaW5naWZ5T3B0aW9ucyIsInByb3RvdHlwZSIsImluaXQiLCJvcHRpb25zIiwicXNQYXJzZU9wdGlvbnMiLCJxc1N0cmluZ2lmeU9wdGlvbnMiLCJzdHJpbmdpZnkiLCJvYmoiLCJyZmMzOTg2Iiwic2VwIiwiZXEiLCJwYXJzZSIsInN0ciIsInJlcGxhY2UiLCJjIiwiY2hhckNvZGVBdCIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJ1bmVzY2FwZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/lib/querystring.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/request/lib/redirect.js":
/*!**********************************************!*\
  !*** ./node_modules/request/lib/redirect.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar url = __webpack_require__(/*! url */ \"url\");\nvar isUrl = /^https?:/;\nfunction Redirect(request) {\n    this.request = request;\n    this.followRedirect = true;\n    this.followRedirects = true;\n    this.followAllRedirects = false;\n    this.followOriginalHttpMethod = false;\n    this.allowRedirect = function() {\n        return true;\n    };\n    this.maxRedirects = 10;\n    this.redirects = [];\n    this.redirectsFollowed = 0;\n    this.removeRefererHeader = false;\n}\nRedirect.prototype.onRequest = function(options) {\n    var self = this;\n    if (options.maxRedirects !== undefined) {\n        self.maxRedirects = options.maxRedirects;\n    }\n    if (typeof options.followRedirect === \"function\") {\n        self.allowRedirect = options.followRedirect;\n    }\n    if (options.followRedirect !== undefined) {\n        self.followRedirects = !!options.followRedirect;\n    }\n    if (options.followAllRedirects !== undefined) {\n        self.followAllRedirects = options.followAllRedirects;\n    }\n    if (self.followRedirects || self.followAllRedirects) {\n        self.redirects = self.redirects || [];\n    }\n    if (options.removeRefererHeader !== undefined) {\n        self.removeRefererHeader = options.removeRefererHeader;\n    }\n    if (options.followOriginalHttpMethod !== undefined) {\n        self.followOriginalHttpMethod = options.followOriginalHttpMethod;\n    }\n};\nRedirect.prototype.redirectTo = function(response) {\n    var self = this;\n    var request = self.request;\n    var redirectTo = null;\n    if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has(\"location\")) {\n        var location = response.caseless.get(\"location\");\n        request.debug(\"redirect\", location);\n        if (self.followAllRedirects) {\n            redirectTo = location;\n        } else if (self.followRedirects) {\n            switch(request.method){\n                case \"PATCH\":\n                case \"PUT\":\n                case \"POST\":\n                case \"DELETE\":\n                    break;\n                default:\n                    redirectTo = location;\n                    break;\n            }\n        }\n    } else if (response.statusCode === 401) {\n        var authHeader = request._auth.onResponse(response);\n        if (authHeader) {\n            request.setHeader(\"authorization\", authHeader);\n            redirectTo = request.uri;\n        }\n    }\n    return redirectTo;\n};\nRedirect.prototype.onResponse = function(response) {\n    var self = this;\n    var request = self.request;\n    var redirectTo = self.redirectTo(response);\n    if (!redirectTo || !self.allowRedirect.call(request, response)) {\n        return false;\n    }\n    request.debug(\"redirect to\", redirectTo);\n    // ignore any potential response body.  it cannot possibly be useful\n    // to us at this point.\n    // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n    if (response.resume) {\n        response.resume();\n    }\n    if (self.redirectsFollowed >= self.maxRedirects) {\n        request.emit(\"error\", new Error(\"Exceeded maxRedirects. Probably stuck in a redirect loop \" + request.uri.href));\n        return false;\n    }\n    self.redirectsFollowed += 1;\n    if (!isUrl.test(redirectTo)) {\n        redirectTo = url.resolve(request.uri.href, redirectTo);\n    }\n    var uriPrev = request.uri;\n    request.uri = url.parse(redirectTo);\n    // handle the case where we change protocol from https to http or vice versa\n    if (request.uri.protocol !== uriPrev.protocol) {\n        delete request.agent;\n    }\n    self.redirects.push({\n        statusCode: response.statusCode,\n        redirectUri: redirectTo\n    });\n    if (self.followAllRedirects && request.method !== \"HEAD\" && response.statusCode !== 401 && response.statusCode !== 307) {\n        request.method = self.followOriginalHttpMethod ? request.method : \"GET\";\n    }\n    // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215\n    delete request.src;\n    delete request.req;\n    delete request._started;\n    if (response.statusCode !== 401 && response.statusCode !== 307) {\n        // Remove parameters from the previous response, unless this is the second request\n        // for a server that requires digest authentication.\n        delete request.body;\n        delete request._form;\n        if (request.headers) {\n            request.removeHeader(\"host\");\n            request.removeHeader(\"content-type\");\n            request.removeHeader(\"content-length\");\n            if (request.uri.hostname !== request.originalHost.split(\":\")[0]) {\n                // Remove authorization if changing hostnames (but not if just\n                // changing ports or protocols).  This matches the behavior of curl:\n                // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710\n                request.removeHeader(\"authorization\");\n            }\n        }\n    }\n    if (!self.removeRefererHeader) {\n        request.setHeader(\"referer\", uriPrev.href);\n    }\n    request.emit(\"redirect\");\n    request.init();\n    return true;\n};\nexports.Redirect = Redirect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/lib/redirect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/request/lib/tunnel.js":
/*!********************************************!*\
  !*** ./node_modules/request/lib/tunnel.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar url = __webpack_require__(/*! url */ \"url\");\nvar tunnel = __webpack_require__(/*! tunnel-agent */ \"(rsc)/./node_modules/tunnel-agent/index.js\");\nvar defaultProxyHeaderWhiteList = [\n    \"accept\",\n    \"accept-charset\",\n    \"accept-encoding\",\n    \"accept-language\",\n    \"accept-ranges\",\n    \"cache-control\",\n    \"content-encoding\",\n    \"content-language\",\n    \"content-location\",\n    \"content-md5\",\n    \"content-range\",\n    \"content-type\",\n    \"connection\",\n    \"date\",\n    \"expect\",\n    \"max-forwards\",\n    \"pragma\",\n    \"referer\",\n    \"te\",\n    \"user-agent\",\n    \"via\"\n];\nvar defaultProxyHeaderExclusiveList = [\n    \"proxy-authorization\"\n];\nfunction constructProxyHost(uriObject) {\n    var port = uriObject.port;\n    var protocol = uriObject.protocol;\n    var proxyHost = uriObject.hostname + \":\";\n    if (port) {\n        proxyHost += port;\n    } else if (protocol === \"https:\") {\n        proxyHost += \"443\";\n    } else {\n        proxyHost += \"80\";\n    }\n    return proxyHost;\n}\nfunction constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {\n    var whiteList = proxyHeaderWhiteList.reduce(function(set, header) {\n        set[header.toLowerCase()] = true;\n        return set;\n    }, {});\n    return Object.keys(headers).filter(function(header) {\n        return whiteList[header.toLowerCase()];\n    }).reduce(function(set, header) {\n        set[header] = headers[header];\n        return set;\n    }, {});\n}\nfunction constructTunnelOptions(request, proxyHeaders) {\n    var proxy = request.proxy;\n    var tunnelOptions = {\n        proxy: {\n            host: proxy.hostname,\n            port: +proxy.port,\n            proxyAuth: proxy.auth,\n            headers: proxyHeaders\n        },\n        headers: request.headers,\n        ca: request.ca,\n        cert: request.cert,\n        key: request.key,\n        passphrase: request.passphrase,\n        pfx: request.pfx,\n        ciphers: request.ciphers,\n        rejectUnauthorized: request.rejectUnauthorized,\n        secureOptions: request.secureOptions,\n        secureProtocol: request.secureProtocol\n    };\n    return tunnelOptions;\n}\nfunction constructTunnelFnName(uri, proxy) {\n    var uriProtocol = uri.protocol === \"https:\" ? \"https\" : \"http\";\n    var proxyProtocol = proxy.protocol === \"https:\" ? \"Https\" : \"Http\";\n    return [\n        uriProtocol,\n        proxyProtocol\n    ].join(\"Over\");\n}\nfunction getTunnelFn(request) {\n    var uri = request.uri;\n    var proxy = request.proxy;\n    var tunnelFnName = constructTunnelFnName(uri, proxy);\n    return tunnel[tunnelFnName];\n}\nfunction Tunnel(request) {\n    this.request = request;\n    this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList;\n    this.proxyHeaderExclusiveList = [];\n    if (typeof request.tunnel !== \"undefined\") {\n        this.tunnelOverride = request.tunnel;\n    }\n}\nTunnel.prototype.isEnabled = function() {\n    var self = this;\n    var request = self.request;\n    // Tunnel HTTPS by default. Allow the user to override this setting.\n    // If self.tunnelOverride is set (the user specified a value), use it.\n    if (typeof self.tunnelOverride !== \"undefined\") {\n        return self.tunnelOverride;\n    }\n    // If the destination is HTTPS, tunnel.\n    if (request.uri.protocol === \"https:\") {\n        return true;\n    }\n    // Otherwise, do not use tunnel.\n    return false;\n};\nTunnel.prototype.setup = function(options) {\n    var self = this;\n    var request = self.request;\n    options = options || {};\n    if (typeof request.proxy === \"string\") {\n        request.proxy = url.parse(request.proxy);\n    }\n    if (!request.proxy || !request.tunnel) {\n        return false;\n    }\n    // Setup Proxy Header Exclusive List and White List\n    if (options.proxyHeaderWhiteList) {\n        self.proxyHeaderWhiteList = options.proxyHeaderWhiteList;\n    }\n    if (options.proxyHeaderExclusiveList) {\n        self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList;\n    }\n    var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList);\n    var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList);\n    // Setup Proxy Headers and Proxy Headers Host\n    // Only send the Proxy White Listed Header names\n    var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList);\n    proxyHeaders.host = constructProxyHost(request.uri);\n    proxyHeaderExclusiveList.forEach(request.removeHeader, request);\n    // Set Agent from Tunnel Data\n    var tunnelFn = getTunnelFn(request);\n    var tunnelOptions = constructTunnelOptions(request, proxyHeaders);\n    request.agent = tunnelFn(tunnelOptions);\n    return true;\n};\nTunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList;\nTunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList;\nexports.Tunnel = Tunnel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/lib/tunnel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/request/request.js":
/*!*****************************************!*\
  !*** ./node_modules/request/request.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar url = __webpack_require__(/*! url */ \"url\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar aws2 = __webpack_require__(/*! aws-sign2 */ \"(rsc)/./node_modules/aws-sign2/index.js\");\nvar aws4 = __webpack_require__(/*! aws4 */ \"(rsc)/./node_modules/aws4/aws4.js\");\nvar httpSignature = __webpack_require__(/*! http-signature */ \"(rsc)/./node_modules/http-signature/lib/index.js\");\nvar mime = __webpack_require__(/*! mime-types */ \"(rsc)/./node_modules/mime-types/index.js\");\nvar caseless = __webpack_require__(/*! caseless */ \"(rsc)/./node_modules/caseless/index.js\");\nvar ForeverAgent = __webpack_require__(/*! forever-agent */ \"(rsc)/./node_modules/forever-agent/index.js\");\nvar FormData = __webpack_require__(/*! form-data */ \"(rsc)/./node_modules/form-data/lib/form_data.js\");\nvar extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nvar isstream = __webpack_require__(/*! isstream */ \"(rsc)/./node_modules/isstream/isstream.js\");\nvar isTypedArray = (__webpack_require__(/*! is-typedarray */ \"(rsc)/./node_modules/is-typedarray/index.js\").strict);\nvar helpers = __webpack_require__(/*! ./lib/helpers */ \"(rsc)/./node_modules/request/lib/helpers.js\");\nvar cookies = __webpack_require__(/*! ./lib/cookies */ \"(rsc)/./node_modules/request/lib/cookies.js\");\nvar getProxyFromURI = __webpack_require__(/*! ./lib/getProxyFromURI */ \"(rsc)/./node_modules/request/lib/getProxyFromURI.js\");\nvar Querystring = (__webpack_require__(/*! ./lib/querystring */ \"(rsc)/./node_modules/request/lib/querystring.js\").Querystring);\nvar Har = (__webpack_require__(/*! ./lib/har */ \"(rsc)/./node_modules/request/lib/har.js\").Har);\nvar Auth = (__webpack_require__(/*! ./lib/auth */ \"(rsc)/./node_modules/request/lib/auth.js\").Auth);\nvar OAuth = (__webpack_require__(/*! ./lib/oauth */ \"(rsc)/./node_modules/request/lib/oauth.js\").OAuth);\nvar hawk = __webpack_require__(/*! ./lib/hawk */ \"(rsc)/./node_modules/request/lib/hawk.js\");\nvar Multipart = (__webpack_require__(/*! ./lib/multipart */ \"(rsc)/./node_modules/request/lib/multipart.js\").Multipart);\nvar Redirect = (__webpack_require__(/*! ./lib/redirect */ \"(rsc)/./node_modules/request/lib/redirect.js\").Redirect);\nvar Tunnel = (__webpack_require__(/*! ./lib/tunnel */ \"(rsc)/./node_modules/request/lib/tunnel.js\").Tunnel);\nvar now = __webpack_require__(/*! performance-now */ \"(rsc)/./node_modules/performance-now/lib/performance-now.js\");\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/safe-buffer/index.js\").Buffer);\nvar safeStringify = helpers.safeStringify;\nvar isReadStream = helpers.isReadStream;\nvar toBase64 = helpers.toBase64;\nvar defer = helpers.defer;\nvar copy = helpers.copy;\nvar version = helpers.version;\nvar globalCookieJar = cookies.jar();\nvar globalPool = {};\nfunction filterForNonReserved(reserved, options) {\n    // Filter out properties that are not reserved.\n    // Reserved values are passed in at call site.\n    var object = {};\n    for(var i in options){\n        var notReserved = reserved.indexOf(i) === -1;\n        if (notReserved) {\n            object[i] = options[i];\n        }\n    }\n    return object;\n}\nfunction filterOutReservedFunctions(reserved, options) {\n    // Filter out properties that are functions and are reserved.\n    // Reserved values are passed in at call site.\n    var object = {};\n    for(var i in options){\n        var isReserved = !(reserved.indexOf(i) === -1);\n        var isFunction = typeof options[i] === \"function\";\n        if (!(isReserved && isFunction)) {\n            object[i] = options[i];\n        }\n    }\n    return object;\n}\n// Return a simpler request object to allow serialization\nfunction requestToJSON() {\n    var self = this;\n    return {\n        uri: self.uri,\n        method: self.method,\n        headers: self.headers\n    };\n}\n// Return a simpler response object to allow serialization\nfunction responseToJSON() {\n    var self = this;\n    return {\n        statusCode: self.statusCode,\n        body: self.body,\n        headers: self.headers,\n        request: requestToJSON.call(self.request)\n    };\n}\nfunction Request(options) {\n    // if given the method property in options, set property explicitMethod to true\n    // extend the Request instance with any non-reserved properties\n    // remove any reserved functions from the options object\n    // set Request instance to be readable and writable\n    // call init\n    var self = this;\n    // start with HAR, then override with additional options\n    if (options.har) {\n        self._har = new Har(self);\n        options = self._har.options(options);\n    }\n    stream.Stream.call(self);\n    var reserved = Object.keys(Request.prototype);\n    var nonReserved = filterForNonReserved(reserved, options);\n    extend(self, nonReserved);\n    options = filterOutReservedFunctions(reserved, options);\n    self.readable = true;\n    self.writable = true;\n    if (options.method) {\n        self.explicitMethod = true;\n    }\n    self._qs = new Querystring(self);\n    self._auth = new Auth(self);\n    self._oauth = new OAuth(self);\n    self._multipart = new Multipart(self);\n    self._redirect = new Redirect(self);\n    self._tunnel = new Tunnel(self);\n    self.init(options);\n}\nutil.inherits(Request, stream.Stream);\n// Debugging\nRequest.debug = process.env.NODE_DEBUG && /\\brequest\\b/.test(process.env.NODE_DEBUG);\nfunction debug() {\n    if (Request.debug) {\n        console.error(\"REQUEST %s\", util.format.apply(util, arguments));\n    }\n}\nRequest.prototype.debug = debug;\nRequest.prototype.init = function(options) {\n    // init() contains all the code to setup the request object.\n    // the actual outgoing request is not started until start() is called\n    // this function is called from both the constructor and on redirect.\n    var self = this;\n    if (!options) {\n        options = {};\n    }\n    self.headers = self.headers ? copy(self.headers) : {};\n    // Delete headers with value undefined since they break\n    // ClientRequest.OutgoingMessage.setHeader in node 0.12\n    for(var headerName in self.headers){\n        if (typeof self.headers[headerName] === \"undefined\") {\n            delete self.headers[headerName];\n        }\n    }\n    caseless.httpify(self, self.headers);\n    if (!self.method) {\n        self.method = options.method || \"GET\";\n    }\n    if (!self.localAddress) {\n        self.localAddress = options.localAddress;\n    }\n    self._qs.init(options);\n    debug(options);\n    if (!self.pool && self.pool !== false) {\n        self.pool = globalPool;\n    }\n    self.dests = self.dests || [];\n    self.__isRequestRequest = true;\n    // Protect against double callback\n    if (!self._callback && self.callback) {\n        self._callback = self.callback;\n        self.callback = function() {\n            if (self._callbackCalled) {\n                return; // Print a warning maybe?\n            }\n            self._callbackCalled = true;\n            self._callback.apply(self, arguments);\n        };\n        self.on(\"error\", self.callback.bind());\n        self.on(\"complete\", self.callback.bind(self, null));\n    }\n    // People use this property instead all the time, so support it\n    if (!self.uri && self.url) {\n        self.uri = self.url;\n        delete self.url;\n    }\n    // If there's a baseUrl, then use it as the base URL (i.e. uri must be\n    // specified as a relative path and is appended to baseUrl).\n    if (self.baseUrl) {\n        if (typeof self.baseUrl !== \"string\") {\n            return self.emit(\"error\", new Error(\"options.baseUrl must be a string\"));\n        }\n        if (typeof self.uri !== \"string\") {\n            return self.emit(\"error\", new Error(\"options.uri must be a string when using options.baseUrl\"));\n        }\n        if (self.uri.indexOf(\"//\") === 0 || self.uri.indexOf(\"://\") !== -1) {\n            return self.emit(\"error\", new Error(\"options.uri must be a path when using options.baseUrl\"));\n        }\n        // Handle all cases to make sure that there's only one slash between\n        // baseUrl and uri.\n        var baseUrlEndsWithSlash = self.baseUrl.lastIndexOf(\"/\") === self.baseUrl.length - 1;\n        var uriStartsWithSlash = self.uri.indexOf(\"/\") === 0;\n        if (baseUrlEndsWithSlash && uriStartsWithSlash) {\n            self.uri = self.baseUrl + self.uri.slice(1);\n        } else if (baseUrlEndsWithSlash || uriStartsWithSlash) {\n            self.uri = self.baseUrl + self.uri;\n        } else if (self.uri === \"\") {\n            self.uri = self.baseUrl;\n        } else {\n            self.uri = self.baseUrl + \"/\" + self.uri;\n        }\n        delete self.baseUrl;\n    }\n    // A URI is needed by this point, emit error if we haven't been able to get one\n    if (!self.uri) {\n        return self.emit(\"error\", new Error(\"options.uri is a required argument\"));\n    }\n    // If a string URI/URL was given, parse it into a URL object\n    if (typeof self.uri === \"string\") {\n        self.uri = url.parse(self.uri);\n    }\n    // Some URL objects are not from a URL parsed string and need href added\n    if (!self.uri.href) {\n        self.uri.href = url.format(self.uri);\n    }\n    // DEPRECATED: Warning for users of the old Unix Sockets URL Scheme\n    if (self.uri.protocol === \"unix:\") {\n        return self.emit(\"error\", new Error(\"`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`\"));\n    }\n    // Support Unix Sockets\n    if (self.uri.host === \"unix\") {\n        self.enableUnixSocket();\n    }\n    if (self.strictSSL === false) {\n        self.rejectUnauthorized = false;\n    }\n    if (!self.uri.pathname) {\n        self.uri.pathname = \"/\";\n    }\n    if (!(self.uri.host || self.uri.hostname && self.uri.port) && !self.uri.isUnix) {\n        // Invalid URI: it may generate lot of bad errors, like 'TypeError: Cannot call method `indexOf` of undefined' in CookieJar\n        // Detect and reject it as soon as possible\n        var faultyUri = url.format(self.uri);\n        var message = 'Invalid URI \"' + faultyUri + '\"';\n        if (Object.keys(options).length === 0) {\n            // No option ? This can be the sign of a redirect\n            // As this is a case where the user cannot do anything (they didn't call request directly with this URL)\n            // they should be warned that it can be caused by a redirection (can save some hair)\n            message += \". This can be caused by a crappy redirection.\";\n        }\n        // This error was fatal\n        self.abort();\n        return self.emit(\"error\", new Error(message));\n    }\n    if (!self.hasOwnProperty(\"proxy\")) {\n        self.proxy = getProxyFromURI(self.uri);\n    }\n    self.tunnel = self._tunnel.isEnabled();\n    if (self.proxy) {\n        self._tunnel.setup(options);\n    }\n    self._redirect.onRequest(options);\n    self.setHost = false;\n    if (!self.hasHeader(\"host\")) {\n        var hostHeaderName = self.originalHostHeaderName || \"host\";\n        self.setHeader(hostHeaderName, self.uri.host);\n        // Drop :port suffix from Host header if known protocol.\n        if (self.uri.port) {\n            if (self.uri.port === \"80\" && self.uri.protocol === \"http:\" || self.uri.port === \"443\" && self.uri.protocol === \"https:\") {\n                self.setHeader(hostHeaderName, self.uri.hostname);\n            }\n        }\n        self.setHost = true;\n    }\n    self.jar(self._jar || options.jar);\n    if (!self.uri.port) {\n        if (self.uri.protocol === \"http:\") {\n            self.uri.port = 80;\n        } else if (self.uri.protocol === \"https:\") {\n            self.uri.port = 443;\n        }\n    }\n    if (self.proxy && !self.tunnel) {\n        self.port = self.proxy.port;\n        self.host = self.proxy.hostname;\n    } else {\n        self.port = self.uri.port;\n        self.host = self.uri.hostname;\n    }\n    if (options.form) {\n        self.form(options.form);\n    }\n    if (options.formData) {\n        var formData = options.formData;\n        var requestForm = self.form();\n        var appendFormValue = function(key, value) {\n            if (value && value.hasOwnProperty(\"value\") && value.hasOwnProperty(\"options\")) {\n                requestForm.append(key, value.value, value.options);\n            } else {\n                requestForm.append(key, value);\n            }\n        };\n        for(var formKey in formData){\n            if (formData.hasOwnProperty(formKey)) {\n                var formValue = formData[formKey];\n                if (formValue instanceof Array) {\n                    for(var j = 0; j < formValue.length; j++){\n                        appendFormValue(formKey, formValue[j]);\n                    }\n                } else {\n                    appendFormValue(formKey, formValue);\n                }\n            }\n        }\n    }\n    if (options.qs) {\n        self.qs(options.qs);\n    }\n    if (self.uri.path) {\n        self.path = self.uri.path;\n    } else {\n        self.path = self.uri.pathname + (self.uri.search || \"\");\n    }\n    if (self.path.length === 0) {\n        self.path = \"/\";\n    }\n    // Auth must happen last in case signing is dependent on other headers\n    if (options.aws) {\n        self.aws(options.aws);\n    }\n    if (options.hawk) {\n        self.hawk(options.hawk);\n    }\n    if (options.httpSignature) {\n        self.httpSignature(options.httpSignature);\n    }\n    if (options.auth) {\n        if (Object.prototype.hasOwnProperty.call(options.auth, \"username\")) {\n            options.auth.user = options.auth.username;\n        }\n        if (Object.prototype.hasOwnProperty.call(options.auth, \"password\")) {\n            options.auth.pass = options.auth.password;\n        }\n        self.auth(options.auth.user, options.auth.pass, options.auth.sendImmediately, options.auth.bearer);\n    }\n    if (self.gzip && !self.hasHeader(\"accept-encoding\")) {\n        self.setHeader(\"accept-encoding\", \"gzip, deflate\");\n    }\n    if (self.uri.auth && !self.hasHeader(\"authorization\")) {\n        var uriAuthPieces = self.uri.auth.split(\":\").map(function(item) {\n            return self._qs.unescape(item);\n        });\n        self.auth(uriAuthPieces[0], uriAuthPieces.slice(1).join(\":\"), true);\n    }\n    if (!self.tunnel && self.proxy && self.proxy.auth && !self.hasHeader(\"proxy-authorization\")) {\n        var proxyAuthPieces = self.proxy.auth.split(\":\").map(function(item) {\n            return self._qs.unescape(item);\n        });\n        var authHeader = \"Basic \" + toBase64(proxyAuthPieces.join(\":\"));\n        self.setHeader(\"proxy-authorization\", authHeader);\n    }\n    if (self.proxy && !self.tunnel) {\n        self.path = self.uri.protocol + \"//\" + self.uri.host + self.path;\n    }\n    if (options.json) {\n        self.json(options.json);\n    }\n    if (options.multipart) {\n        self.multipart(options.multipart);\n    }\n    if (options.time) {\n        self.timing = true;\n        // NOTE: elapsedTime is deprecated in favor of .timings\n        self.elapsedTime = self.elapsedTime || 0;\n    }\n    function setContentLength() {\n        if (isTypedArray(self.body)) {\n            self.body = Buffer.from(self.body);\n        }\n        if (!self.hasHeader(\"content-length\")) {\n            var length;\n            if (typeof self.body === \"string\") {\n                length = Buffer.byteLength(self.body);\n            } else if (Array.isArray(self.body)) {\n                length = self.body.reduce(function(a, b) {\n                    return a + b.length;\n                }, 0);\n            } else {\n                length = self.body.length;\n            }\n            if (length) {\n                self.setHeader(\"content-length\", length);\n            } else {\n                self.emit(\"error\", new Error(\"Argument error, options.body.\"));\n            }\n        }\n    }\n    if (self.body && !isstream(self.body)) {\n        setContentLength();\n    }\n    if (options.oauth) {\n        self.oauth(options.oauth);\n    } else if (self._oauth.params && self.hasHeader(\"authorization\")) {\n        self.oauth(self._oauth.params);\n    }\n    var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol;\n    var defaultModules = {\n        \"http:\": http,\n        \"https:\": https\n    };\n    var httpModules = self.httpModules || {};\n    self.httpModule = httpModules[protocol] || defaultModules[protocol];\n    if (!self.httpModule) {\n        return self.emit(\"error\", new Error(\"Invalid protocol: \" + protocol));\n    }\n    if (options.ca) {\n        self.ca = options.ca;\n    }\n    if (!self.agent) {\n        if (options.agentOptions) {\n            self.agentOptions = options.agentOptions;\n        }\n        if (options.agentClass) {\n            self.agentClass = options.agentClass;\n        } else if (options.forever) {\n            var v = version();\n            // use ForeverAgent in node 0.10- only\n            if (v.major === 0 && v.minor <= 10) {\n                self.agentClass = protocol === \"http:\" ? ForeverAgent : ForeverAgent.SSL;\n            } else {\n                self.agentClass = self.httpModule.Agent;\n                self.agentOptions = self.agentOptions || {};\n                self.agentOptions.keepAlive = true;\n            }\n        } else {\n            self.agentClass = self.httpModule.Agent;\n        }\n    }\n    if (self.pool === false) {\n        self.agent = false;\n    } else {\n        self.agent = self.agent || self.getNewAgent();\n    }\n    self.on(\"pipe\", function(src) {\n        if (self.ntick && self._started) {\n            self.emit(\"error\", new Error(\"You cannot pipe to this stream after the outbound request has started.\"));\n        }\n        self.src = src;\n        if (isReadStream(src)) {\n            if (!self.hasHeader(\"content-type\")) {\n                self.setHeader(\"content-type\", mime.lookup(src.path));\n            }\n        } else {\n            if (src.headers) {\n                for(var i in src.headers){\n                    if (!self.hasHeader(i)) {\n                        self.setHeader(i, src.headers[i]);\n                    }\n                }\n            }\n            if (self._json && !self.hasHeader(\"content-type\")) {\n                self.setHeader(\"content-type\", \"application/json\");\n            }\n            if (src.method && !self.explicitMethod) {\n                self.method = src.method;\n            }\n        }\n    // self.on('pipe', function () {\n    //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')\n    // })\n    });\n    defer(function() {\n        if (self._aborted) {\n            return;\n        }\n        var end = function() {\n            if (self._form) {\n                if (!self._auth.hasAuth) {\n                    self._form.pipe(self);\n                } else if (self._auth.hasAuth && self._auth.sentAuth) {\n                    self._form.pipe(self);\n                }\n            }\n            if (self._multipart && self._multipart.chunked) {\n                self._multipart.body.pipe(self);\n            }\n            if (self.body) {\n                if (isstream(self.body)) {\n                    self.body.pipe(self);\n                } else {\n                    setContentLength();\n                    if (Array.isArray(self.body)) {\n                        self.body.forEach(function(part) {\n                            self.write(part);\n                        });\n                    } else {\n                        self.write(self.body);\n                    }\n                    self.end();\n                }\n            } else if (self.requestBodyStream) {\n                console.warn(\"options.requestBodyStream is deprecated, please pass the request object to stream.pipe.\");\n                self.requestBodyStream.pipe(self);\n            } else if (!self.src) {\n                if (self._auth.hasAuth && !self._auth.sentAuth) {\n                    self.end();\n                    return;\n                }\n                if (self.method !== \"GET\" && typeof self.method !== \"undefined\") {\n                    self.setHeader(\"content-length\", 0);\n                }\n                self.end();\n            }\n        };\n        if (self._form && !self.hasHeader(\"content-length\")) {\n            // Before ending the request, we had to compute the length of the whole form, asyncly\n            self.setHeader(self._form.getHeaders(), true);\n            self._form.getLength(function(err, length) {\n                if (!err && !isNaN(length)) {\n                    self.setHeader(\"content-length\", length);\n                }\n                end();\n            });\n        } else {\n            end();\n        }\n        self.ntick = true;\n    });\n};\nRequest.prototype.getNewAgent = function() {\n    var self = this;\n    var Agent = self.agentClass;\n    var options = {};\n    if (self.agentOptions) {\n        for(var i in self.agentOptions){\n            options[i] = self.agentOptions[i];\n        }\n    }\n    if (self.ca) {\n        options.ca = self.ca;\n    }\n    if (self.ciphers) {\n        options.ciphers = self.ciphers;\n    }\n    if (self.secureProtocol) {\n        options.secureProtocol = self.secureProtocol;\n    }\n    if (self.secureOptions) {\n        options.secureOptions = self.secureOptions;\n    }\n    if (typeof self.rejectUnauthorized !== \"undefined\") {\n        options.rejectUnauthorized = self.rejectUnauthorized;\n    }\n    if (self.cert && self.key) {\n        options.key = self.key;\n        options.cert = self.cert;\n    }\n    if (self.pfx) {\n        options.pfx = self.pfx;\n    }\n    if (self.passphrase) {\n        options.passphrase = self.passphrase;\n    }\n    var poolKey = \"\";\n    // different types of agents are in different pools\n    if (Agent !== self.httpModule.Agent) {\n        poolKey += Agent.name;\n    }\n    // ca option is only relevant if proxy or destination are https\n    var proxy = self.proxy;\n    if (typeof proxy === \"string\") {\n        proxy = url.parse(proxy);\n    }\n    var isHttps = proxy && proxy.protocol === \"https:\" || this.uri.protocol === \"https:\";\n    if (isHttps) {\n        if (options.ca) {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.ca;\n        }\n        if (typeof options.rejectUnauthorized !== \"undefined\") {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.rejectUnauthorized;\n        }\n        if (options.cert) {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.cert.toString(\"ascii\") + options.key.toString(\"ascii\");\n        }\n        if (options.pfx) {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.pfx.toString(\"ascii\");\n        }\n        if (options.ciphers) {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.ciphers;\n        }\n        if (options.secureProtocol) {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.secureProtocol;\n        }\n        if (options.secureOptions) {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.secureOptions;\n        }\n    }\n    if (self.pool === globalPool && !poolKey && Object.keys(options).length === 0 && self.httpModule.globalAgent) {\n        // not doing anything special.  Use the globalAgent\n        return self.httpModule.globalAgent;\n    }\n    // we're using a stored agent.  Make sure it's protocol-specific\n    poolKey = self.uri.protocol + poolKey;\n    // generate a new agent for this setting if none yet exists\n    if (!self.pool[poolKey]) {\n        self.pool[poolKey] = new Agent(options);\n        // properly set maxSockets on new agents\n        if (self.pool.maxSockets) {\n            self.pool[poolKey].maxSockets = self.pool.maxSockets;\n        }\n    }\n    return self.pool[poolKey];\n};\nRequest.prototype.start = function() {\n    // start() is called once we are ready to send the outgoing HTTP request.\n    // this is usually called on the first write(), end() or on nextTick()\n    var self = this;\n    if (self.timing) {\n        // All timings will be relative to this request's startTime.  In order to do this,\n        // we need to capture the wall-clock start time (via Date), immediately followed\n        // by the high-resolution timer (via now()).  While these two won't be set\n        // at the _exact_ same time, they should be close enough to be able to calculate\n        // high-resolution, monotonically non-decreasing timestamps relative to startTime.\n        var startTime = new Date().getTime();\n        var startTimeNow = now();\n    }\n    if (self._aborted) {\n        return;\n    }\n    self._started = true;\n    self.method = self.method || \"GET\";\n    self.href = self.uri.href;\n    if (self.src && self.src.stat && self.src.stat.size && !self.hasHeader(\"content-length\")) {\n        self.setHeader(\"content-length\", self.src.stat.size);\n    }\n    if (self._aws) {\n        self.aws(self._aws, true);\n    }\n    // We have a method named auth, which is completely different from the http.request\n    // auth option.  If we don't remove it, we're gonna have a bad time.\n    var reqOptions = copy(self);\n    delete reqOptions.auth;\n    debug(\"make request\", self.uri.href);\n    // node v6.8.0 now supports a `timeout` value in `http.request()`, but we\n    // should delete it for now since we handle timeouts manually for better\n    // consistency with node versions before v6.8.0\n    delete reqOptions.timeout;\n    try {\n        self.req = self.httpModule.request(reqOptions);\n    } catch (err) {\n        self.emit(\"error\", err);\n        return;\n    }\n    if (self.timing) {\n        self.startTime = startTime;\n        self.startTimeNow = startTimeNow;\n        // Timing values will all be relative to startTime (by comparing to startTimeNow\n        // so we have an accurate clock)\n        self.timings = {};\n    }\n    var timeout;\n    if (self.timeout && !self.timeoutTimer) {\n        if (self.timeout < 0) {\n            timeout = 0;\n        } else if (typeof self.timeout === \"number\" && isFinite(self.timeout)) {\n            timeout = self.timeout;\n        }\n    }\n    self.req.on(\"response\", self.onRequestResponse.bind(self));\n    self.req.on(\"error\", self.onRequestError.bind(self));\n    self.req.on(\"drain\", function() {\n        self.emit(\"drain\");\n    });\n    self.req.on(\"socket\", function(socket) {\n        // `._connecting` was the old property which was made public in node v6.1.0\n        var isConnecting = socket._connecting || socket.connecting;\n        if (self.timing) {\n            self.timings.socket = now() - self.startTimeNow;\n            if (isConnecting) {\n                var onLookupTiming = function() {\n                    self.timings.lookup = now() - self.startTimeNow;\n                };\n                var onConnectTiming = function() {\n                    self.timings.connect = now() - self.startTimeNow;\n                };\n                socket.once(\"lookup\", onLookupTiming);\n                socket.once(\"connect\", onConnectTiming);\n                // clean up timing event listeners if needed on error\n                self.req.once(\"error\", function() {\n                    socket.removeListener(\"lookup\", onLookupTiming);\n                    socket.removeListener(\"connect\", onConnectTiming);\n                });\n            }\n        }\n        var setReqTimeout = function() {\n            // This timeout sets the amount of time to wait *between* bytes sent\n            // from the server once connected.\n            //\n            // In particular, it's useful for erroring if the server fails to send\n            // data halfway through streaming a response.\n            self.req.setTimeout(timeout, function() {\n                if (self.req) {\n                    self.abort();\n                    var e = new Error(\"ESOCKETTIMEDOUT\");\n                    e.code = \"ESOCKETTIMEDOUT\";\n                    e.connect = false;\n                    self.emit(\"error\", e);\n                }\n            });\n        };\n        if (timeout !== undefined) {\n            // Only start the connection timer if we're actually connecting a new\n            // socket, otherwise if we're already connected (because this is a\n            // keep-alive connection) do not bother. This is important since we won't\n            // get a 'connect' event for an already connected socket.\n            if (isConnecting) {\n                var onReqSockConnect = function() {\n                    socket.removeListener(\"connect\", onReqSockConnect);\n                    self.clearTimeout();\n                    setReqTimeout();\n                };\n                socket.on(\"connect\", onReqSockConnect);\n                self.req.on(\"error\", function(err) {\n                    socket.removeListener(\"connect\", onReqSockConnect);\n                });\n                // Set a timeout in memory - this block will throw if the server takes more\n                // than `timeout` to write the HTTP status and headers (corresponding to\n                // the on('response') event on the client). NB: this measures wall-clock\n                // time, not the time between bytes sent by the server.\n                self.timeoutTimer = setTimeout(function() {\n                    socket.removeListener(\"connect\", onReqSockConnect);\n                    self.abort();\n                    var e = new Error(\"ETIMEDOUT\");\n                    e.code = \"ETIMEDOUT\";\n                    e.connect = true;\n                    self.emit(\"error\", e);\n                }, timeout);\n            } else {\n                // We're already connected\n                setReqTimeout();\n            }\n        }\n        self.emit(\"socket\", socket);\n    });\n    self.emit(\"request\", self.req);\n};\nRequest.prototype.onRequestError = function(error) {\n    var self = this;\n    if (self._aborted) {\n        return;\n    }\n    if (self.req && self.req._reusedSocket && error.code === \"ECONNRESET\" && self.agent.addRequestNoreuse) {\n        self.agent = {\n            addRequest: self.agent.addRequestNoreuse.bind(self.agent)\n        };\n        self.start();\n        self.req.end();\n        return;\n    }\n    self.clearTimeout();\n    self.emit(\"error\", error);\n};\nRequest.prototype.onRequestResponse = function(response) {\n    var self = this;\n    if (self.timing) {\n        self.timings.response = now() - self.startTimeNow;\n    }\n    debug(\"onRequestResponse\", self.uri.href, response.statusCode, response.headers);\n    response.on(\"end\", function() {\n        if (self.timing) {\n            self.timings.end = now() - self.startTimeNow;\n            response.timingStart = self.startTime;\n            // fill in the blanks for any periods that didn't trigger, such as\n            // no lookup or connect due to keep alive\n            if (!self.timings.socket) {\n                self.timings.socket = 0;\n            }\n            if (!self.timings.lookup) {\n                self.timings.lookup = self.timings.socket;\n            }\n            if (!self.timings.connect) {\n                self.timings.connect = self.timings.lookup;\n            }\n            if (!self.timings.response) {\n                self.timings.response = self.timings.connect;\n            }\n            debug(\"elapsed time\", self.timings.end);\n            // elapsedTime includes all redirects\n            self.elapsedTime += Math.round(self.timings.end);\n            // NOTE: elapsedTime is deprecated in favor of .timings\n            response.elapsedTime = self.elapsedTime;\n            // timings is just for the final fetch\n            response.timings = self.timings;\n            // pre-calculate phase timings as well\n            response.timingPhases = {\n                wait: self.timings.socket,\n                dns: self.timings.lookup - self.timings.socket,\n                tcp: self.timings.connect - self.timings.lookup,\n                firstByte: self.timings.response - self.timings.connect,\n                download: self.timings.end - self.timings.response,\n                total: self.timings.end\n            };\n        }\n        debug(\"response end\", self.uri.href, response.statusCode, response.headers);\n    });\n    if (self._aborted) {\n        debug(\"aborted\", self.uri.href);\n        response.resume();\n        return;\n    }\n    self.response = response;\n    response.request = self;\n    response.toJSON = responseToJSON;\n    // XXX This is different on 0.10, because SSL is strict by default\n    if (self.httpModule === https && self.strictSSL && (!response.hasOwnProperty(\"socket\") || !response.socket.authorized)) {\n        debug(\"strict ssl error\", self.uri.href);\n        var sslErr = response.hasOwnProperty(\"socket\") ? response.socket.authorizationError : self.uri.href + \" does not support SSL\";\n        self.emit(\"error\", new Error(\"SSL Error: \" + sslErr));\n        return;\n    }\n    // Save the original host before any redirect (if it changes, we need to\n    // remove any authorization headers).  Also remember the case of the header\n    // name because lots of broken servers expect Host instead of host and we\n    // want the caller to be able to specify this.\n    self.originalHost = self.getHeader(\"host\");\n    if (!self.originalHostHeaderName) {\n        self.originalHostHeaderName = self.hasHeader(\"host\");\n    }\n    if (self.setHost) {\n        self.removeHeader(\"host\");\n    }\n    self.clearTimeout();\n    var targetCookieJar = self._jar && self._jar.setCookie ? self._jar : globalCookieJar;\n    var addCookie = function(cookie) {\n        // set the cookie if it's domain in the href's domain.\n        try {\n            targetCookieJar.setCookie(cookie, self.uri.href, {\n                ignoreError: true\n            });\n        } catch (e) {\n            self.emit(\"error\", e);\n        }\n    };\n    response.caseless = caseless(response.headers);\n    if (response.caseless.has(\"set-cookie\") && !self._disableCookies) {\n        var headerName = response.caseless.has(\"set-cookie\");\n        if (Array.isArray(response.headers[headerName])) {\n            response.headers[headerName].forEach(addCookie);\n        } else {\n            addCookie(response.headers[headerName]);\n        }\n    }\n    if (self._redirect.onResponse(response)) {\n        return; // Ignore the rest of the response\n    } else {\n        // Be a good stream and emit end when the response is finished.\n        // Hack to emit end on close because of a core bug that never fires end\n        response.on(\"close\", function() {\n            if (!self._ended) {\n                self.response.emit(\"end\");\n            }\n        });\n        response.once(\"end\", function() {\n            self._ended = true;\n        });\n        var noBody = function(code) {\n            return self.method === \"HEAD\" || // Informational\n            code >= 100 && code < 200 || // No Content\n            code === 204 || // Not Modified\n            code === 304;\n        };\n        var responseContent;\n        if (self.gzip && !noBody(response.statusCode)) {\n            var contentEncoding = response.headers[\"content-encoding\"] || \"identity\";\n            contentEncoding = contentEncoding.trim().toLowerCase();\n            // Be more lenient with decoding compressed responses, since (very rarely)\n            // servers send slightly invalid gzip responses that are still accepted\n            // by common browsers.\n            // Always using Z_SYNC_FLUSH is what cURL does.\n            var zlibOptions = {\n                flush: zlib.Z_SYNC_FLUSH,\n                finishFlush: zlib.Z_SYNC_FLUSH\n            };\n            if (contentEncoding === \"gzip\") {\n                responseContent = zlib.createGunzip(zlibOptions);\n                response.pipe(responseContent);\n            } else if (contentEncoding === \"deflate\") {\n                responseContent = zlib.createInflate(zlibOptions);\n                response.pipe(responseContent);\n            } else {\n                // Since previous versions didn't check for Content-Encoding header,\n                // ignore any invalid values to preserve backwards-compatibility\n                if (contentEncoding !== \"identity\") {\n                    debug(\"ignoring unrecognized Content-Encoding \" + contentEncoding);\n                }\n                responseContent = response;\n            }\n        } else {\n            responseContent = response;\n        }\n        if (self.encoding) {\n            if (self.dests.length !== 0) {\n                console.error(\"Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.\");\n            } else {\n                responseContent.setEncoding(self.encoding);\n            }\n        }\n        if (self._paused) {\n            responseContent.pause();\n        }\n        self.responseContent = responseContent;\n        self.emit(\"response\", response);\n        self.dests.forEach(function(dest) {\n            self.pipeDest(dest);\n        });\n        responseContent.on(\"data\", function(chunk) {\n            if (self.timing && !self.responseStarted) {\n                self.responseStartTime = new Date().getTime();\n                // NOTE: responseStartTime is deprecated in favor of .timings\n                response.responseStartTime = self.responseStartTime;\n            }\n            self._destdata = true;\n            self.emit(\"data\", chunk);\n        });\n        responseContent.once(\"end\", function(chunk) {\n            self.emit(\"end\", chunk);\n        });\n        responseContent.on(\"error\", function(error) {\n            self.emit(\"error\", error);\n        });\n        responseContent.on(\"close\", function() {\n            self.emit(\"close\");\n        });\n        if (self.callback) {\n            self.readResponseBody(response);\n        } else {\n            self.on(\"end\", function() {\n                if (self._aborted) {\n                    debug(\"aborted\", self.uri.href);\n                    return;\n                }\n                self.emit(\"complete\", response);\n            });\n        }\n    }\n    debug(\"finish init function\", self.uri.href);\n};\nRequest.prototype.readResponseBody = function(response) {\n    var self = this;\n    debug(\"reading response's body\");\n    var buffers = [];\n    var bufferLength = 0;\n    var strings = [];\n    self.on(\"data\", function(chunk) {\n        if (!Buffer.isBuffer(chunk)) {\n            strings.push(chunk);\n        } else if (chunk.length) {\n            bufferLength += chunk.length;\n            buffers.push(chunk);\n        }\n    });\n    self.on(\"end\", function() {\n        debug(\"end event\", self.uri.href);\n        if (self._aborted) {\n            debug(\"aborted\", self.uri.href);\n            // `buffer` is defined in the parent scope and used in a closure it exists for the life of the request.\n            // This can lead to leaky behavior if the user retains a reference to the request object.\n            buffers = [];\n            bufferLength = 0;\n            return;\n        }\n        if (bufferLength) {\n            debug(\"has body\", self.uri.href, bufferLength);\n            response.body = Buffer.concat(buffers, bufferLength);\n            if (self.encoding !== null) {\n                response.body = response.body.toString(self.encoding);\n            }\n            // `buffer` is defined in the parent scope and used in a closure it exists for the life of the Request.\n            // This can lead to leaky behavior if the user retains a reference to the request object.\n            buffers = [];\n            bufferLength = 0;\n        } else if (strings.length) {\n            // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.\n            // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().\n            if (self.encoding === \"utf8\" && strings[0].length > 0 && strings[0][0] === \"\\uFEFF\") {\n                strings[0] = strings[0].substring(1);\n            }\n            response.body = strings.join(\"\");\n        }\n        if (self._json) {\n            try {\n                response.body = JSON.parse(response.body, self._jsonReviver);\n            } catch (e) {\n                debug(\"invalid JSON received\", self.uri.href);\n            }\n        }\n        debug(\"emitting complete\", self.uri.href);\n        if (typeof response.body === \"undefined\" && !self._json) {\n            response.body = self.encoding === null ? Buffer.alloc(0) : \"\";\n        }\n        self.emit(\"complete\", response, response.body);\n    });\n};\nRequest.prototype.abort = function() {\n    var self = this;\n    self._aborted = true;\n    if (self.req) {\n        self.req.abort();\n    } else if (self.response) {\n        self.response.destroy();\n    }\n    self.clearTimeout();\n    self.emit(\"abort\");\n};\nRequest.prototype.pipeDest = function(dest) {\n    var self = this;\n    var response = self.response;\n    // Called after the response is received\n    if (dest.headers && !dest.headersSent) {\n        if (response.caseless.has(\"content-type\")) {\n            var ctname = response.caseless.has(\"content-type\");\n            if (dest.setHeader) {\n                dest.setHeader(ctname, response.headers[ctname]);\n            } else {\n                dest.headers[ctname] = response.headers[ctname];\n            }\n        }\n        if (response.caseless.has(\"content-length\")) {\n            var clname = response.caseless.has(\"content-length\");\n            if (dest.setHeader) {\n                dest.setHeader(clname, response.headers[clname]);\n            } else {\n                dest.headers[clname] = response.headers[clname];\n            }\n        }\n    }\n    if (dest.setHeader && !dest.headersSent) {\n        for(var i in response.headers){\n            // If the response content is being decoded, the Content-Encoding header\n            // of the response doesn't represent the piped content, so don't pass it.\n            if (!self.gzip || i !== \"content-encoding\") {\n                dest.setHeader(i, response.headers[i]);\n            }\n        }\n        dest.statusCode = response.statusCode;\n    }\n    if (self.pipefilter) {\n        self.pipefilter(response, dest);\n    }\n};\nRequest.prototype.qs = function(q, clobber) {\n    var self = this;\n    var base;\n    if (!clobber && self.uri.query) {\n        base = self._qs.parse(self.uri.query);\n    } else {\n        base = {};\n    }\n    for(var i in q){\n        base[i] = q[i];\n    }\n    var qs = self._qs.stringify(base);\n    if (qs === \"\") {\n        return self;\n    }\n    self.uri = url.parse(self.uri.href.split(\"?\")[0] + \"?\" + qs);\n    self.url = self.uri;\n    self.path = self.uri.path;\n    if (self.uri.host === \"unix\") {\n        self.enableUnixSocket();\n    }\n    return self;\n};\nRequest.prototype.form = function(form) {\n    var self = this;\n    if (form) {\n        if (!/^application\\/x-www-form-urlencoded\\b/.test(self.getHeader(\"content-type\"))) {\n            self.setHeader(\"content-type\", \"application/x-www-form-urlencoded\");\n        }\n        self.body = typeof form === \"string\" ? self._qs.rfc3986(form.toString(\"utf8\")) : self._qs.stringify(form).toString(\"utf8\");\n        return self;\n    }\n    // create form-data object\n    self._form = new FormData();\n    self._form.on(\"error\", function(err) {\n        err.message = \"form-data: \" + err.message;\n        self.emit(\"error\", err);\n        self.abort();\n    });\n    return self._form;\n};\nRequest.prototype.multipart = function(multipart) {\n    var self = this;\n    self._multipart.onRequest(multipart);\n    if (!self._multipart.chunked) {\n        self.body = self._multipart.body;\n    }\n    return self;\n};\nRequest.prototype.json = function(val) {\n    var self = this;\n    if (!self.hasHeader(\"accept\")) {\n        self.setHeader(\"accept\", \"application/json\");\n    }\n    if (typeof self.jsonReplacer === \"function\") {\n        self._jsonReplacer = self.jsonReplacer;\n    }\n    self._json = true;\n    if (typeof val === \"boolean\") {\n        if (self.body !== undefined) {\n            if (!/^application\\/x-www-form-urlencoded\\b/.test(self.getHeader(\"content-type\"))) {\n                self.body = safeStringify(self.body, self._jsonReplacer);\n            } else {\n                self.body = self._qs.rfc3986(self.body);\n            }\n            if (!self.hasHeader(\"content-type\")) {\n                self.setHeader(\"content-type\", \"application/json\");\n            }\n        }\n    } else {\n        self.body = safeStringify(val, self._jsonReplacer);\n        if (!self.hasHeader(\"content-type\")) {\n            self.setHeader(\"content-type\", \"application/json\");\n        }\n    }\n    if (typeof self.jsonReviver === \"function\") {\n        self._jsonReviver = self.jsonReviver;\n    }\n    return self;\n};\nRequest.prototype.getHeader = function(name, headers) {\n    var self = this;\n    var result, re, match;\n    if (!headers) {\n        headers = self.headers;\n    }\n    Object.keys(headers).forEach(function(key) {\n        if (key.length !== name.length) {\n            return;\n        }\n        re = new RegExp(name, \"i\");\n        match = key.match(re);\n        if (match) {\n            result = headers[key];\n        }\n    });\n    return result;\n};\nRequest.prototype.enableUnixSocket = function() {\n    // Get the socket & request paths from the URL\n    var unixParts = this.uri.path.split(\":\");\n    var host = unixParts[0];\n    var path = unixParts[1];\n    // Apply unix properties to request\n    this.socketPath = host;\n    this.uri.pathname = path;\n    this.uri.path = path;\n    this.uri.host = host;\n    this.uri.hostname = host;\n    this.uri.isUnix = true;\n};\nRequest.prototype.auth = function(user, pass, sendImmediately, bearer) {\n    var self = this;\n    self._auth.onRequest(user, pass, sendImmediately, bearer);\n    return self;\n};\nRequest.prototype.aws = function(opts, now) {\n    var self = this;\n    if (!now) {\n        self._aws = opts;\n        return self;\n    }\n    if (opts.sign_version === 4 || opts.sign_version === \"4\") {\n        // use aws4\n        var options = {\n            host: self.uri.host,\n            path: self.uri.path,\n            method: self.method,\n            headers: self.headers,\n            body: self.body\n        };\n        if (opts.service) {\n            options.service = opts.service;\n        }\n        var signRes = aws4.sign(options, {\n            accessKeyId: opts.key,\n            secretAccessKey: opts.secret,\n            sessionToken: opts.session\n        });\n        self.setHeader(\"authorization\", signRes.headers.Authorization);\n        self.setHeader(\"x-amz-date\", signRes.headers[\"X-Amz-Date\"]);\n        if (signRes.headers[\"X-Amz-Security-Token\"]) {\n            self.setHeader(\"x-amz-security-token\", signRes.headers[\"X-Amz-Security-Token\"]);\n        }\n    } else {\n        // default: use aws-sign2\n        var date = new Date();\n        self.setHeader(\"date\", date.toUTCString());\n        var auth = {\n            key: opts.key,\n            secret: opts.secret,\n            verb: self.method.toUpperCase(),\n            date: date,\n            contentType: self.getHeader(\"content-type\") || \"\",\n            md5: self.getHeader(\"content-md5\") || \"\",\n            amazonHeaders: aws2.canonicalizeHeaders(self.headers)\n        };\n        var path = self.uri.path;\n        if (opts.bucket && path) {\n            auth.resource = \"/\" + opts.bucket + path;\n        } else if (opts.bucket && !path) {\n            auth.resource = \"/\" + opts.bucket;\n        } else if (!opts.bucket && path) {\n            auth.resource = path;\n        } else if (!opts.bucket && !path) {\n            auth.resource = \"/\";\n        }\n        auth.resource = aws2.canonicalizeResource(auth.resource);\n        self.setHeader(\"authorization\", aws2.authorization(auth));\n    }\n    return self;\n};\nRequest.prototype.httpSignature = function(opts) {\n    var self = this;\n    httpSignature.signRequest({\n        getHeader: function(header) {\n            return self.getHeader(header, self.headers);\n        },\n        setHeader: function(header, value) {\n            self.setHeader(header, value);\n        },\n        method: self.method,\n        path: self.path\n    }, opts);\n    debug(\"httpSignature authorization\", self.getHeader(\"authorization\"));\n    return self;\n};\nRequest.prototype.hawk = function(opts) {\n    var self = this;\n    self.setHeader(\"Authorization\", hawk.header(self.uri, self.method, opts));\n};\nRequest.prototype.oauth = function(_oauth) {\n    var self = this;\n    self._oauth.onRequest(_oauth);\n    return self;\n};\nRequest.prototype.jar = function(jar) {\n    var self = this;\n    var cookies;\n    if (self._redirect.redirectsFollowed === 0) {\n        self.originalCookieHeader = self.getHeader(\"cookie\");\n    }\n    if (!jar) {\n        // disable cookies\n        cookies = false;\n        self._disableCookies = true;\n    } else {\n        var targetCookieJar = jar.getCookieString ? jar : globalCookieJar;\n        var urihref = self.uri.href;\n        // fetch cookie in the Specified host\n        if (targetCookieJar) {\n            cookies = targetCookieJar.getCookieString(urihref);\n        }\n    }\n    // if need cookie and cookie is not empty\n    if (cookies && cookies.length) {\n        if (self.originalCookieHeader) {\n            // Don't overwrite existing Cookie header\n            self.setHeader(\"cookie\", self.originalCookieHeader + \"; \" + cookies);\n        } else {\n            self.setHeader(\"cookie\", cookies);\n        }\n    }\n    self._jar = jar;\n    return self;\n};\n// Stream API\nRequest.prototype.pipe = function(dest, opts) {\n    var self = this;\n    if (self.response) {\n        if (self._destdata) {\n            self.emit(\"error\", new Error(\"You cannot pipe after data has been emitted from the response.\"));\n        } else if (self._ended) {\n            self.emit(\"error\", new Error(\"You cannot pipe after the response has been ended.\"));\n        } else {\n            stream.Stream.prototype.pipe.call(self, dest, opts);\n            self.pipeDest(dest);\n            return dest;\n        }\n    } else {\n        self.dests.push(dest);\n        stream.Stream.prototype.pipe.call(self, dest, opts);\n        return dest;\n    }\n};\nRequest.prototype.write = function() {\n    var self = this;\n    if (self._aborted) {\n        return;\n    }\n    if (!self._started) {\n        self.start();\n    }\n    if (self.req) {\n        return self.req.write.apply(self.req, arguments);\n    }\n};\nRequest.prototype.end = function(chunk) {\n    var self = this;\n    if (self._aborted) {\n        return;\n    }\n    if (chunk) {\n        self.write(chunk);\n    }\n    if (!self._started) {\n        self.start();\n    }\n    if (self.req) {\n        self.req.end();\n    }\n};\nRequest.prototype.pause = function() {\n    var self = this;\n    if (!self.responseContent) {\n        self._paused = true;\n    } else {\n        self.responseContent.pause.apply(self.responseContent, arguments);\n    }\n};\nRequest.prototype.resume = function() {\n    var self = this;\n    if (!self.responseContent) {\n        self._paused = false;\n    } else {\n        self.responseContent.resume.apply(self.responseContent, arguments);\n    }\n};\nRequest.prototype.destroy = function() {\n    var self = this;\n    this.clearTimeout();\n    if (!self._ended) {\n        self.end();\n    } else if (self.response) {\n        self.response.destroy();\n    }\n};\nRequest.prototype.clearTimeout = function() {\n    if (this.timeoutTimer) {\n        clearTimeout(this.timeoutTimer);\n        this.timeoutTimer = null;\n    }\n};\nRequest.defaultProxyHeaderWhiteList = Tunnel.defaultProxyHeaderWhiteList.slice();\nRequest.defaultProxyHeaderExclusiveList = Tunnel.defaultProxyHeaderExclusiveList.slice();\n// Exports\nRequest.prototype.toJSON = requestToJSON;\nmodule.exports = Request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/request/request.js\n");

/***/ })

};
;
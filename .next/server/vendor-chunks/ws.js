"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ws";
exports.ids = ["vendor-chunks/ws"];
exports.modules = {

/***/ "(rsc)/./node_modules/ws/index.js":
/*!**********************************!*\
  !*** ./node_modules/ws/index.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */ \nconst WebSocket = __webpack_require__(/*! ./lib/WebSocket */ \"(rsc)/./node_modules/ws/lib/WebSocket.js\");\nWebSocket.Server = __webpack_require__(/*! ./lib/WebSocketServer */ \"(rsc)/./node_modules/ws/lib/WebSocketServer.js\");\nWebSocket.Receiver = __webpack_require__(/*! ./lib/Receiver */ \"(rsc)/./node_modules/ws/lib/Receiver.js\");\nWebSocket.Sender = __webpack_require__(/*! ./lib/Sender */ \"(rsc)/./node_modules/ws/lib/Sender.js\");\nmodule.exports = WebSocket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd3MvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Q0FJQyxHQUVEO0FBRUEsTUFBTUEsWUFBWUMsbUJBQU9BLENBQUM7QUFFMUJELFVBQVVFLE1BQU0sR0FBR0QsbUJBQU9BLENBQUM7QUFDM0JELFVBQVVHLFFBQVEsR0FBR0YsbUJBQU9BLENBQUM7QUFDN0JELFVBQVVJLE1BQU0sR0FBR0gsbUJBQU9BLENBQUM7QUFFM0JJLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3dzL2luZGV4LmpzPzE1NGUiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiB3czogYSBub2RlLmpzIHdlYnNvY2tldCBjbGllbnRcbiAqIENvcHlyaWdodChjKSAyMDExIEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBXZWJTb2NrZXQgPSByZXF1aXJlKCcuL2xpYi9XZWJTb2NrZXQnKTtcblxuV2ViU29ja2V0LlNlcnZlciA9IHJlcXVpcmUoJy4vbGliL1dlYlNvY2tldFNlcnZlcicpO1xuV2ViU29ja2V0LlJlY2VpdmVyID0gcmVxdWlyZSgnLi9saWIvUmVjZWl2ZXInKTtcbldlYlNvY2tldC5TZW5kZXIgPSByZXF1aXJlKCcuL2xpYi9TZW5kZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJTb2NrZXQ7XG4iXSwibmFtZXMiOlsiV2ViU29ja2V0IiwicmVxdWlyZSIsIlNlcnZlciIsIlJlY2VpdmVyIiwiU2VuZGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ws/lib/BufferUtil.js":
/*!*******************************************!*\
  !*** ./node_modules/ws/lib/BufferUtil.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */ \nconst safeBuffer = __webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/ws/node_modules/safe-buffer/index.js\");\nconst Buffer = safeBuffer.Buffer;\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */ const concat = (list, totalLength)=>{\n    const target = Buffer.allocUnsafe(totalLength);\n    var offset = 0;\n    for(var i = 0; i < list.length; i++){\n        const buf = list[i];\n        buf.copy(target, offset);\n        offset += buf.length;\n    }\n    return target;\n};\ntry {\n    const bufferUtil = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'bufferutil'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    module.exports = Object.assign({\n        concat\n    }, bufferUtil.BufferUtil || bufferUtil);\n} catch (e) /* istanbul ignore next */ {\n    /**\n   * Masks a buffer using the given mask.\n   *\n   * @param {Buffer} source The buffer to mask\n   * @param {Buffer} mask The mask to use\n   * @param {Buffer} output The buffer where to store the result\n   * @param {Number} offset The offset at which to start writing\n   * @param {Number} length The number of bytes to mask.\n   * @public\n   */ const mask = (source, mask, output, offset, length)=>{\n        for(var i = 0; i < length; i++){\n            output[offset + i] = source[i] ^ mask[i & 3];\n        }\n    };\n    /**\n   * Unmasks a buffer using the given mask.\n   *\n   * @param {Buffer} buffer The buffer to unmask\n   * @param {Buffer} mask The mask to use\n   * @public\n   */ const unmask = (buffer, mask)=>{\n        // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n        const length = buffer.length;\n        for(var i = 0; i < length; i++){\n            buffer[i] ^= mask[i & 3];\n        }\n    };\n    module.exports = {\n        concat,\n        mask,\n        unmask\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd3MvbGliL0J1ZmZlclV0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Q0FJQyxHQUVEO0FBRUEsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFFM0IsTUFBTUMsU0FBU0YsV0FBV0UsTUFBTTtBQUVoQzs7Ozs7OztDQU9DLEdBQ0QsTUFBTUMsU0FBUyxDQUFDQyxNQUFNQztJQUNwQixNQUFNQyxTQUFTSixPQUFPSyxXQUFXLENBQUNGO0lBQ2xDLElBQUlHLFNBQVM7SUFFYixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsS0FBS00sTUFBTSxFQUFFRCxJQUFLO1FBQ3BDLE1BQU1FLE1BQU1QLElBQUksQ0FBQ0ssRUFBRTtRQUNuQkUsSUFBSUMsSUFBSSxDQUFDTixRQUFRRTtRQUNqQkEsVUFBVUcsSUFBSUQsTUFBTTtJQUN0QjtJQUVBLE9BQU9KO0FBQ1Q7QUFFQSxJQUFJO0lBQ0YsTUFBTU8sYUFBYVosbUJBQU9BLENBQUM7SUFFM0JhLE9BQU9DLE9BQU8sR0FBR0MsT0FBT0MsTUFBTSxDQUFDO1FBQUVkO0lBQU8sR0FBR1UsV0FBV0ssVUFBVSxJQUFJTDtBQUN0RSxFQUFFLE9BQU9NLEdBQUcsd0JBQXdCLEdBQUc7SUFDckM7Ozs7Ozs7OztHQVNDLEdBQ0QsTUFBTUMsT0FBTyxDQUFDQyxRQUFRRCxNQUFNRSxRQUFRZCxRQUFRRTtRQUMxQyxJQUFLLElBQUlELElBQUksR0FBR0EsSUFBSUMsUUFBUUQsSUFBSztZQUMvQmEsTUFBTSxDQUFDZCxTQUFTQyxFQUFFLEdBQUdZLE1BQU0sQ0FBQ1osRUFBRSxHQUFHVyxJQUFJLENBQUNYLElBQUksRUFBRTtRQUM5QztJQUNGO0lBRUE7Ozs7OztHQU1DLEdBQ0QsTUFBTWMsU0FBUyxDQUFDQyxRQUFRSjtRQUN0Qix5RUFBeUU7UUFDekUsTUFBTVYsU0FBU2MsT0FBT2QsTUFBTTtRQUM1QixJQUFLLElBQUlELElBQUksR0FBR0EsSUFBSUMsUUFBUUQsSUFBSztZQUMvQmUsTUFBTSxDQUFDZixFQUFFLElBQUlXLElBQUksQ0FBQ1gsSUFBSSxFQUFFO1FBQzFCO0lBQ0Y7SUFFQUssT0FBT0MsT0FBTyxHQUFHO1FBQUVaO1FBQVFpQjtRQUFNRztJQUFPO0FBQzFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkZGl0LWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy93cy9saWIvQnVmZmVyVXRpbC5qcz85MGRiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogd3M6IGEgbm9kZS5qcyB3ZWJzb2NrZXQgY2xpZW50XG4gKiBDb3B5cmlnaHQoYykgMjAxMSBFaW5hciBPdHRvIFN0YW5ndmlrIDxlaW5hcm9zQGdtYWlsLmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc2FmZUJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJyk7XG5cbmNvbnN0IEJ1ZmZlciA9IHNhZmVCdWZmZXIuQnVmZmVyO1xuXG4vKipcbiAqIE1lcmdlcyBhbiBhcnJheSBvZiBidWZmZXJzIGludG8gYSBuZXcgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyW119IGxpc3QgVGhlIGFycmF5IG9mIGJ1ZmZlcnMgdG8gY29uY2F0XG4gKiBAcGFyYW0ge051bWJlcn0gdG90YWxMZW5ndGggVGhlIHRvdGFsIGxlbmd0aCBvZiBidWZmZXJzIGluIHRoZSBsaXN0XG4gKiBAcmV0dXJuIHtCdWZmZXJ9IFRoZSByZXN1bHRpbmcgYnVmZmVyXG4gKiBAcHVibGljXG4gKi9cbmNvbnN0IGNvbmNhdCA9IChsaXN0LCB0b3RhbExlbmd0aCkgPT4ge1xuICBjb25zdCB0YXJnZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUodG90YWxMZW5ndGgpO1xuICB2YXIgb2Zmc2V0ID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBidWYgPSBsaXN0W2ldO1xuICAgIGJ1Zi5jb3B5KHRhcmdldCwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gYnVmLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG50cnkge1xuICBjb25zdCBidWZmZXJVdGlsID0gcmVxdWlyZSgnYnVmZmVydXRpbCcpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbih7IGNvbmNhdCB9LCBidWZmZXJVdGlsLkJ1ZmZlclV0aWwgfHwgYnVmZmVyVXRpbCk7XG59IGNhdGNoIChlKSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB7XG4gIC8qKlxuICAgKiBNYXNrcyBhIGJ1ZmZlciB1c2luZyB0aGUgZ2l2ZW4gbWFzay5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJ9IHNvdXJjZSBUaGUgYnVmZmVyIHRvIG1hc2tcbiAgICogQHBhcmFtIHtCdWZmZXJ9IG1hc2sgVGhlIG1hc2sgdG8gdXNlXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBvdXRwdXQgVGhlIGJ1ZmZlciB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCBhdCB3aGljaCB0byBzdGFydCB3cml0aW5nXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGggVGhlIG51bWJlciBvZiBieXRlcyB0byBtYXNrLlxuICAgKiBAcHVibGljXG4gICAqL1xuICBjb25zdCBtYXNrID0gKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCkgPT4ge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG91dHB1dFtvZmZzZXQgKyBpXSA9IHNvdXJjZVtpXSBeIG1hc2tbaSAmIDNdO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogVW5tYXNrcyBhIGJ1ZmZlciB1c2luZyB0aGUgZ2l2ZW4gbWFzay5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIHVubWFza1xuICAgKiBAcGFyYW0ge0J1ZmZlcn0gbWFzayBUaGUgbWFzayB0byB1c2VcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY29uc3QgdW5tYXNrID0gKGJ1ZmZlciwgbWFzaykgPT4ge1xuICAgIC8vIFJlcXVpcmVkIHVudGlsIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvOTAwNiBpcyByZXNvbHZlZC5cbiAgICBjb25zdCBsZW5ndGggPSBidWZmZXIubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ1ZmZlcltpXSBePSBtYXNrW2kgJiAzXTtcbiAgICB9XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB7IGNvbmNhdCwgbWFzaywgdW5tYXNrIH07XG59XG4iXSwibmFtZXMiOlsic2FmZUJ1ZmZlciIsInJlcXVpcmUiLCJCdWZmZXIiLCJjb25jYXQiLCJsaXN0IiwidG90YWxMZW5ndGgiLCJ0YXJnZXQiLCJhbGxvY1Vuc2FmZSIsIm9mZnNldCIsImkiLCJsZW5ndGgiLCJidWYiLCJjb3B5IiwiYnVmZmVyVXRpbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJPYmplY3QiLCJhc3NpZ24iLCJCdWZmZXJVdGlsIiwiZSIsIm1hc2siLCJzb3VyY2UiLCJvdXRwdXQiLCJ1bm1hc2siLCJidWZmZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/lib/BufferUtil.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ws/lib/Constants.js":
/*!******************************************!*\
  !*** ./node_modules/ws/lib/Constants.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst safeBuffer = __webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/ws/node_modules/safe-buffer/index.js\");\nconst Buffer = safeBuffer.Buffer;\nexports.BINARY_TYPES = [\n    \"nodebuffer\",\n    \"arraybuffer\",\n    \"fragments\"\n];\nexports.GUID = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\nexports.EMPTY_BUFFER = Buffer.alloc(0);\nexports.NOOP = ()=>{};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd3MvbGliL0NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLGFBQWFDLG1CQUFPQSxDQUFDO0FBRTNCLE1BQU1DLFNBQVNGLFdBQVdFLE1BQU07QUFFaENDLG9CQUFvQixHQUFHO0lBQUM7SUFBYztJQUFlO0NBQVk7QUFDakVBLFlBQVksR0FBRztBQUNmQSxvQkFBb0IsR0FBR0QsT0FBT0ssS0FBSyxDQUFDO0FBQ3BDSixZQUFZLEdBQUcsS0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZGRpdC1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvd3MvbGliL0NvbnN0YW50cy5qcz8xMmE3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc2FmZUJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJyk7XG5cbmNvbnN0IEJ1ZmZlciA9IHNhZmVCdWZmZXIuQnVmZmVyO1xuXG5leHBvcnRzLkJJTkFSWV9UWVBFUyA9IFsnbm9kZWJ1ZmZlcicsICdhcnJheWJ1ZmZlcicsICdmcmFnbWVudHMnXTtcbmV4cG9ydHMuR1VJRCA9ICcyNThFQUZBNS1FOTE0LTQ3REEtOTVDQS1DNUFCMERDODVCMTEnO1xuZXhwb3J0cy5FTVBUWV9CVUZGRVIgPSBCdWZmZXIuYWxsb2MoMCk7XG5leHBvcnRzLk5PT1AgPSAoKSA9PiB7fTtcbiJdLCJuYW1lcyI6WyJzYWZlQnVmZmVyIiwicmVxdWlyZSIsIkJ1ZmZlciIsImV4cG9ydHMiLCJCSU5BUllfVFlQRVMiLCJHVUlEIiwiRU1QVFlfQlVGRkVSIiwiYWxsb2MiLCJOT09QIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/lib/Constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ws/lib/ErrorCodes.js":
/*!*******************************************!*\
  !*** ./node_modules/ws/lib/ErrorCodes.js ***!
  \*******************************************/
/***/ ((module) => {

eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */ \nmodule.exports = {\n    isValidErrorCode: function(code) {\n        return code >= 1000 && code <= 1013 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3000 && code <= 4999;\n    },\n    1000: \"normal\",\n    1001: \"going away\",\n    1002: \"protocol error\",\n    1003: \"unsupported data\",\n    1004: \"reserved\",\n    1005: \"reserved for extensions\",\n    1006: \"reserved for extensions\",\n    1007: \"inconsistent or invalid data\",\n    1008: \"policy violation\",\n    1009: \"message too big\",\n    1010: \"extension handshake missing\",\n    1011: \"an unexpected condition prevented the request from being fulfilled\",\n    1012: \"service restart\",\n    1013: \"try again later\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd3MvbGliL0Vycm9yQ29kZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Q0FJQyxHQUVEO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxrQkFBa0IsU0FBVUMsSUFBSTtRQUM5QixPQUFPLFFBQVMsUUFBUUEsUUFBUSxRQUFRQSxTQUFTLFFBQVFBLFNBQVMsUUFBUUEsU0FBUyxRQUNoRkEsUUFBUSxRQUFRQSxRQUFRO0lBQzdCO0lBQ0EsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZGRpdC1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvd3MvbGliL0Vycm9yQ29kZXMuanM/MGQxMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIHdzOiBhIG5vZGUuanMgd2Vic29ja2V0IGNsaWVudFxuICogQ29weXJpZ2h0KGMpIDIwMTEgRWluYXIgT3R0byBTdGFuZ3ZpayA8ZWluYXJvc0BnbWFpbC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1ZhbGlkRXJyb3JDb2RlOiBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiAoY29kZSA+PSAxMDAwICYmIGNvZGUgPD0gMTAxMyAmJiBjb2RlICE9PSAxMDA0ICYmIGNvZGUgIT09IDEwMDUgJiYgY29kZSAhPT0gMTAwNikgfHxcbiAgICAgIChjb2RlID49IDMwMDAgJiYgY29kZSA8PSA0OTk5KTtcbiAgfSxcbiAgMTAwMDogJ25vcm1hbCcsXG4gIDEwMDE6ICdnb2luZyBhd2F5JyxcbiAgMTAwMjogJ3Byb3RvY29sIGVycm9yJyxcbiAgMTAwMzogJ3Vuc3VwcG9ydGVkIGRhdGEnLFxuICAxMDA0OiAncmVzZXJ2ZWQnLFxuICAxMDA1OiAncmVzZXJ2ZWQgZm9yIGV4dGVuc2lvbnMnLFxuICAxMDA2OiAncmVzZXJ2ZWQgZm9yIGV4dGVuc2lvbnMnLFxuICAxMDA3OiAnaW5jb25zaXN0ZW50IG9yIGludmFsaWQgZGF0YScsXG4gIDEwMDg6ICdwb2xpY3kgdmlvbGF0aW9uJyxcbiAgMTAwOTogJ21lc3NhZ2UgdG9vIGJpZycsXG4gIDEwMTA6ICdleHRlbnNpb24gaGFuZHNoYWtlIG1pc3NpbmcnLFxuICAxMDExOiAnYW4gdW5leHBlY3RlZCBjb25kaXRpb24gcHJldmVudGVkIHRoZSByZXF1ZXN0IGZyb20gYmVpbmcgZnVsZmlsbGVkJyxcbiAgMTAxMjogJ3NlcnZpY2UgcmVzdGFydCcsXG4gIDEwMTM6ICd0cnkgYWdhaW4gbGF0ZXInXG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpc1ZhbGlkRXJyb3JDb2RlIiwiY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/lib/ErrorCodes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ws/lib/EventTarget.js":
/*!********************************************!*\
  !*** ./node_modules/ws/lib/EventTarget.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n/**\n * Class representing an event.\n *\n * @private\n */ class Event {\n    /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */ constructor(type, target){\n        this.target = target;\n        this.type = type;\n    }\n}\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */ class MessageEvent extends Event {\n    /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */ constructor(data, target){\n        super(\"message\", target);\n        this.data = data;\n    }\n}\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */ class CloseEvent extends Event {\n    /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */ constructor(code, reason, target){\n        super(\"close\", target);\n        this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n        this.reason = reason;\n        this.code = code;\n    }\n}\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */ class OpenEvent extends Event {\n    /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */ constructor(target){\n        super(\"open\", target);\n    }\n}\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */ const EventTarget = {\n    /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */ addEventListener (method, listener) {\n        if (typeof listener !== \"function\") return;\n        function onMessage(data) {\n            listener.call(this, new MessageEvent(data, this));\n        }\n        function onClose(code, message) {\n            listener.call(this, new CloseEvent(code, message, this));\n        }\n        function onError(event) {\n            event.type = \"error\";\n            event.target = this;\n            listener.call(this, event);\n        }\n        function onOpen() {\n            listener.call(this, new OpenEvent(this));\n        }\n        if (method === \"message\") {\n            onMessage._listener = listener;\n            this.on(method, onMessage);\n        } else if (method === \"close\") {\n            onClose._listener = listener;\n            this.on(method, onClose);\n        } else if (method === \"error\") {\n            onError._listener = listener;\n            this.on(method, onError);\n        } else if (method === \"open\") {\n            onOpen._listener = listener;\n            this.on(method, onOpen);\n        } else {\n            this.on(method, listener);\n        }\n    },\n    /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */ removeEventListener (method, listener) {\n        const listeners = this.listeners(method);\n        for(var i = 0; i < listeners.length; i++){\n            if (listeners[i] === listener || listeners[i]._listener === listener) {\n                this.removeListener(method, listeners[i]);\n            }\n        }\n    }\n};\nmodule.exports = EventTarget;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/lib/EventTarget.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ws/lib/Extensions.js":
/*!*******************************************!*\
  !*** ./node_modules/ws/lib/Extensions.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\nconst tokenChars = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    1,\n    1,\n    0,\n    1,\n    1,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    1,\n    0,\n    1,\n    0 // 112 - 127\n];\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */ function push(dest, name, elem) {\n    if (Object.prototype.hasOwnProperty.call(dest, name)) dest[name].push(elem);\n    else dest[name] = [\n        elem\n    ];\n}\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */ function parse(header) {\n    const offers = {};\n    if (header === undefined || header === \"\") return offers;\n    var params = {};\n    var mustUnescape = false;\n    var isEscaping = false;\n    var inQuotes = false;\n    var extensionName;\n    var paramName;\n    var start = -1;\n    var end = -1;\n    for(var i = 0; i < header.length; i++){\n        const code = header.charCodeAt(i);\n        if (extensionName === undefined) {\n            if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (code === 0x20 /* ' ' */  || code === 0x09 /* '\\t' */ ) {\n                if (end === -1 && start !== -1) end = i;\n            } else if (code === 0x3b /* ';' */  || code === 0x2c /* ',' */ ) {\n                if (start === -1) throw new Error(`unexpected character at index ${i}`);\n                if (end === -1) end = i;\n                const name = header.slice(start, end);\n                if (code === 0x2c) {\n                    push(offers, name, params);\n                    params = {};\n                } else {\n                    extensionName = name;\n                }\n                start = end = -1;\n            } else {\n                throw new Error(`unexpected character at index ${i}`);\n            }\n        } else if (paramName === undefined) {\n            if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (code === 0x20 || code === 0x09) {\n                if (end === -1 && start !== -1) end = i;\n            } else if (code === 0x3b || code === 0x2c) {\n                if (start === -1) throw new Error(`unexpected character at index ${i}`);\n                if (end === -1) end = i;\n                push(params, header.slice(start, end), true);\n                if (code === 0x2c) {\n                    push(offers, extensionName, params);\n                    params = {};\n                    extensionName = undefined;\n                }\n                start = end = -1;\n            } else if (code === 0x3d /* '=' */  && start !== -1 && end === -1) {\n                paramName = header.slice(start, i);\n                start = end = -1;\n            } else {\n                throw new Error(`unexpected character at index ${i}`);\n            }\n        } else {\n            //\n            // The value of a quoted-string after unescaping must conform to the\n            // token ABNF, so only token characters are valid.\n            // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n            //\n            if (isEscaping) {\n                if (tokenChars[code] !== 1) {\n                    throw new Error(`unexpected character at index ${i}`);\n                }\n                if (start === -1) start = i;\n                else if (!mustUnescape) mustUnescape = true;\n                isEscaping = false;\n            } else if (inQuotes) {\n                if (tokenChars[code] === 1) {\n                    if (start === -1) start = i;\n                } else if (code === 0x22 /* '\"' */  && start !== -1) {\n                    inQuotes = false;\n                    end = i;\n                } else if (code === 0x5c /* '\\' */ ) {\n                    isEscaping = true;\n                } else {\n                    throw new Error(`unexpected character at index ${i}`);\n                }\n            } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n                inQuotes = true;\n            } else if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n                if (end === -1) end = i;\n            } else if (code === 0x3b || code === 0x2c) {\n                if (start === -1) throw new Error(`unexpected character at index ${i}`);\n                if (end === -1) end = i;\n                var value = header.slice(start, end);\n                if (mustUnescape) {\n                    value = value.replace(/\\\\/g, \"\");\n                    mustUnescape = false;\n                }\n                push(params, paramName, value);\n                if (code === 0x2c) {\n                    push(offers, extensionName, params);\n                    params = {};\n                    extensionName = undefined;\n                }\n                paramName = undefined;\n                start = end = -1;\n            } else {\n                throw new Error(`unexpected character at index ${i}`);\n            }\n        }\n    }\n    if (start === -1 || inQuotes) throw new Error(\"unexpected end of input\");\n    if (end === -1) end = i;\n    const token = header.slice(start, end);\n    if (extensionName === undefined) {\n        push(offers, token, {});\n    } else {\n        if (paramName === undefined) {\n            push(params, token, true);\n        } else if (mustUnescape) {\n            push(params, paramName, token.replace(/\\\\/g, \"\"));\n        } else {\n            push(params, paramName, token);\n        }\n        push(offers, extensionName, params);\n    }\n    return offers;\n}\n/**\n * Serializes a parsed `Sec-WebSocket-Extensions` header to a string.\n *\n * @param {Object} value The object to format\n * @return {String} A string representing the given value\n * @public\n */ function format(value) {\n    return Object.keys(value).map((token)=>{\n        var paramsList = value[token];\n        if (!Array.isArray(paramsList)) paramsList = [\n            paramsList\n        ];\n        return paramsList.map((params)=>{\n            return [\n                token\n            ].concat(Object.keys(params).map((k)=>{\n                var p = params[k];\n                if (!Array.isArray(p)) p = [\n                    p\n                ];\n                return p.map((v)=>v === true ? k : `${k}=${v}`).join(\"; \");\n            })).join(\"; \");\n        }).join(\", \");\n    }).join(\", \");\n}\nmodule.exports = {\n    format,\n    parse\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd3MvbGliL0V4dGVuc2lvbnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxFQUFFO0FBQ0YsNEJBQTRCO0FBQzVCLEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsOENBQThDO0FBQzlDLEVBQUU7QUFDRiw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCLDhCQUE4QjtBQUM5QixNQUFNO0FBQ04sRUFBRTtBQUNGLE1BQU1BLGFBQWE7SUFDakI7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFDN0M7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFDN0M7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFDN0M7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFDN0M7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFDN0M7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFDN0M7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFDN0M7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUcsRUFBRSxZQUFZO0NBQzVEO0FBRUQ7Ozs7Ozs7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QUNwQixPQUFPdEIsT0FBTzBCLElBQUksQ0FBQ0osT0FBT0ssR0FBRyxDQUFDLENBQUNIO1FBQzdCLElBQUlJLGFBQWFOLEtBQUssQ0FBQ0UsTUFBTTtRQUM3QixJQUFJLENBQUNLLE1BQU1DLE9BQU8sQ0FBQ0YsYUFBYUEsYUFBYTtZQUFDQTtTQUFXO1FBQ3pELE9BQU9BLFdBQVdELEdBQUcsQ0FBQyxDQUFDbkI7WUFDckIsT0FBTztnQkFBQ2dCO2FBQU0sQ0FBQ08sTUFBTSxDQUFDL0IsT0FBTzBCLElBQUksQ0FBQ2xCLFFBQVFtQixHQUFHLENBQUMsQ0FBQ0s7Z0JBQzdDLElBQUlDLElBQUl6QixNQUFNLENBQUN3QixFQUFFO2dCQUNqQixJQUFJLENBQUNILE1BQU1DLE9BQU8sQ0FBQ0csSUFBSUEsSUFBSTtvQkFBQ0E7aUJBQUU7Z0JBQzlCLE9BQU9BLEVBQUVOLEdBQUcsQ0FBQyxDQUFDTyxJQUFNQSxNQUFNLE9BQU9GLElBQUksQ0FBQyxFQUFFQSxFQUFFLENBQUMsRUFBRUUsRUFBRSxDQUFDLEVBQUVDLElBQUksQ0FBQztZQUN6RCxJQUFJQSxJQUFJLENBQUM7UUFDWCxHQUFHQSxJQUFJLENBQUM7SUFDVixHQUFHQSxJQUFJLENBQUM7QUFDVjtBQUVBQyxPQUFPQyxPQUFPLEdBQUc7SUFBRVo7SUFBUXJCO0FBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3dzL2xpYi9FeHRlbnNpb25zLmpzP2UxOWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vL1xuLy8gQWxsb3dlZCB0b2tlbiBjaGFyYWN0ZXJzOlxuLy9cbi8vICchJywgJyMnLCAnJCcsICclJywgJyYnLCAnJycsICcqJywgJysnLCAnLScsXG4vLyAnLicsIDAtOSwgQS1aLCAnXicsICdfJywgJ2AnLCBhLXosICd8JywgJ34nXG4vL1xuLy8gdG9rZW5DaGFyc1szMl0gPT09IDAgLy8gJyAnXG4vLyB0b2tlbkNoYXJzWzMzXSA9PT0gMSAvLyAnISdcbi8vIHRva2VuQ2hhcnNbMzRdID09PSAwIC8vICdcIidcbi8vIC4uLlxuLy9cbmNvbnN0IHRva2VuQ2hhcnMgPSBbXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIC8vIDAgLSAxNVxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAvLyAxNiAtIDMxXG4gIDAsIDEsIDAsIDEsIDEsIDEsIDEsIDEsIDAsIDAsIDEsIDEsIDAsIDEsIDEsIDAsIC8vIDMyIC0gNDdcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMCwgMCwgMCwgMCwgMCwgMCwgLy8gNDggLSA2M1xuICAwLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAvLyA2NCAtIDc5XG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDAsIDAsIDEsIDEsIC8vIDgwIC0gOTVcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLy8gOTYgLSAxMTFcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMCwgMSwgMCwgMSwgMCAvLyAxMTIgLSAxMjdcbl07XG5cbi8qKlxuICogQWRkcyBhbiBvZmZlciB0byB0aGUgbWFwIG9mIGV4dGVuc2lvbiBvZmZlcnMgb3IgYSBwYXJhbWV0ZXIgdG8gdGhlIG1hcCBvZlxuICogcGFyYW1ldGVycy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVzdCBUaGUgbWFwIG9mIGV4dGVuc2lvbiBvZmZlcnMgb3IgcGFyYW1ldGVyc1xuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIGV4dGVuc2lvbiBvciBwYXJhbWV0ZXIgbmFtZVxuICogQHBhcmFtIHsoT2JqZWN0fEJvb2xlYW58U3RyaW5nKX0gZWxlbSBUaGUgZXh0ZW5zaW9uIHBhcmFtZXRlcnMgb3IgdGhlXG4gKiAgICAgcGFyYW1ldGVyIHZhbHVlXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwdXNoIChkZXN0LCBuYW1lLCBlbGVtKSB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGVzdCwgbmFtZSkpIGRlc3RbbmFtZV0ucHVzaChlbGVtKTtcbiAgZWxzZSBkZXN0W25hbWVdID0gW2VsZW1dO1xufVxuXG4vKipcbiAqIFBhcnNlcyB0aGUgYFNlYy1XZWJTb2NrZXQtRXh0ZW5zaW9uc2AgaGVhZGVyIGludG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXIgVGhlIGZpZWxkIHZhbHVlIG9mIHRoZSBoZWFkZXJcbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHBhcnNlZCBvYmplY3RcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcGFyc2UgKGhlYWRlcikge1xuICBjb25zdCBvZmZlcnMgPSB7fTtcblxuICBpZiAoaGVhZGVyID09PSB1bmRlZmluZWQgfHwgaGVhZGVyID09PSAnJykgcmV0dXJuIG9mZmVycztcblxuICB2YXIgcGFyYW1zID0ge307XG4gIHZhciBtdXN0VW5lc2NhcGUgPSBmYWxzZTtcbiAgdmFyIGlzRXNjYXBpbmcgPSBmYWxzZTtcbiAgdmFyIGluUXVvdGVzID0gZmFsc2U7XG4gIHZhciBleHRlbnNpb25OYW1lO1xuICB2YXIgcGFyYW1OYW1lO1xuICB2YXIgc3RhcnQgPSAtMTtcbiAgdmFyIGVuZCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY29kZSA9IGhlYWRlci5jaGFyQ29kZUF0KGkpO1xuXG4gICAgaWYgKGV4dGVuc2lvbk5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGVuZCA9PT0gLTEgJiYgdG9rZW5DaGFyc1tjb2RlXSA9PT0gMSkge1xuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSBzdGFydCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4MjAvKiAnICcgKi98fCBjb2RlID09PSAweDA5LyogJ1xcdCcgKi8pIHtcbiAgICAgICAgaWYgKGVuZCA9PT0gLTEgJiYgc3RhcnQgIT09IC0xKSBlbmQgPSBpO1xuICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDNiLyogJzsnICovIHx8IGNvZGUgPT09IDB4MmMvKiAnLCcgKi8pIHtcbiAgICAgICAgaWYgKHN0YXJ0ID09PSAtMSkgdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG5cbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIGVuZCA9IGk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBoZWFkZXIuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICAgIGlmIChjb2RlID09PSAweDJjKSB7XG4gICAgICAgICAgcHVzaChvZmZlcnMsIG5hbWUsIHBhcmFtcyk7XG4gICAgICAgICAgcGFyYW1zID0ge307XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXh0ZW5zaW9uTmFtZSA9IG5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydCA9IGVuZCA9IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGVuZCA9PT0gLTEgJiYgdG9rZW5DaGFyc1tjb2RlXSA9PT0gMSkge1xuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSBzdGFydCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4MjAgfHwgY29kZSA9PT0gMHgwOSkge1xuICAgICAgICBpZiAoZW5kID09PSAtMSAmJiBzdGFydCAhPT0gLTEpIGVuZCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4M2IgfHwgY29kZSA9PT0gMHgyYykge1xuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSB0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcblxuICAgICAgICBpZiAoZW5kID09PSAtMSkgZW5kID0gaTtcbiAgICAgICAgcHVzaChwYXJhbXMsIGhlYWRlci5zbGljZShzdGFydCwgZW5kKSwgdHJ1ZSk7XG4gICAgICAgIGlmIChjb2RlID09PSAweDJjKSB7XG4gICAgICAgICAgcHVzaChvZmZlcnMsIGV4dGVuc2lvbk5hbWUsIHBhcmFtcyk7XG4gICAgICAgICAgcGFyYW1zID0ge307XG4gICAgICAgICAgZXh0ZW5zaW9uTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0ID0gZW5kID0gLTE7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4M2QvKiAnPScgKi8mJiBzdGFydCAhPT0gLTEgJiYgZW5kID09PSAtMSkge1xuICAgICAgICBwYXJhbU5hbWUgPSBoZWFkZXIuc2xpY2Uoc3RhcnQsIGkpO1xuICAgICAgICBzdGFydCA9IGVuZCA9IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vXG4gICAgICAvLyBUaGUgdmFsdWUgb2YgYSBxdW90ZWQtc3RyaW5nIGFmdGVyIHVuZXNjYXBpbmcgbXVzdCBjb25mb3JtIHRvIHRoZVxuICAgICAgLy8gdG9rZW4gQUJORiwgc28gb25seSB0b2tlbiBjaGFyYWN0ZXJzIGFyZSB2YWxpZC5cbiAgICAgIC8vIFJlZjogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY0NTUjc2VjdGlvbi05LjFcbiAgICAgIC8vXG4gICAgICBpZiAoaXNFc2NhcGluZykge1xuICAgICAgICBpZiAodG9rZW5DaGFyc1tjb2RlXSAhPT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtpfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydCA9PT0gLTEpIHN0YXJ0ID0gaTtcbiAgICAgICAgZWxzZSBpZiAoIW11c3RVbmVzY2FwZSkgbXVzdFVuZXNjYXBlID0gdHJ1ZTtcbiAgICAgICAgaXNFc2NhcGluZyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChpblF1b3Rlcykge1xuICAgICAgICBpZiAodG9rZW5DaGFyc1tjb2RlXSA9PT0gMSkge1xuICAgICAgICAgIGlmIChzdGFydCA9PT0gLTEpIHN0YXJ0ID0gaTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDIyLyogJ1wiJyAqLyAmJiBzdGFydCAhPT0gLTEpIHtcbiAgICAgICAgICBpblF1b3RlcyA9IGZhbHNlO1xuICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHg1Yy8qICdcXCcgKi8pIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDIyICYmIGhlYWRlci5jaGFyQ29kZUF0KGkgLSAxKSA9PT0gMHgzZCkge1xuICAgICAgICBpblF1b3RlcyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGVuZCA9PT0gLTEgJiYgdG9rZW5DaGFyc1tjb2RlXSA9PT0gMSkge1xuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSBzdGFydCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0ICE9PSAtMSAmJiAoY29kZSA9PT0gMHgyMCB8fCBjb2RlID09PSAweDA5KSkge1xuICAgICAgICBpZiAoZW5kID09PSAtMSkgZW5kID0gaTtcbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgzYiB8fCBjb2RlID09PSAweDJjKSB7XG4gICAgICAgIGlmIChzdGFydCA9PT0gLTEpIHRocm93IG5ldyBFcnJvcihgdW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtpfWApO1xuXG4gICAgICAgIGlmIChlbmQgPT09IC0xKSBlbmQgPSBpO1xuICAgICAgICB2YXIgdmFsdWUgPSBoZWFkZXIuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICAgIGlmIChtdXN0VW5lc2NhcGUpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgICAgICAgIG11c3RVbmVzY2FwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHB1c2gocGFyYW1zLCBwYXJhbU5hbWUsIHZhbHVlKTtcbiAgICAgICAgaWYgKGNvZGUgPT09IDB4MmMpIHtcbiAgICAgICAgICBwdXNoKG9mZmVycywgZXh0ZW5zaW9uTmFtZSwgcGFyYW1zKTtcbiAgICAgICAgICBwYXJhbXMgPSB7fTtcbiAgICAgICAgICBleHRlbnNpb25OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICBzdGFydCA9IGVuZCA9IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSAtMSB8fCBpblF1b3RlcykgdGhyb3cgbmV3IEVycm9yKCd1bmV4cGVjdGVkIGVuZCBvZiBpbnB1dCcpO1xuXG4gIGlmIChlbmQgPT09IC0xKSBlbmQgPSBpO1xuICBjb25zdCB0b2tlbiA9IGhlYWRlci5zbGljZShzdGFydCwgZW5kKTtcbiAgaWYgKGV4dGVuc2lvbk5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHB1c2gob2ZmZXJzLCB0b2tlbiwge30pO1xuICB9IGVsc2Uge1xuICAgIGlmIChwYXJhbU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcHVzaChwYXJhbXMsIHRva2VuLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKG11c3RVbmVzY2FwZSkge1xuICAgICAgcHVzaChwYXJhbXMsIHBhcmFtTmFtZSwgdG9rZW4ucmVwbGFjZSgvXFxcXC9nLCAnJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHBhcmFtcywgcGFyYW1OYW1lLCB0b2tlbik7XG4gICAgfVxuICAgIHB1c2gob2ZmZXJzLCBleHRlbnNpb25OYW1lLCBwYXJhbXMpO1xuICB9XG5cbiAgcmV0dXJuIG9mZmVycztcbn1cblxuLyoqXG4gKiBTZXJpYWxpemVzIGEgcGFyc2VkIGBTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnNgIGhlYWRlciB0byBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWUgVGhlIG9iamVjdCB0byBmb3JtYXRcbiAqIEByZXR1cm4ge1N0cmluZ30gQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiB2YWx1ZVxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBmb3JtYXQgKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkubWFwKCh0b2tlbikgPT4ge1xuICAgIHZhciBwYXJhbXNMaXN0ID0gdmFsdWVbdG9rZW5dO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwYXJhbXNMaXN0KSkgcGFyYW1zTGlzdCA9IFtwYXJhbXNMaXN0XTtcbiAgICByZXR1cm4gcGFyYW1zTGlzdC5tYXAoKHBhcmFtcykgPT4ge1xuICAgICAgcmV0dXJuIFt0b2tlbl0uY29uY2F0KE9iamVjdC5rZXlzKHBhcmFtcykubWFwKChrKSA9PiB7XG4gICAgICAgIHZhciBwID0gcGFyYW1zW2tdO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocCkpIHAgPSBbcF07XG4gICAgICAgIHJldHVybiBwLm1hcCgodikgPT4gdiA9PT0gdHJ1ZSA/IGsgOiBgJHtrfT0ke3Z9YCkuam9pbignOyAnKTtcbiAgICAgIH0pKS5qb2luKCc7ICcpO1xuICAgIH0pLmpvaW4oJywgJyk7XG4gIH0pLmpvaW4oJywgJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBmb3JtYXQsIHBhcnNlIH07XG4iXSwibmFtZXMiOlsidG9rZW5DaGFycyIsInB1c2giLCJkZXN0IiwibmFtZSIsImVsZW0iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJwYXJzZSIsImhlYWRlciIsIm9mZmVycyIsInVuZGVmaW5lZCIsInBhcmFtcyIsIm11c3RVbmVzY2FwZSIsImlzRXNjYXBpbmciLCJpblF1b3RlcyIsImV4dGVuc2lvbk5hbWUiLCJwYXJhbU5hbWUiLCJzdGFydCIsImVuZCIsImkiLCJsZW5ndGgiLCJjb2RlIiwiY2hhckNvZGVBdCIsIkVycm9yIiwic2xpY2UiLCJ2YWx1ZSIsInJlcGxhY2UiLCJ0b2tlbiIsImZvcm1hdCIsImtleXMiLCJtYXAiLCJwYXJhbXNMaXN0IiwiQXJyYXkiLCJpc0FycmF5IiwiY29uY2F0IiwiayIsInAiLCJ2Iiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/lib/Extensions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ws/lib/PerMessageDeflate.js":
/*!**************************************************!*\
  !*** ./node_modules/ws/lib/PerMessageDeflate.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst safeBuffer = __webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/ws/node_modules/safe-buffer/index.js\");\nconst Limiter = __webpack_require__(/*! async-limiter */ \"(rsc)/./node_modules/async-limiter/index.js\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst bufferUtil = __webpack_require__(/*! ./BufferUtil */ \"(rsc)/./node_modules/ws/lib/BufferUtil.js\");\nconst Buffer = safeBuffer.Buffer;\nconst TRAILER = Buffer.from([\n    0x00,\n    0x00,\n    0xff,\n    0xff\n]);\nconst EMPTY_BLOCK = Buffer.from([\n    0x00\n]);\nconst kWriteInProgress = Symbol(\"write-in-progress\");\nconst kPendingClose = Symbol(\"pending-close\");\nconst kTotalLength = Symbol(\"total-length\");\nconst kCallback = Symbol(\"callback\");\nconst kBuffers = Symbol(\"buffers\");\nconst kError = Symbol(\"error\");\nconst kOwner = Symbol(\"owner\");\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n/**\n * permessage-deflate implementation.\n */ class PerMessageDeflate {\n    /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Boolean} options.serverNoContextTakeover Request/accept disabling\n   *     of server context takeover\n   * @param {Boolean} options.clientNoContextTakeover Advertise/acknowledge\n   *     disabling of client context takeover\n   * @param {(Boolean|Number)} options.serverMaxWindowBits Request/confirm the\n   *     use of a custom server window size\n   * @param {(Boolean|Number)} options.clientMaxWindowBits Advertise support\n   *     for, or request, a custom client window size\n   * @param {Number} options.level The value of zlib's `level` param\n   * @param {Number} options.memLevel The value of zlib's `memLevel` param\n   * @param {Number} options.threshold Size (in bytes) below which messages\n   *     should not be compressed\n   * @param {Number} options.concurrencyLimit The number of concurrent calls to\n   *     zlib\n   * @param {Boolean} isServer Create the instance in either server or client\n   *     mode\n   * @param {Number} maxPayload The maximum allowed message length\n   */ constructor(options, isServer, maxPayload){\n        this._maxPayload = maxPayload | 0;\n        this._options = options || {};\n        this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024;\n        this._isServer = !!isServer;\n        this._deflate = null;\n        this._inflate = null;\n        this.params = null;\n        if (!zlibLimiter) {\n            const concurrency = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;\n            zlibLimiter = new Limiter({\n                concurrency\n            });\n        }\n    }\n    /**\n   * @type {String}\n   */ static get extensionName() {\n        return \"permessage-deflate\";\n    }\n    /**\n   * Create extension parameters offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */ offer() {\n        const params = {};\n        if (this._options.serverNoContextTakeover) {\n            params.server_no_context_takeover = true;\n        }\n        if (this._options.clientNoContextTakeover) {\n            params.client_no_context_takeover = true;\n        }\n        if (this._options.serverMaxWindowBits) {\n            params.server_max_window_bits = this._options.serverMaxWindowBits;\n        }\n        if (this._options.clientMaxWindowBits) {\n            params.client_max_window_bits = this._options.clientMaxWindowBits;\n        } else if (this._options.clientMaxWindowBits == null) {\n            params.client_max_window_bits = true;\n        }\n        return params;\n    }\n    /**\n   * Accept extension offer.\n   *\n   * @param {Array} paramsList Extension parameters\n   * @return {Object} Accepted configuration\n   * @public\n   */ accept(paramsList) {\n        paramsList = this.normalizeParams(paramsList);\n        var params;\n        if (this._isServer) {\n            params = this.acceptAsServer(paramsList);\n        } else {\n            params = this.acceptAsClient(paramsList);\n        }\n        this.params = params;\n        return params;\n    }\n    /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */ cleanup() {\n        if (this._inflate) {\n            if (this._inflate[kWriteInProgress]) {\n                this._inflate[kPendingClose] = true;\n            } else {\n                this._inflate.close();\n                this._inflate = null;\n            }\n        }\n        if (this._deflate) {\n            if (this._deflate[kWriteInProgress]) {\n                this._deflate[kPendingClose] = true;\n            } else {\n                this._deflate.close();\n                this._deflate = null;\n            }\n        }\n    }\n    /**\n   * Accept extension offer from client.\n   *\n   * @param {Array} paramsList Extension parameters\n   * @return {Object} Accepted configuration\n   * @private\n   */ acceptAsServer(paramsList) {\n        const accepted = {};\n        const result = paramsList.some((params)=>{\n            if (this._options.serverNoContextTakeover === false && params.server_no_context_takeover || this._options.serverMaxWindowBits === false && params.server_max_window_bits || typeof this._options.serverMaxWindowBits === \"number\" && typeof params.server_max_window_bits === \"number\" && this._options.serverMaxWindowBits > params.server_max_window_bits || typeof this._options.clientMaxWindowBits === \"number\" && !params.client_max_window_bits) {\n                return;\n            }\n            if (this._options.serverNoContextTakeover || params.server_no_context_takeover) {\n                accepted.server_no_context_takeover = true;\n            }\n            if (this._options.clientNoContextTakeover || this._options.clientNoContextTakeover !== false && params.client_no_context_takeover) {\n                accepted.client_no_context_takeover = true;\n            }\n            if (typeof this._options.serverMaxWindowBits === \"number\") {\n                accepted.server_max_window_bits = this._options.serverMaxWindowBits;\n            } else if (typeof params.server_max_window_bits === \"number\") {\n                accepted.server_max_window_bits = params.server_max_window_bits;\n            }\n            if (typeof this._options.clientMaxWindowBits === \"number\") {\n                accepted.client_max_window_bits = this._options.clientMaxWindowBits;\n            } else if (this._options.clientMaxWindowBits !== false && typeof params.client_max_window_bits === \"number\") {\n                accepted.client_max_window_bits = params.client_max_window_bits;\n            }\n            return true;\n        });\n        if (!result) throw new Error(\"Doesn't support the offered configuration\");\n        return accepted;\n    }\n    /**\n   * Accept extension response from server.\n   *\n   * @param {Array} paramsList Extension parameters\n   * @return {Object} Accepted configuration\n   * @private\n   */ acceptAsClient(paramsList) {\n        const params = paramsList[0];\n        if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {\n            throw new Error('Invalid value for \"client_no_context_takeover\"');\n        }\n        if (typeof this._options.clientMaxWindowBits === \"number\" && (!params.client_max_window_bits || params.client_max_window_bits > this._options.clientMaxWindowBits) || this._options.clientMaxWindowBits === false && params.client_max_window_bits) {\n            throw new Error('Invalid value for \"client_max_window_bits\"');\n        }\n        return params;\n    }\n    /**\n   * Normalize extensions parameters.\n   *\n   * @param {Array} paramsList Extension parameters\n   * @return {Array} Normalized extensions parameters\n   * @private\n   */ normalizeParams(paramsList) {\n        return paramsList.map((params)=>{\n            Object.keys(params).forEach((key)=>{\n                var value = params[key];\n                if (value.length > 1) {\n                    throw new Error(`Multiple extension parameters for ${key}`);\n                }\n                value = value[0];\n                switch(key){\n                    case \"server_no_context_takeover\":\n                    case \"client_no_context_takeover\":\n                        if (value !== true) {\n                            throw new Error(`invalid extension parameter value for ${key} (${value})`);\n                        }\n                        params[key] = true;\n                        break;\n                    case \"server_max_window_bits\":\n                    case \"client_max_window_bits\":\n                        if (typeof value === \"string\") {\n                            value = parseInt(value, 10);\n                            if (Number.isNaN(value) || value < zlib.Z_MIN_WINDOWBITS || value > zlib.Z_MAX_WINDOWBITS) {\n                                throw new Error(`invalid extension parameter value for ${key} (${value})`);\n                            }\n                        }\n                        if (!this._isServer && value === true) {\n                            throw new Error(`Missing extension parameter value for ${key}`);\n                        }\n                        params[key] = value;\n                        break;\n                    default:\n                        throw new Error(`Not defined extension parameter (${key})`);\n                }\n            });\n            return params;\n        });\n    }\n    /**\n   * Decompress data. Concurrency limited by async-limiter.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */ decompress(data, fin, callback) {\n        zlibLimiter.push((done)=>{\n            this._decompress(data, fin, (err, result)=>{\n                done();\n                callback(err, result);\n            });\n        });\n    }\n    /**\n   * Compress data. Concurrency limited by async-limiter.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */ compress(data, fin, callback) {\n        zlibLimiter.push((done)=>{\n            this._compress(data, fin, (err, result)=>{\n                done();\n                callback(err, result);\n            });\n        });\n    }\n    /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */ _decompress(data, fin, callback) {\n        const endpoint = this._isServer ? \"client\" : \"server\";\n        if (!this._inflate) {\n            const key = `${endpoint}_max_window_bits`;\n            const windowBits = typeof this.params[key] !== \"number\" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n            this._inflate = zlib.createInflateRaw({\n                windowBits\n            });\n            this._inflate[kTotalLength] = 0;\n            this._inflate[kBuffers] = [];\n            this._inflate[kOwner] = this;\n            this._inflate.on(\"error\", inflateOnError);\n            this._inflate.on(\"data\", inflateOnData);\n        }\n        this._inflate[kCallback] = callback;\n        this._inflate[kWriteInProgress] = true;\n        this._inflate.write(data);\n        if (fin) this._inflate.write(TRAILER);\n        this._inflate.flush(()=>{\n            const err = this._inflate[kError];\n            if (err) {\n                this._inflate.close();\n                this._inflate = null;\n                callback(err);\n                return;\n            }\n            const data = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);\n            if (fin && this.params[`${endpoint}_no_context_takeover`] || this._inflate[kPendingClose]) {\n                this._inflate.close();\n                this._inflate = null;\n            } else {\n                this._inflate[kWriteInProgress] = false;\n                this._inflate[kTotalLength] = 0;\n                this._inflate[kBuffers] = [];\n            }\n            callback(null, data);\n        });\n    }\n    /**\n   * Compress data.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */ _compress(data, fin, callback) {\n        if (!data || data.length === 0) {\n            process.nextTick(callback, null, EMPTY_BLOCK);\n            return;\n        }\n        const endpoint = this._isServer ? \"server\" : \"client\";\n        if (!this._deflate) {\n            const key = `${endpoint}_max_window_bits`;\n            const windowBits = typeof this.params[key] !== \"number\" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n            this._deflate = zlib.createDeflateRaw({\n                memLevel: this._options.memLevel,\n                level: this._options.level,\n                flush: zlib.Z_SYNC_FLUSH,\n                windowBits\n            });\n            this._deflate[kTotalLength] = 0;\n            this._deflate[kBuffers] = [];\n            //\n            // `zlib.DeflateRaw` emits an `'error'` event only when an attempt to use\n            // it is made after it has already been closed. This cannot happen here,\n            // so we only add a listener for the `'data'` event.\n            //\n            this._deflate.on(\"data\", deflateOnData);\n        }\n        this._deflate[kWriteInProgress] = true;\n        this._deflate.write(data);\n        this._deflate.flush(zlib.Z_SYNC_FLUSH, ()=>{\n            var data = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);\n            if (fin) data = data.slice(0, data.length - 4);\n            if (fin && this.params[`${endpoint}_no_context_takeover`] || this._deflate[kPendingClose]) {\n                this._deflate.close();\n                this._deflate = null;\n            } else {\n                this._deflate[kWriteInProgress] = false;\n                this._deflate[kTotalLength] = 0;\n                this._deflate[kBuffers] = [];\n            }\n            callback(null, data);\n        });\n    }\n}\nmodule.exports = PerMessageDeflate;\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function deflateOnData(chunk) {\n    this[kBuffers].push(chunk);\n    this[kTotalLength] += chunk.length;\n}\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function inflateOnData(chunk) {\n    this[kTotalLength] += chunk.length;\n    if (this[kOwner]._maxPayload < 1 || this[kTotalLength] <= this[kOwner]._maxPayload) {\n        this[kBuffers].push(chunk);\n        return;\n    }\n    this[kError] = new Error(\"max payload size exceeded\");\n    this[kError].closeCode = 1009;\n    this.removeListener(\"data\", inflateOnData);\n    this.reset();\n}\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */ function inflateOnError(err) {\n    //\n    // There is no need to call `Zlib#close()` as the handle is automatically\n    // closed when an error is emitted.\n    //\n    this[kOwner]._inflate = null;\n    this[kCallback](err);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd3MvbGliL1Blck1lc3NhZ2VEZWZsYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFDM0IsTUFBTUMsVUFBVUQsbUJBQU9BLENBQUM7QUFDeEIsTUFBTUUsT0FBT0YsbUJBQU9BLENBQUM7QUFFckIsTUFBTUcsYUFBYUgsbUJBQU9BLENBQUM7QUFFM0IsTUFBTUksU0FBU0wsV0FBV0ssTUFBTTtBQUVoQyxNQUFNQyxVQUFVRCxPQUFPRSxJQUFJLENBQUM7SUFBQztJQUFNO0lBQU07SUFBTTtDQUFLO0FBQ3BELE1BQU1DLGNBQWNILE9BQU9FLElBQUksQ0FBQztJQUFDO0NBQUs7QUFFdEMsTUFBTUUsbUJBQW1CQyxPQUFPO0FBQ2hDLE1BQU1DLGdCQUFnQkQsT0FBTztBQUM3QixNQUFNRSxlQUFlRixPQUFPO0FBQzVCLE1BQU1HLFlBQVlILE9BQU87QUFDekIsTUFBTUksV0FBV0osT0FBTztBQUN4QixNQUFNSyxTQUFTTCxPQUFPO0FBQ3RCLE1BQU1NLFNBQVNOLE9BQU87QUFFdEIsRUFBRTtBQUNGLHdFQUF3RTtBQUN4RSxxRkFBcUY7QUFDckYsbURBQW1EO0FBQ25ELEVBQUU7QUFDRixxRUFBcUU7QUFDckUsRUFBRTtBQUNGLElBQUlPO0FBRUo7O0NBRUMsR0FDRCxNQUFNQztJQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FxQkMsR0FDREMsWUFBYUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFVBQVUsQ0FBRTtRQUMxQyxJQUFJLENBQUNDLFdBQVcsR0FBR0QsYUFBYTtRQUNoQyxJQUFJLENBQUNFLFFBQVEsR0FBR0osV0FBVyxDQUFDO1FBQzVCLElBQUksQ0FBQ0ssVUFBVSxHQUFHLElBQUksQ0FBQ0QsUUFBUSxDQUFDRSxTQUFTLEtBQUtDLFlBQzFDLElBQUksQ0FBQ0gsUUFBUSxDQUFDRSxTQUFTLEdBQ3ZCO1FBQ0osSUFBSSxDQUFDRSxTQUFTLEdBQUcsQ0FBQyxDQUFD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QUcsRUFBRTtZQUM5QjtZQUVBd0QsU0FBUyxNQUFNRjtRQUNqQjtJQUNGO0FBQ0Y7QUFFQTJCLE9BQU9DLE9BQU8sR0FBRzlFO0FBRWpCOzs7OztDQUtDLEdBQ0QsU0FBUzJFLGNBQWVJLEtBQUs7SUFDM0IsSUFBSSxDQUFDbkYsU0FBUyxDQUFDeUQsSUFBSSxDQUFDMEI7SUFDcEIsSUFBSSxDQUFDckYsYUFBYSxJQUFJcUYsTUFBTXBDLE1BQU07QUFDcEM7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNzQixjQUFlYyxLQUFLO0lBQzNCLElBQUksQ0FBQ3JGLGFBQWEsSUFBSXFGLE1BQU1wQyxNQUFNO0lBRWxDLElBQ0UsSUFBSSxDQUFDN0MsT0FBTyxDQUFDTyxXQUFXLEdBQUcsS0FDM0IsSUFBSSxDQUFDWCxhQUFhLElBQUksSUFBSSxDQUFDSSxPQUFPLENBQUNPLFdBQVcsRUFDOUM7UUFDQSxJQUFJLENBQUNULFNBQVMsQ0FBQ3lELElBQUksQ0FBQzBCO1FBQ3BCO0lBQ0Y7SUFFQSxJQUFJLENBQUNsRixPQUFPLEdBQUcsSUFBSXVDLE1BQU07SUFDekIsSUFBSSxDQUFDdkMsT0FBTyxDQUFDbUYsU0FBUyxHQUFHO0lBQ3pCLElBQUksQ0FBQ0MsY0FBYyxDQUFDLFFBQVFoQjtJQUM1QixJQUFJLENBQUNpQixLQUFLO0FBQ1o7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNsQixlQUFnQlIsR0FBRztJQUMxQixFQUFFO0lBQ0YseUVBQXlFO0lBQ3pFLG1DQUFtQztJQUNuQyxFQUFFO0lBQ0YsSUFBSSxDQUFDMUQsT0FBTyxDQUFDYyxRQUFRLEdBQUc7SUFDeEIsSUFBSSxDQUFDakIsVUFBVSxDQUFDNkQ7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3dzL2xpYi9QZXJNZXNzYWdlRGVmbGF0ZS5qcz9kMzgzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc2FmZUJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJyk7XG5jb25zdCBMaW1pdGVyID0gcmVxdWlyZSgnYXN5bmMtbGltaXRlcicpO1xuY29uc3QgemxpYiA9IHJlcXVpcmUoJ3psaWInKTtcblxuY29uc3QgYnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4vQnVmZmVyVXRpbCcpO1xuXG5jb25zdCBCdWZmZXIgPSBzYWZlQnVmZmVyLkJ1ZmZlcjtcblxuY29uc3QgVFJBSUxFUiA9IEJ1ZmZlci5mcm9tKFsweDAwLCAweDAwLCAweGZmLCAweGZmXSk7XG5jb25zdCBFTVBUWV9CTE9DSyA9IEJ1ZmZlci5mcm9tKFsweDAwXSk7XG5cbmNvbnN0IGtXcml0ZUluUHJvZ3Jlc3MgPSBTeW1ib2woJ3dyaXRlLWluLXByb2dyZXNzJyk7XG5jb25zdCBrUGVuZGluZ0Nsb3NlID0gU3ltYm9sKCdwZW5kaW5nLWNsb3NlJyk7XG5jb25zdCBrVG90YWxMZW5ndGggPSBTeW1ib2woJ3RvdGFsLWxlbmd0aCcpO1xuY29uc3Qga0NhbGxiYWNrID0gU3ltYm9sKCdjYWxsYmFjaycpO1xuY29uc3Qga0J1ZmZlcnMgPSBTeW1ib2woJ2J1ZmZlcnMnKTtcbmNvbnN0IGtFcnJvciA9IFN5bWJvbCgnZXJyb3InKTtcbmNvbnN0IGtPd25lciA9IFN5bWJvbCgnb3duZXInKTtcblxuLy9cbi8vIFdlIGxpbWl0IHpsaWIgY29uY3VycmVuY3ksIHdoaWNoIHByZXZlbnRzIHNldmVyZSBtZW1vcnkgZnJhZ21lbnRhdGlvblxuLy8gYXMgZG9jdW1lbnRlZCBpbiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzg4NzEjaXNzdWVjb21tZW50LTI1MDkxNTkxM1xuLy8gYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL2lzc3Vlcy8xMjAyXG4vL1xuLy8gSW50ZW50aW9uYWxseSBnbG9iYWw7IGl0J3MgdGhlIGdsb2JhbCB0aHJlYWQgcG9vbCB0aGF0J3MgYW4gaXNzdWUuXG4vL1xubGV0IHpsaWJMaW1pdGVyO1xuXG4vKipcbiAqIHBlcm1lc3NhZ2UtZGVmbGF0ZSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuY2xhc3MgUGVyTWVzc2FnZURlZmxhdGUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIFBlck1lc3NhZ2VEZWZsYXRlIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBDb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLnNlcnZlck5vQ29udGV4dFRha2VvdmVyIFJlcXVlc3QvYWNjZXB0IGRpc2FibGluZ1xuICAgKiAgICAgb2Ygc2VydmVyIGNvbnRleHQgdGFrZW92ZXJcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmNsaWVudE5vQ29udGV4dFRha2VvdmVyIEFkdmVydGlzZS9hY2tub3dsZWRnZVxuICAgKiAgICAgZGlzYWJsaW5nIG9mIGNsaWVudCBjb250ZXh0IHRha2VvdmVyXG4gICAqIEBwYXJhbSB7KEJvb2xlYW58TnVtYmVyKX0gb3B0aW9ucy5zZXJ2ZXJNYXhXaW5kb3dCaXRzIFJlcXVlc3QvY29uZmlybSB0aGVcbiAgICogICAgIHVzZSBvZiBhIGN1c3RvbSBzZXJ2ZXIgd2luZG93IHNpemVcbiAgICogQHBhcmFtIHsoQm9vbGVhbnxOdW1iZXIpfSBvcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMgQWR2ZXJ0aXNlIHN1cHBvcnRcbiAgICogICAgIGZvciwgb3IgcmVxdWVzdCwgYSBjdXN0b20gY2xpZW50IHdpbmRvdyBzaXplXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmxldmVsIFRoZSB2YWx1ZSBvZiB6bGliJ3MgYGxldmVsYCBwYXJhbVxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5tZW1MZXZlbCBUaGUgdmFsdWUgb2YgemxpYidzIGBtZW1MZXZlbGAgcGFyYW1cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMudGhyZXNob2xkIFNpemUgKGluIGJ5dGVzKSBiZWxvdyB3aGljaCBtZXNzYWdlc1xuICAgKiAgICAgc2hvdWxkIG5vdCBiZSBjb21wcmVzc2VkXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmNvbmN1cnJlbmN5TGltaXQgVGhlIG51bWJlciBvZiBjb25jdXJyZW50IGNhbGxzIHRvXG4gICAqICAgICB6bGliXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNTZXJ2ZXIgQ3JlYXRlIHRoZSBpbnN0YW5jZSBpbiBlaXRoZXIgc2VydmVyIG9yIGNsaWVudFxuICAgKiAgICAgbW9kZVxuICAgKiBAcGFyYW0ge051bWJlcn0gbWF4UGF5bG9hZCBUaGUgbWF4aW11bSBhbGxvd2VkIG1lc3NhZ2UgbGVuZ3RoXG4gICAqL1xuICBjb25zdHJ1Y3RvciAob3B0aW9ucywgaXNTZXJ2ZXIsIG1heFBheWxvYWQpIHtcbiAgICB0aGlzLl9tYXhQYXlsb2FkID0gbWF4UGF5bG9hZCB8IDA7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdGhpcy5fdGhyZXNob2xkID0gdGhpcy5fb3B0aW9ucy50aHJlc2hvbGQgIT09IHVuZGVmaW5lZFxuICAgICAgPyB0aGlzLl9vcHRpb25zLnRocmVzaG9sZFxuICAgICAgOiAxMDI0O1xuICAgIHRoaXMuX2lzU2VydmVyID0gISFpc1NlcnZlcjtcbiAgICB0aGlzLl9kZWZsYXRlID0gbnVsbDtcbiAgICB0aGlzLl9pbmZsYXRlID0gbnVsbDtcblxuICAgIHRoaXMucGFyYW1zID0gbnVsbDtcblxuICAgIGlmICghemxpYkxpbWl0ZXIpIHtcbiAgICAgIGNvbnN0IGNvbmN1cnJlbmN5ID0gdGhpcy5fb3B0aW9ucy5jb25jdXJyZW5jeUxpbWl0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyB0aGlzLl9vcHRpb25zLmNvbmN1cnJlbmN5TGltaXRcbiAgICAgICAgOiAxMDtcbiAgICAgIHpsaWJMaW1pdGVyID0gbmV3IExpbWl0ZXIoeyBjb25jdXJyZW5jeSB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgZXh0ZW5zaW9uTmFtZSAoKSB7XG4gICAgcmV0dXJuICdwZXJtZXNzYWdlLWRlZmxhdGUnO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBleHRlbnNpb24gcGFyYW1ldGVycyBvZmZlci5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fSBFeHRlbnNpb24gcGFyYW1ldGVyc1xuICAgKiBAcHVibGljXG4gICAqL1xuICBvZmZlciAoKSB7XG4gICAgY29uc3QgcGFyYW1zID0ge307XG5cbiAgICBpZiAodGhpcy5fb3B0aW9ucy5zZXJ2ZXJOb0NvbnRleHRUYWtlb3Zlcikge1xuICAgICAgcGFyYW1zLnNlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX29wdGlvbnMuY2xpZW50Tm9Db250ZXh0VGFrZW92ZXIpIHtcbiAgICAgIHBhcmFtcy5jbGllbnRfbm9fY29udGV4dF90YWtlb3ZlciA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9vcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHMpIHtcbiAgICAgIHBhcmFtcy5zZXJ2ZXJfbWF4X3dpbmRvd19iaXRzID0gdGhpcy5fb3B0aW9ucy5zZXJ2ZXJNYXhXaW5kb3dCaXRzO1xuICAgIH1cbiAgICBpZiAodGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzKSB7XG4gICAgICBwYXJhbXMuY2xpZW50X21heF93aW5kb3dfYml0cyA9IHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cztcbiAgICB9IGVsc2UgaWYgKHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cyA9PSBudWxsKSB7XG4gICAgICBwYXJhbXMuY2xpZW50X21heF93aW5kb3dfYml0cyA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBY2NlcHQgZXh0ZW5zaW9uIG9mZmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBwYXJhbXNMaXN0IEV4dGVuc2lvbiBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm4ge09iamVjdH0gQWNjZXB0ZWQgY29uZmlndXJhdGlvblxuICAgKiBAcHVibGljXG4gICAqL1xuICBhY2NlcHQgKHBhcmFtc0xpc3QpIHtcbiAgICBwYXJhbXNMaXN0ID0gdGhpcy5ub3JtYWxpemVQYXJhbXMocGFyYW1zTGlzdCk7XG5cbiAgICB2YXIgcGFyYW1zO1xuICAgIGlmICh0aGlzLl9pc1NlcnZlcikge1xuICAgICAgcGFyYW1zID0gdGhpcy5hY2NlcHRBc1NlcnZlcihwYXJhbXNMaXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyYW1zID0gdGhpcy5hY2NlcHRBc0NsaWVudChwYXJhbXNMaXN0KTtcbiAgICB9XG5cbiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIGFsbCByZXNvdXJjZXMgdXNlZCBieSB0aGUgZXh0ZW5zaW9uLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBjbGVhbnVwICgpIHtcbiAgICBpZiAodGhpcy5faW5mbGF0ZSkge1xuICAgICAgaWYgKHRoaXMuX2luZmxhdGVba1dyaXRlSW5Qcm9ncmVzc10pIHtcbiAgICAgICAgdGhpcy5faW5mbGF0ZVtrUGVuZGluZ0Nsb3NlXSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pbmZsYXRlLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuX2luZmxhdGUgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5fZGVmbGF0ZSkge1xuICAgICAgaWYgKHRoaXMuX2RlZmxhdGVba1dyaXRlSW5Qcm9ncmVzc10pIHtcbiAgICAgICAgdGhpcy5fZGVmbGF0ZVtrUGVuZGluZ0Nsb3NlXSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9kZWZsYXRlLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuX2RlZmxhdGUgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBY2NlcHQgZXh0ZW5zaW9uIG9mZmVyIGZyb20gY2xpZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBwYXJhbXNMaXN0IEV4dGVuc2lvbiBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm4ge09iamVjdH0gQWNjZXB0ZWQgY29uZmlndXJhdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYWNjZXB0QXNTZXJ2ZXIgKHBhcmFtc0xpc3QpIHtcbiAgICBjb25zdCBhY2NlcHRlZCA9IHt9O1xuICAgIGNvbnN0IHJlc3VsdCA9IHBhcmFtc0xpc3Quc29tZSgocGFyYW1zKSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgICh0aGlzLl9vcHRpb25zLnNlcnZlck5vQ29udGV4dFRha2VvdmVyID09PSBmYWxzZSAmJlxuICAgICAgICAgIHBhcmFtcy5zZXJ2ZXJfbm9fY29udGV4dF90YWtlb3ZlcikgfHxcbiAgICAgICAgKHRoaXMuX29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICBwYXJhbXMuc2VydmVyX21heF93aW5kb3dfYml0cykgfHxcbiAgICAgICAgKHR5cGVvZiB0aGlzLl9vcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHMgPT09ICdudW1iZXInICYmXG4gICAgICAgICAgdHlwZW9mIHBhcmFtcy5zZXJ2ZXJfbWF4X3dpbmRvd19iaXRzID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgIHRoaXMuX29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cyA+IHBhcmFtcy5zZXJ2ZXJfbWF4X3dpbmRvd19iaXRzKSB8fFxuICAgICAgICAodHlwZW9mIHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cyA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgICAhcGFyYW1zLmNsaWVudF9tYXhfd2luZG93X2JpdHMpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX29wdGlvbnMuc2VydmVyTm9Db250ZXh0VGFrZW92ZXIgfHxcbiAgICAgICAgcGFyYW1zLnNlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyXG4gICAgICApIHtcbiAgICAgICAgYWNjZXB0ZWQuc2VydmVyX25vX2NvbnRleHRfdGFrZW92ZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9vcHRpb25zLmNsaWVudE5vQ29udGV4dFRha2VvdmVyIHx8XG4gICAgICAgICh0aGlzLl9vcHRpb25zLmNsaWVudE5vQ29udGV4dFRha2VvdmVyICE9PSBmYWxzZSAmJlxuICAgICAgICAgIHBhcmFtcy5jbGllbnRfbm9fY29udGV4dF90YWtlb3ZlcilcbiAgICAgICkge1xuICAgICAgICBhY2NlcHRlZC5jbGllbnRfbm9fY29udGV4dF90YWtlb3ZlciA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgYWNjZXB0ZWQuc2VydmVyX21heF93aW5kb3dfYml0cyA9IHRoaXMuX29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhcmFtcy5zZXJ2ZXJfbWF4X3dpbmRvd19iaXRzID09PSAnbnVtYmVyJykge1xuICAgICAgICBhY2NlcHRlZC5zZXJ2ZXJfbWF4X3dpbmRvd19iaXRzID0gcGFyYW1zLnNlcnZlcl9tYXhfd2luZG93X2JpdHM7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgYWNjZXB0ZWQuY2xpZW50X21heF93aW5kb3dfYml0cyA9IHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cztcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cyAhPT0gZmFsc2UgJiZcbiAgICAgICAgdHlwZW9mIHBhcmFtcy5jbGllbnRfbWF4X3dpbmRvd19iaXRzID09PSAnbnVtYmVyJ1xuICAgICAgKSB7XG4gICAgICAgIGFjY2VwdGVkLmNsaWVudF9tYXhfd2luZG93X2JpdHMgPSBwYXJhbXMuY2xpZW50X21heF93aW5kb3dfYml0cztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuXG4gICAgaWYgKCFyZXN1bHQpIHRocm93IG5ldyBFcnJvcihcIkRvZXNuJ3Qgc3VwcG9ydCB0aGUgb2ZmZXJlZCBjb25maWd1cmF0aW9uXCIpO1xuXG4gICAgcmV0dXJuIGFjY2VwdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjY2VwdCBleHRlbnNpb24gcmVzcG9uc2UgZnJvbSBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IHBhcmFtc0xpc3QgRXh0ZW5zaW9uIHBhcmFtZXRlcnNcbiAgICogQHJldHVybiB7T2JqZWN0fSBBY2NlcHRlZCBjb25maWd1cmF0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhY2NlcHRBc0NsaWVudCAocGFyYW1zTGlzdCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHBhcmFtc0xpc3RbMF07XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLl9vcHRpb25zLmNsaWVudE5vQ29udGV4dFRha2VvdmVyID09PSBmYWxzZSAmJlxuICAgICAgcGFyYW1zLmNsaWVudF9ub19jb250ZXh0X3Rha2VvdmVyXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiY2xpZW50X25vX2NvbnRleHRfdGFrZW92ZXJcIicpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICh0eXBlb2YgdGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAoIXBhcmFtcy5jbGllbnRfbWF4X3dpbmRvd19iaXRzIHx8XG4gICAgICAgICAgcGFyYW1zLmNsaWVudF9tYXhfd2luZG93X2JpdHMgPiB0aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMpKSB8fFxuICAgICAgKHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cyA9PT0gZmFsc2UgJiZcbiAgICAgICAgcGFyYW1zLmNsaWVudF9tYXhfd2luZG93X2JpdHMpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIFwiY2xpZW50X21heF93aW5kb3dfYml0c1wiJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3JtYWxpemUgZXh0ZW5zaW9ucyBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBwYXJhbXNMaXN0IEV4dGVuc2lvbiBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm4ge0FycmF5fSBOb3JtYWxpemVkIGV4dGVuc2lvbnMgcGFyYW1ldGVyc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbm9ybWFsaXplUGFyYW1zIChwYXJhbXNMaXN0KSB7XG4gICAgcmV0dXJuIHBhcmFtc0xpc3QubWFwKChwYXJhbXMpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcmFtc1trZXldO1xuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTXVsdGlwbGUgZXh0ZW5zaW9uIHBhcmFtZXRlcnMgZm9yICR7a2V5fWApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgPSB2YWx1ZVswXTtcblxuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgIGNhc2UgJ3NlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyJzpcbiAgICAgICAgICBjYXNlICdjbGllbnRfbm9fY29udGV4dF90YWtlb3Zlcic6XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGV4dGVuc2lvbiBwYXJhbWV0ZXIgdmFsdWUgZm9yICR7a2V5fSAoJHt2YWx1ZX0pYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJhbXNba2V5XSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdzZXJ2ZXJfbWF4X3dpbmRvd19iaXRzJzpcbiAgICAgICAgICBjYXNlICdjbGllbnRfbWF4X3dpbmRvd19iaXRzJzpcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIE51bWJlci5pc05hTih2YWx1ZSkgfHxcbiAgICAgICAgICAgICAgICB2YWx1ZSA8IHpsaWIuWl9NSU5fV0lORE9XQklUUyB8fFxuICAgICAgICAgICAgICAgIHZhbHVlID4gemxpYi5aX01BWF9XSU5ET1dCSVRTXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBleHRlbnNpb24gcGFyYW1ldGVyIHZhbHVlIGZvciAke2tleX0gKCR7dmFsdWV9KWApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzU2VydmVyICYmIHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBleHRlbnNpb24gcGFyYW1ldGVyIHZhbHVlIGZvciAke2tleX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmFtc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3QgZGVmaW5lZCBleHRlbnNpb24gcGFyYW1ldGVyICgke2tleX0pYCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvbXByZXNzIGRhdGEuIENvbmN1cnJlbmN5IGxpbWl0ZWQgYnkgYXN5bmMtbGltaXRlci5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEgQ29tcHJlc3NlZCBkYXRhXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmluIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGlzIHRoZSBsYXN0IGZyYWdtZW50XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGRlY29tcHJlc3MgKGRhdGEsIGZpbiwgY2FsbGJhY2spIHtcbiAgICB6bGliTGltaXRlci5wdXNoKChkb25lKSA9PiB7XG4gICAgICB0aGlzLl9kZWNvbXByZXNzKGRhdGEsIGZpbiwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29tcHJlc3MgZGF0YS4gQ29uY3VycmVuY3kgbGltaXRlZCBieSBhc3luYy1saW1pdGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YSBEYXRhIHRvIGNvbXByZXNzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmluIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGlzIHRoZSBsYXN0IGZyYWdtZW50XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGNvbXByZXNzIChkYXRhLCBmaW4sIGNhbGxiYWNrKSB7XG4gICAgemxpYkxpbWl0ZXIucHVzaCgoZG9uZSkgPT4ge1xuICAgICAgdGhpcy5fY29tcHJlc3MoZGF0YSwgZmluLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvbXByZXNzIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhIENvbXByZXNzZWQgZGF0YVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZpbiBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdGhpcyBpcyB0aGUgbGFzdCBmcmFnbWVudFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFja1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RlY29tcHJlc3MgKGRhdGEsIGZpbiwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBlbmRwb2ludCA9IHRoaXMuX2lzU2VydmVyID8gJ2NsaWVudCcgOiAnc2VydmVyJztcblxuICAgIGlmICghdGhpcy5faW5mbGF0ZSkge1xuICAgICAgY29uc3Qga2V5ID0gYCR7ZW5kcG9pbnR9X21heF93aW5kb3dfYml0c2A7XG4gICAgICBjb25zdCB3aW5kb3dCaXRzID0gdHlwZW9mIHRoaXMucGFyYW1zW2tleV0gIT09ICdudW1iZXInXG4gICAgICAgID8gemxpYi5aX0RFRkFVTFRfV0lORE9XQklUU1xuICAgICAgICA6IHRoaXMucGFyYW1zW2tleV07XG5cbiAgICAgIHRoaXMuX2luZmxhdGUgPSB6bGliLmNyZWF0ZUluZmxhdGVSYXcoeyB3aW5kb3dCaXRzIH0pO1xuICAgICAgdGhpcy5faW5mbGF0ZVtrVG90YWxMZW5ndGhdID0gMDtcbiAgICAgIHRoaXMuX2luZmxhdGVba0J1ZmZlcnNdID0gW107XG4gICAgICB0aGlzLl9pbmZsYXRlW2tPd25lcl0gPSB0aGlzO1xuICAgICAgdGhpcy5faW5mbGF0ZS5vbignZXJyb3InLCBpbmZsYXRlT25FcnJvcik7XG4gICAgICB0aGlzLl9pbmZsYXRlLm9uKCdkYXRhJywgaW5mbGF0ZU9uRGF0YSk7XG4gICAgfVxuXG4gICAgdGhpcy5faW5mbGF0ZVtrQ2FsbGJhY2tdID0gY2FsbGJhY2s7XG4gICAgdGhpcy5faW5mbGF0ZVtrV3JpdGVJblByb2dyZXNzXSA9IHRydWU7XG5cbiAgICB0aGlzLl9pbmZsYXRlLndyaXRlKGRhdGEpO1xuICAgIGlmIChmaW4pIHRoaXMuX2luZmxhdGUud3JpdGUoVFJBSUxFUik7XG5cbiAgICB0aGlzLl9pbmZsYXRlLmZsdXNoKCgpID0+IHtcbiAgICAgIGNvbnN0IGVyciA9IHRoaXMuX2luZmxhdGVba0Vycm9yXTtcblxuICAgICAgaWYgKGVycikge1xuICAgICAgICB0aGlzLl9pbmZsYXRlLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuX2luZmxhdGUgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBidWZmZXJVdGlsLmNvbmNhdChcbiAgICAgICAgdGhpcy5faW5mbGF0ZVtrQnVmZmVyc10sXG4gICAgICAgIHRoaXMuX2luZmxhdGVba1RvdGFsTGVuZ3RoXVxuICAgICAgKTtcblxuICAgICAgaWYgKFxuICAgICAgICAoZmluICYmIHRoaXMucGFyYW1zW2Ake2VuZHBvaW50fV9ub19jb250ZXh0X3Rha2VvdmVyYF0pIHx8XG4gICAgICAgIHRoaXMuX2luZmxhdGVba1BlbmRpbmdDbG9zZV1cbiAgICAgICkge1xuICAgICAgICB0aGlzLl9pbmZsYXRlLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuX2luZmxhdGUgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faW5mbGF0ZVtrV3JpdGVJblByb2dyZXNzXSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pbmZsYXRlW2tUb3RhbExlbmd0aF0gPSAwO1xuICAgICAgICB0aGlzLl9pbmZsYXRlW2tCdWZmZXJzXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wcmVzcyBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YSBEYXRhIHRvIGNvbXByZXNzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmluIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGlzIHRoZSBsYXN0IGZyYWdtZW50XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY29tcHJlc3MgKGRhdGEsIGZpbiwgY2FsbGJhY2spIHtcbiAgICBpZiAoIWRhdGEgfHwgZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2ssIG51bGwsIEVNUFRZX0JMT0NLKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlbmRwb2ludCA9IHRoaXMuX2lzU2VydmVyID8gJ3NlcnZlcicgOiAnY2xpZW50JztcblxuICAgIGlmICghdGhpcy5fZGVmbGF0ZSkge1xuICAgICAgY29uc3Qga2V5ID0gYCR7ZW5kcG9pbnR9X21heF93aW5kb3dfYml0c2A7XG4gICAgICBjb25zdCB3aW5kb3dCaXRzID0gdHlwZW9mIHRoaXMucGFyYW1zW2tleV0gIT09ICdudW1iZXInXG4gICAgICAgID8gemxpYi5aX0RFRkFVTFRfV0lORE9XQklUU1xuICAgICAgICA6IHRoaXMucGFyYW1zW2tleV07XG5cbiAgICAgIHRoaXMuX2RlZmxhdGUgPSB6bGliLmNyZWF0ZURlZmxhdGVSYXcoe1xuICAgICAgICBtZW1MZXZlbDogdGhpcy5fb3B0aW9ucy5tZW1MZXZlbCxcbiAgICAgICAgbGV2ZWw6IHRoaXMuX29wdGlvbnMubGV2ZWwsXG4gICAgICAgIGZsdXNoOiB6bGliLlpfU1lOQ19GTFVTSCxcbiAgICAgICAgd2luZG93Qml0c1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2RlZmxhdGVba1RvdGFsTGVuZ3RoXSA9IDA7XG4gICAgICB0aGlzLl9kZWZsYXRlW2tCdWZmZXJzXSA9IFtdO1xuXG4gICAgICAvL1xuICAgICAgLy8gYHpsaWIuRGVmbGF0ZVJhd2AgZW1pdHMgYW4gYCdlcnJvcidgIGV2ZW50IG9ubHkgd2hlbiBhbiBhdHRlbXB0IHRvIHVzZVxuICAgICAgLy8gaXQgaXMgbWFkZSBhZnRlciBpdCBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZC4gVGhpcyBjYW5ub3QgaGFwcGVuIGhlcmUsXG4gICAgICAvLyBzbyB3ZSBvbmx5IGFkZCBhIGxpc3RlbmVyIGZvciB0aGUgYCdkYXRhJ2AgZXZlbnQuXG4gICAgICAvL1xuICAgICAgdGhpcy5fZGVmbGF0ZS5vbignZGF0YScsIGRlZmxhdGVPbkRhdGEpO1xuICAgIH1cblxuICAgIHRoaXMuX2RlZmxhdGVba1dyaXRlSW5Qcm9ncmVzc10gPSB0cnVlO1xuXG4gICAgdGhpcy5fZGVmbGF0ZS53cml0ZShkYXRhKTtcbiAgICB0aGlzLl9kZWZsYXRlLmZsdXNoKHpsaWIuWl9TWU5DX0ZMVVNILCAoKSA9PiB7XG4gICAgICB2YXIgZGF0YSA9IGJ1ZmZlclV0aWwuY29uY2F0KFxuICAgICAgICB0aGlzLl9kZWZsYXRlW2tCdWZmZXJzXSxcbiAgICAgICAgdGhpcy5fZGVmbGF0ZVtrVG90YWxMZW5ndGhdXG4gICAgICApO1xuXG4gICAgICBpZiAoZmluKSBkYXRhID0gZGF0YS5zbGljZSgwLCBkYXRhLmxlbmd0aCAtIDQpO1xuXG4gICAgICBpZiAoXG4gICAgICAgIChmaW4gJiYgdGhpcy5wYXJhbXNbYCR7ZW5kcG9pbnR9X25vX2NvbnRleHRfdGFrZW92ZXJgXSkgfHxcbiAgICAgICAgdGhpcy5fZGVmbGF0ZVtrUGVuZGluZ0Nsb3NlXVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX2RlZmxhdGUuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5fZGVmbGF0ZSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9kZWZsYXRlW2tXcml0ZUluUHJvZ3Jlc3NdID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RlZmxhdGVba1RvdGFsTGVuZ3RoXSA9IDA7XG4gICAgICAgIHRoaXMuX2RlZmxhdGVba0J1ZmZlcnNdID0gW107XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGVyTWVzc2FnZURlZmxhdGU7XG5cbi8qKlxuICogVGhlIGxpc3RlbmVyIG9mIHRoZSBgemxpYi5EZWZsYXRlUmF3YCBzdHJlYW0gYCdkYXRhJ2AgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGNodW5rIEEgY2h1bmsgb2YgZGF0YVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZU9uRGF0YSAoY2h1bmspIHtcbiAgdGhpc1trQnVmZmVyc10ucHVzaChjaHVuayk7XG4gIHRoaXNba1RvdGFsTGVuZ3RoXSArPSBjaHVuay5sZW5ndGg7XG59XG5cbi8qKlxuICogVGhlIGxpc3RlbmVyIG9mIHRoZSBgemxpYi5JbmZsYXRlUmF3YCBzdHJlYW0gYCdkYXRhJ2AgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGNodW5rIEEgY2h1bmsgb2YgZGF0YVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaW5mbGF0ZU9uRGF0YSAoY2h1bmspIHtcbiAgdGhpc1trVG90YWxMZW5ndGhdICs9IGNodW5rLmxlbmd0aDtcblxuICBpZiAoXG4gICAgdGhpc1trT3duZXJdLl9tYXhQYXlsb2FkIDwgMSB8fFxuICAgIHRoaXNba1RvdGFsTGVuZ3RoXSA8PSB0aGlzW2tPd25lcl0uX21heFBheWxvYWRcbiAgKSB7XG4gICAgdGhpc1trQnVmZmVyc10ucHVzaChjaHVuayk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpc1trRXJyb3JdID0gbmV3IEVycm9yKCdtYXggcGF5bG9hZCBzaXplIGV4Y2VlZGVkJyk7XG4gIHRoaXNba0Vycm9yXS5jbG9zZUNvZGUgPSAxMDA5O1xuICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgaW5mbGF0ZU9uRGF0YSk7XG4gIHRoaXMucmVzZXQoKTtcbn1cblxuLyoqXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGB6bGliLkluZmxhdGVSYXdgIHN0cmVhbSBgJ2Vycm9yJ2AgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyIFRoZSBlbWl0dGVkIGVycm9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpbmZsYXRlT25FcnJvciAoZXJyKSB7XG4gIC8vXG4gIC8vIFRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBgWmxpYiNjbG9zZSgpYCBhcyB0aGUgaGFuZGxlIGlzIGF1dG9tYXRpY2FsbHlcbiAgLy8gY2xvc2VkIHdoZW4gYW4gZXJyb3IgaXMgZW1pdHRlZC5cbiAgLy9cbiAgdGhpc1trT3duZXJdLl9pbmZsYXRlID0gbnVsbDtcbiAgdGhpc1trQ2FsbGJhY2tdKGVycik7XG59XG4iXSwibmFtZXMiOlsic2FmZUJ1ZmZlciIsInJlcXVpcmUiLCJMaW1pdGVyIiwiemxpYiIsImJ1ZmZlclV0aWwiLCJCdWZmZXIiLCJUUkFJTEVSIiwiZnJvbSIsIkVNUFRZX0JMT0NLIiwia1dyaXRlSW5Qcm9ncmVzcyIsIlN5bWJvbCIsImtQZW5kaW5nQ2xvc2UiLCJrVG90YWxMZW5ndGgiLCJrQ2FsbGJhY2siLCJrQnVmZmVycyIsImtFcnJvciIsImtPd25lciIsInpsaWJMaW1pdGVyIiwiUGVyTWVzc2FnZURlZmxhdGUiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJpc1NlcnZlciIsIm1heFBheWxvYWQiLCJfbWF4UGF5bG9hZCIsIl9vcHRpb25zIiwiX3RocmVzaG9sZCIsInRocmVzaG9sZCIsInVuZGVmaW5lZCIsIl9pc1NlcnZlciIsIl9kZWZsYXRlIiwiX2luZmxhdGUiLCJwYXJhbXMiLCJjb25jdXJyZW5jeSIsImNvbmN1cnJlbmN5TGltaXQiLCJleHRlbnNpb25OYW1lIiwib2ZmZXIiLCJzZXJ2ZXJOb0NvbnRleHRUYWtlb3ZlciIsInNlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyIiwiY2xpZW50Tm9Db250ZXh0VGFrZW92ZXIiLCJjbGllbnRfbm9fY29udGV4dF90YWtlb3ZlciIsInNlcnZlck1heFdpbmRvd0JpdHMiLCJzZXJ2ZXJfbWF4X3dpbmRvd19iaXRzIiwiY2xpZW50TWF4V2luZG93Qml0cyIsImNsaWVudF9tYXhfd2luZG93X2JpdHMiLCJhY2NlcHQiLCJwYXJhbXNMaXN0Iiwibm9ybWFsaXplUGFyYW1zIiwiYWNjZXB0QXNTZXJ2ZXIiLCJhY2NlcHRBc0NsaWVudCIsImNsZWFudXAiLCJjbG9zZSIsImFjY2VwdGVkIiwicmVzdWx0Iiwic29tZSIsIkVycm9yIiwibWFwIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsImxlbmd0aCIsInBhcnNlSW50IiwiTnVtYmVyIiwiaXNOYU4iLCJaX01JTl9XSU5ET1dCSVRTIiwiWl9NQVhfV0lORE9XQklUUyIsImRlY29tcHJlc3MiLCJkYXRhIiwiZmluIiwiY2FsbGJhY2siLCJwdXNoIiwiZG9uZSIsIl9kZWNvbXByZXNzIiwiZXJyIiwiY29tcHJlc3MiLCJfY29tcHJlc3MiLCJlbmRwb2ludCIsIndpbmRvd0JpdHMiLCJaX0RFRkFVTFRfV0lORE9XQklUUyIsImNyZWF0ZUluZmxhdGVSYXciLCJvbiIsImluZmxhdGVPbkVycm9yIiwiaW5mbGF0ZU9uRGF0YSIsIndyaXRlIiwiZmx1c2giLCJjb25jYXQiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJjcmVhdGVEZWZsYXRlUmF3IiwibWVtTGV2ZWwiLCJsZXZlbCIsIlpfU1lOQ19GTFVTSCIsImRlZmxhdGVPbkRhdGEiLCJzbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjaHVuayIsImNsb3NlQ29kZSIsInJlbW92ZUxpc3RlbmVyIiwicmVzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/lib/PerMessageDeflate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ws/lib/Receiver.js":
/*!*****************************************!*\
  !*** ./node_modules/ws/lib/Receiver.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */ \nconst safeBuffer = __webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/ws/node_modules/safe-buffer/index.js\");\nconst PerMessageDeflate = __webpack_require__(/*! ./PerMessageDeflate */ \"(rsc)/./node_modules/ws/lib/PerMessageDeflate.js\");\nconst isValidUTF8 = __webpack_require__(/*! ./Validation */ \"(rsc)/./node_modules/ws/lib/Validation.js\");\nconst bufferUtil = __webpack_require__(/*! ./BufferUtil */ \"(rsc)/./node_modules/ws/lib/BufferUtil.js\");\nconst ErrorCodes = __webpack_require__(/*! ./ErrorCodes */ \"(rsc)/./node_modules/ws/lib/ErrorCodes.js\");\nconst constants = __webpack_require__(/*! ./Constants */ \"(rsc)/./node_modules/ws/lib/Constants.js\");\nconst Buffer = safeBuffer.Buffer;\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n/**\n * HyBi Receiver implementation.\n */ class Receiver {\n    /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} extensions An object containing the negotiated extensions\n   * @param {Number} maxPayload The maximum allowed message length\n   * @param {String} binaryType The type for binary data\n   */ constructor(extensions, maxPayload, binaryType){\n        this._binaryType = binaryType || constants.BINARY_TYPES[0];\n        this._extensions = extensions || {};\n        this._maxPayload = maxPayload | 0;\n        this._bufferedBytes = 0;\n        this._buffers = [];\n        this._compressed = false;\n        this._payloadLength = 0;\n        this._fragmented = 0;\n        this._masked = false;\n        this._fin = false;\n        this._mask = null;\n        this._opcode = 0;\n        this._totalPayloadLength = 0;\n        this._messageLength = 0;\n        this._fragments = [];\n        this._cleanupCallback = null;\n        this._hadError = false;\n        this._dead = false;\n        this._loop = false;\n        this.onmessage = null;\n        this.onclose = null;\n        this.onerror = null;\n        this.onping = null;\n        this.onpong = null;\n        this._state = GET_INFO;\n    }\n    /**\n   * Consumes bytes from the available buffered data.\n   *\n   * @param {Number} bytes The number of bytes to consume\n   * @return {Buffer} Consumed bytes\n   * @private\n   */ readBuffer(bytes) {\n        var offset = 0;\n        var dst;\n        var l;\n        this._bufferedBytes -= bytes;\n        if (bytes === this._buffers[0].length) return this._buffers.shift();\n        if (bytes < this._buffers[0].length) {\n            dst = this._buffers[0].slice(0, bytes);\n            this._buffers[0] = this._buffers[0].slice(bytes);\n            return dst;\n        }\n        dst = Buffer.allocUnsafe(bytes);\n        while(bytes > 0){\n            l = this._buffers[0].length;\n            if (bytes >= l) {\n                this._buffers[0].copy(dst, offset);\n                offset += l;\n                this._buffers.shift();\n            } else {\n                this._buffers[0].copy(dst, offset, 0, bytes);\n                this._buffers[0] = this._buffers[0].slice(bytes);\n            }\n            bytes -= l;\n        }\n        return dst;\n    }\n    /**\n   * Checks if the number of buffered bytes is bigger or equal than `n` and\n   * calls `cleanup` if necessary.\n   *\n   * @param {Number} n The number of bytes to check against\n   * @return {Boolean} `true` if `bufferedBytes >= n`, else `false`\n   * @private\n   */ hasBufferedBytes(n) {\n        if (this._bufferedBytes >= n) return true;\n        this._loop = false;\n        if (this._dead) this.cleanup(this._cleanupCallback);\n        return false;\n    }\n    /**\n   * Adds new data to the parser.\n   *\n   * @public\n   */ add(data) {\n        if (this._dead) return;\n        this._bufferedBytes += data.length;\n        this._buffers.push(data);\n        this.startLoop();\n    }\n    /**\n   * Starts the parsing loop.\n   *\n   * @private\n   */ startLoop() {\n        this._loop = true;\n        while(this._loop){\n            switch(this._state){\n                case GET_INFO:\n                    this.getInfo();\n                    break;\n                case GET_PAYLOAD_LENGTH_16:\n                    this.getPayloadLength16();\n                    break;\n                case GET_PAYLOAD_LENGTH_64:\n                    this.getPayloadLength64();\n                    break;\n                case GET_MASK:\n                    this.getMask();\n                    break;\n                case GET_DATA:\n                    this.getData();\n                    break;\n                default:\n                    this._loop = false;\n            }\n        }\n    }\n    /**\n   * Reads the first two bytes of a frame.\n   *\n   * @private\n   */ getInfo() {\n        if (!this.hasBufferedBytes(2)) return;\n        const buf = this.readBuffer(2);\n        if ((buf[0] & 0x30) !== 0x00) {\n            this.error(new Error(\"RSV2 and RSV3 must be clear\"), 1002);\n            return;\n        }\n        const compressed = (buf[0] & 0x40) === 0x40;\n        if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n            this.error(new Error(\"RSV1 must be clear\"), 1002);\n            return;\n        }\n        this._fin = (buf[0] & 0x80) === 0x80;\n        this._opcode = buf[0] & 0x0f;\n        this._payloadLength = buf[1] & 0x7f;\n        if (this._opcode === 0x00) {\n            if (compressed) {\n                this.error(new Error(\"RSV1 must be clear\"), 1002);\n                return;\n            }\n            if (!this._fragmented) {\n                this.error(new Error(`invalid opcode: ${this._opcode}`), 1002);\n                return;\n            } else {\n                this._opcode = this._fragmented;\n            }\n        } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n            if (this._fragmented) {\n                this.error(new Error(`invalid opcode: ${this._opcode}`), 1002);\n                return;\n            }\n            this._compressed = compressed;\n        } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n            if (!this._fin) {\n                this.error(new Error(\"FIN must be set\"), 1002);\n                return;\n            }\n            if (compressed) {\n                this.error(new Error(\"RSV1 must be clear\"), 1002);\n                return;\n            }\n            if (this._payloadLength > 0x7d) {\n                this.error(new Error(\"invalid payload length\"), 1002);\n                return;\n            }\n        } else {\n            this.error(new Error(`invalid opcode: ${this._opcode}`), 1002);\n            return;\n        }\n        if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n        this._masked = (buf[1] & 0x80) === 0x80;\n        if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n        else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n        else this.haveLength();\n    }\n    /**\n   * Gets extended payload length (7+16).\n   *\n   * @private\n   */ getPayloadLength16() {\n        if (!this.hasBufferedBytes(2)) return;\n        this._payloadLength = this.readBuffer(2).readUInt16BE(0, true);\n        this.haveLength();\n    }\n    /**\n   * Gets extended payload length (7+64).\n   *\n   * @private\n   */ getPayloadLength64() {\n        if (!this.hasBufferedBytes(8)) return;\n        const buf = this.readBuffer(8);\n        const num = buf.readUInt32BE(0, true);\n        //\n        // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n        // if payload length is greater than this number.\n        //\n        if (num > Math.pow(2, 53 - 32) - 1) {\n            this.error(new Error(\"max payload size exceeded\"), 1009);\n            return;\n        }\n        this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4, true);\n        this.haveLength();\n    }\n    /**\n   * Payload length has been read.\n   *\n   * @private\n   */ haveLength() {\n        if (this._opcode < 0x08 && this.maxPayloadExceeded(this._payloadLength)) {\n            return;\n        }\n        if (this._masked) this._state = GET_MASK;\n        else this._state = GET_DATA;\n    }\n    /**\n   * Reads mask bytes.\n   *\n   * @private\n   */ getMask() {\n        if (!this.hasBufferedBytes(4)) return;\n        this._mask = this.readBuffer(4);\n        this._state = GET_DATA;\n    }\n    /**\n   * Reads data bytes.\n   *\n   * @private\n   */ getData() {\n        var data = constants.EMPTY_BUFFER;\n        if (this._payloadLength) {\n            if (!this.hasBufferedBytes(this._payloadLength)) return;\n            data = this.readBuffer(this._payloadLength);\n            if (this._masked) bufferUtil.unmask(data, this._mask);\n        }\n        if (this._opcode > 0x07) {\n            this.controlMessage(data);\n        } else if (this._compressed) {\n            this._state = INFLATING;\n            this.decompress(data);\n        } else if (this.pushFragment(data)) {\n            this.dataMessage();\n        }\n    }\n    /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @private\n   */ decompress(data) {\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        perMessageDeflate.decompress(data, this._fin, (err, buf)=>{\n            if (err) {\n                this.error(err, err.closeCode === 1009 ? 1009 : 1007);\n                return;\n            }\n            if (this.pushFragment(buf)) this.dataMessage();\n            this.startLoop();\n        });\n    }\n    /**\n   * Handles a data message.\n   *\n   * @private\n   */ dataMessage() {\n        if (this._fin) {\n            const messageLength = this._messageLength;\n            const fragments = this._fragments;\n            this._totalPayloadLength = 0;\n            this._messageLength = 0;\n            this._fragmented = 0;\n            this._fragments = [];\n            if (this._opcode === 2) {\n                var data;\n                if (this._binaryType === \"nodebuffer\") {\n                    data = toBuffer(fragments, messageLength);\n                } else if (this._binaryType === \"arraybuffer\") {\n                    data = toArrayBuffer(toBuffer(fragments, messageLength));\n                } else {\n                    data = fragments;\n                }\n                this.onmessage(data);\n            } else {\n                const buf = toBuffer(fragments, messageLength);\n                if (!isValidUTF8(buf)) {\n                    this.error(new Error(\"invalid utf8 sequence\"), 1007);\n                    return;\n                }\n                this.onmessage(buf.toString());\n            }\n        }\n        this._state = GET_INFO;\n    }\n    /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @private\n   */ controlMessage(data) {\n        if (this._opcode === 0x08) {\n            if (data.length === 0) {\n                this.onclose(1000, \"\");\n                this._loop = false;\n                this.cleanup(this._cleanupCallback);\n            } else if (data.length === 1) {\n                this.error(new Error(\"invalid payload length\"), 1002);\n            } else {\n                const code = data.readUInt16BE(0, true);\n                if (!ErrorCodes.isValidErrorCode(code)) {\n                    this.error(new Error(`invalid status code: ${code}`), 1002);\n                    return;\n                }\n                const buf = data.slice(2);\n                if (!isValidUTF8(buf)) {\n                    this.error(new Error(\"invalid utf8 sequence\"), 1007);\n                    return;\n                }\n                this.onclose(code, buf.toString());\n                this._loop = false;\n                this.cleanup(this._cleanupCallback);\n            }\n            return;\n        }\n        if (this._opcode === 0x09) this.onping(data);\n        else this.onpong(data);\n        this._state = GET_INFO;\n    }\n    /**\n   * Handles an error.\n   *\n   * @param {Error} err The error\n   * @param {Number} code Close code\n   * @private\n   */ error(err, code) {\n        this.onerror(err, code);\n        this._hadError = true;\n        this._loop = false;\n        this.cleanup(this._cleanupCallback);\n    }\n    /**\n   * Checks payload size, disconnects socket when it exceeds `maxPayload`.\n   *\n   * @param {Number} length Payload length\n   * @private\n   */ maxPayloadExceeded(length) {\n        if (length === 0 || this._maxPayload < 1) return false;\n        const fullLength = this._totalPayloadLength + length;\n        if (fullLength <= this._maxPayload) {\n            this._totalPayloadLength = fullLength;\n            return false;\n        }\n        this.error(new Error(\"max payload size exceeded\"), 1009);\n        return true;\n    }\n    /**\n   * Appends a fragment in the fragments array after checking that the sum of\n   * fragment lengths does not exceed `maxPayload`.\n   *\n   * @param {Buffer} fragment The fragment to add\n   * @return {Boolean} `true` if `maxPayload` is not exceeded, else `false`\n   * @private\n   */ pushFragment(fragment) {\n        if (fragment.length === 0) return true;\n        const totalLength = this._messageLength + fragment.length;\n        if (this._maxPayload < 1 || totalLength <= this._maxPayload) {\n            this._messageLength = totalLength;\n            this._fragments.push(fragment);\n            return true;\n        }\n        this.error(new Error(\"max payload size exceeded\"), 1009);\n        return false;\n    }\n    /**\n   * Releases resources used by the receiver.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */ cleanup(cb) {\n        this._dead = true;\n        if (!this._hadError && (this._loop || this._state === INFLATING)) {\n            this._cleanupCallback = cb;\n        } else {\n            this._extensions = null;\n            this._fragments = null;\n            this._buffers = null;\n            this._mask = null;\n            this._cleanupCallback = null;\n            this.onmessage = null;\n            this.onclose = null;\n            this.onerror = null;\n            this.onping = null;\n            this.onpong = null;\n            if (cb) cb();\n        }\n    }\n}\nmodule.exports = Receiver;\n/**\n * Makes a buffer from a list of fragments.\n *\n * @param {Buffer[]} fragments The list of fragments composing the message\n * @param {Number} messageLength The length of the message\n * @return {Buffer}\n * @private\n */ function toBuffer(fragments, messageLength) {\n    if (fragments.length === 1) return fragments[0];\n    if (fragments.length > 1) return bufferUtil.concat(fragments, messageLength);\n    return constants.EMPTY_BUFFER;\n}\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n */ function toArrayBuffer(buf) {\n    if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {\n        return buf.buffer;\n    }\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/lib/Receiver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ws/lib/Sender.js":
/*!***************************************!*\
  !*** ./node_modules/ws/lib/Sender.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */ \nconst safeBuffer = __webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/ws/node_modules/safe-buffer/index.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst PerMessageDeflate = __webpack_require__(/*! ./PerMessageDeflate */ \"(rsc)/./node_modules/ws/lib/PerMessageDeflate.js\");\nconst bufferUtil = __webpack_require__(/*! ./BufferUtil */ \"(rsc)/./node_modules/ws/lib/BufferUtil.js\");\nconst ErrorCodes = __webpack_require__(/*! ./ErrorCodes */ \"(rsc)/./node_modules/ws/lib/ErrorCodes.js\");\nconst constants = __webpack_require__(/*! ./Constants */ \"(rsc)/./node_modules/ws/lib/Constants.js\");\nconst Buffer = safeBuffer.Buffer;\n/**\n * HyBi Sender implementation.\n */ class Sender {\n    /**\n   * Creates a Sender instance.\n   *\n   * @param {net.Socket} socket The connection socket\n   * @param {Object} extensions An object containing the negotiated extensions\n   */ constructor(socket, extensions){\n        this._extensions = extensions || {};\n        this._socket = socket;\n        this._firstFragment = true;\n        this._compress = false;\n        this._bufferedBytes = 0;\n        this._deflating = false;\n        this._queue = [];\n    }\n    /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to frame\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\n   * @public\n   */ static frame(data, options) {\n        const merge = data.length < 1024 || options.mask && options.readOnly;\n        var offset = options.mask ? 6 : 2;\n        var payloadLength = data.length;\n        if (data.length >= 65536) {\n            offset += 8;\n            payloadLength = 127;\n        } else if (data.length > 125) {\n            offset += 2;\n            payloadLength = 126;\n        }\n        const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n        target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n        if (options.rsv1) target[0] |= 0x40;\n        if (payloadLength === 126) {\n            target.writeUInt16BE(data.length, 2, true);\n        } else if (payloadLength === 127) {\n            target.writeUInt32BE(0, 2, true);\n            target.writeUInt32BE(data.length, 6, true);\n        }\n        if (!options.mask) {\n            target[1] = payloadLength;\n            if (merge) {\n                data.copy(target, offset);\n                return [\n                    target\n                ];\n            }\n            return [\n                target,\n                data\n            ];\n        }\n        const mask = crypto.randomBytes(4);\n        target[1] = payloadLength | 0x80;\n        target[offset - 4] = mask[0];\n        target[offset - 3] = mask[1];\n        target[offset - 2] = mask[2];\n        target[offset - 1] = mask[3];\n        if (merge) {\n            bufferUtil.mask(data, mask, target, offset, data.length);\n            return [\n                target\n            ];\n        }\n        bufferUtil.mask(data, mask, data, 0, data.length);\n        return [\n            target,\n            data\n        ];\n    }\n    /**\n   * Sends a close message to the other peer.\n   *\n   * @param {(Number|undefined)} code The status code component of the body\n   * @param {String} data The message component of the body\n   * @param {Boolean} mask Specifies whether or not to mask the message\n   * @param {Function} cb Callback\n   * @public\n   */ close(code, data, mask, cb) {\n        var buf;\n        if (code === undefined) {\n            code = 1000;\n        } else if (typeof code !== \"number\" || !ErrorCodes.isValidErrorCode(code)) {\n            throw new Error(\"first argument must be a valid error code number\");\n        }\n        if (data === undefined || data === \"\") {\n            if (code === 1000) {\n                buf = constants.EMPTY_BUFFER;\n            } else {\n                buf = Buffer.allocUnsafe(2);\n                buf.writeUInt16BE(code, 0, true);\n            }\n        } else {\n            buf = Buffer.allocUnsafe(2 + Buffer.byteLength(data));\n            buf.writeUInt16BE(code, 0, true);\n            buf.write(data, 2);\n        }\n        if (this._deflating) {\n            this.enqueue([\n                this.doClose,\n                buf,\n                mask,\n                cb\n            ]);\n        } else {\n            this.doClose(buf, mask, cb);\n        }\n    }\n    /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @private\n   */ doClose(data, mask, cb) {\n        this.sendFrame(Sender.frame(data, {\n            fin: true,\n            rsv1: false,\n            opcode: 0x08,\n            mask,\n            readOnly: false\n        }), cb);\n    }\n    /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @public\n   */ ping(data, mask) {\n        var readOnly = true;\n        if (!Buffer.isBuffer(data)) {\n            if (data instanceof ArrayBuffer) {\n                data = Buffer.from(data);\n            } else if (ArrayBuffer.isView(data)) {\n                data = viewToBuffer(data);\n            } else {\n                data = Buffer.from(data);\n                readOnly = false;\n            }\n        }\n        if (this._deflating) {\n            this.enqueue([\n                this.doPing,\n                data,\n                mask,\n                readOnly\n            ]);\n        } else {\n            this.doPing(data, mask, readOnly);\n        }\n    }\n    /**\n   * Frames and sends a ping message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\n   * @private\n   */ doPing(data, mask, readOnly) {\n        this.sendFrame(Sender.frame(data, {\n            fin: true,\n            rsv1: false,\n            opcode: 0x09,\n            mask,\n            readOnly\n        }));\n    }\n    /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @public\n   */ pong(data, mask) {\n        var readOnly = true;\n        if (!Buffer.isBuffer(data)) {\n            if (data instanceof ArrayBuffer) {\n                data = Buffer.from(data);\n            } else if (ArrayBuffer.isView(data)) {\n                data = viewToBuffer(data);\n            } else {\n                data = Buffer.from(data);\n                readOnly = false;\n            }\n        }\n        if (this._deflating) {\n            this.enqueue([\n                this.doPong,\n                data,\n                mask,\n                readOnly\n            ]);\n        } else {\n            this.doPong(data, mask, readOnly);\n        }\n    }\n    /**\n   * Frames and sends a pong message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\n   * @private\n   */ doPong(data, mask, readOnly) {\n        this.sendFrame(Sender.frame(data, {\n            fin: true,\n            rsv1: false,\n            opcode: 0x0a,\n            mask,\n            readOnly\n        }));\n    }\n    /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @public\n   */ send(data, options, cb) {\n        var opcode = options.binary ? 2 : 1;\n        var rsv1 = options.compress;\n        var readOnly = true;\n        if (!Buffer.isBuffer(data)) {\n            if (data instanceof ArrayBuffer) {\n                data = Buffer.from(data);\n            } else if (ArrayBuffer.isView(data)) {\n                data = viewToBuffer(data);\n            } else {\n                data = Buffer.from(data);\n                readOnly = false;\n            }\n        }\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        if (this._firstFragment) {\n            this._firstFragment = false;\n            if (rsv1 && perMessageDeflate) {\n                rsv1 = data.length >= perMessageDeflate._threshold;\n            }\n            this._compress = rsv1;\n        } else {\n            rsv1 = false;\n            opcode = 0;\n        }\n        if (options.fin) this._firstFragment = true;\n        if (perMessageDeflate) {\n            const opts = {\n                fin: options.fin,\n                rsv1,\n                opcode,\n                mask: options.mask,\n                readOnly\n            };\n            if (this._deflating) {\n                this.enqueue([\n                    this.dispatch,\n                    data,\n                    this._compress,\n                    opts,\n                    cb\n                ]);\n            } else {\n                this.dispatch(data, this._compress, opts, cb);\n            }\n        } else {\n            this.sendFrame(Sender.frame(data, {\n                fin: options.fin,\n                rsv1: false,\n                opcode,\n                mask: options.mask,\n                readOnly\n            }), cb);\n        }\n    }\n    /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} compress Specifies whether or not to compress `data`\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\n   * @param {Function} cb Callback\n   * @private\n   */ dispatch(data, compress, options, cb) {\n        if (!compress) {\n            this.sendFrame(Sender.frame(data, options), cb);\n            return;\n        }\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        this._deflating = true;\n        perMessageDeflate.compress(data, options.fin, (_, buf)=>{\n            options.readOnly = false;\n            this.sendFrame(Sender.frame(buf, options), cb);\n            this._deflating = false;\n            this.dequeue();\n        });\n    }\n    /**\n   * Executes queued send operations.\n   *\n   * @private\n   */ dequeue() {\n        while(!this._deflating && this._queue.length){\n            const params = this._queue.shift();\n            this._bufferedBytes -= params[1].length;\n            params[0].apply(this, params.slice(1));\n        }\n    }\n    /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */ enqueue(params) {\n        this._bufferedBytes += params[1].length;\n        this._queue.push(params);\n    }\n    /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} cb Callback\n   * @private\n   */ sendFrame(list, cb) {\n        if (list.length === 2) {\n            this._socket.write(list[0]);\n            this._socket.write(list[1], cb);\n        } else {\n            this._socket.write(list[0], cb);\n        }\n    }\n}\nmodule.exports = Sender;\n/**\n * Converts an `ArrayBuffer` view into a buffer.\n *\n * @param {(DataView|TypedArray)} view The view to convert\n * @return {Buffer} Converted view\n * @private\n */ function viewToBuffer(view) {\n    const buf = Buffer.from(view.buffer);\n    if (view.byteLength !== view.buffer.byteLength) {\n        return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);\n    }\n    return buf;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/lib/Sender.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ws/lib/Validation.js":
/*!*******************************************!*\
  !*** ./node_modules/ws/lib/Validation.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */ \ntry {\n    const isValidUTF8 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'utf-8-validate'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    module.exports = typeof isValidUTF8 === \"object\" ? isValidUTF8.Validation.isValidUTF8 // utf-8-validate@<3.0.0\n     : isValidUTF8;\n} catch (e) /* istanbul ignore next */ {\n    module.exports = ()=>true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd3MvbGliL1ZhbGlkYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Q0FJQyxHQUVEO0FBRUEsSUFBSTtJQUNGLE1BQU1BLGNBQWNDLG1CQUFPQSxDQUFDO0lBRTVCQyxPQUFPQyxPQUFPLEdBQUcsT0FBT0gsZ0JBQWdCLFdBQ3BDQSxZQUFZSSxVQUFVLENBQUNKLFdBQVcsQ0FBQyx3QkFBd0I7T0FDM0RBO0FBQ04sRUFBRSxPQUFPSyxHQUFHLHdCQUF3QixHQUFHO0lBQ3JDSCxPQUFPQyxPQUFPLEdBQUcsSUFBTTtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZGRpdC1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvd3MvbGliL1ZhbGlkYXRpb24uanM/OGQ3YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIHdzOiBhIG5vZGUuanMgd2Vic29ja2V0IGNsaWVudFxuICogQ29weXJpZ2h0KGMpIDIwMTEgRWluYXIgT3R0byBTdGFuZ3ZpayA8ZWluYXJvc0BnbWFpbC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnRyeSB7XG4gIGNvbnN0IGlzVmFsaWRVVEY4ID0gcmVxdWlyZSgndXRmLTgtdmFsaWRhdGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBpc1ZhbGlkVVRGOCA9PT0gJ29iamVjdCdcbiAgICA/IGlzVmFsaWRVVEY4LlZhbGlkYXRpb24uaXNWYWxpZFVURjggLy8gdXRmLTgtdmFsaWRhdGVAPDMuMC4wXG4gICAgOiBpc1ZhbGlkVVRGODtcbn0gY2F0Y2ggKGUpIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB0cnVlO1xufVxuIl0sIm5hbWVzIjpbImlzVmFsaWRVVEY4IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJWYWxpZGF0aW9uIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/lib/Validation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ws/lib/WebSocket.js":
/*!******************************************!*\
  !*** ./node_modules/ws/lib/WebSocket.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */ \nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst Ultron = __webpack_require__(/*! ultron */ \"(rsc)/./node_modules/ultron/index.js\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst PerMessageDeflate = __webpack_require__(/*! ./PerMessageDeflate */ \"(rsc)/./node_modules/ws/lib/PerMessageDeflate.js\");\nconst EventTarget = __webpack_require__(/*! ./EventTarget */ \"(rsc)/./node_modules/ws/lib/EventTarget.js\");\nconst Extensions = __webpack_require__(/*! ./Extensions */ \"(rsc)/./node_modules/ws/lib/Extensions.js\");\nconst constants = __webpack_require__(/*! ./Constants */ \"(rsc)/./node_modules/ws/lib/Constants.js\");\nconst Receiver = __webpack_require__(/*! ./Receiver */ \"(rsc)/./node_modules/ws/lib/Receiver.js\");\nconst Sender = __webpack_require__(/*! ./Sender */ \"(rsc)/./node_modules/ws/lib/Sender.js\");\nconst protocolVersions = [\n    8,\n    13\n];\nconst closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly.\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */ class WebSocket extends EventEmitter {\n    /**\n   * Create a new `WebSocket`.\n   *\n   * @param {String} address The URL to which to connect\n   * @param {(String|String[])} protocols The subprotocols\n   * @param {Object} options Connection options\n   */ constructor(address, protocols, options){\n        super();\n        if (!protocols) {\n            protocols = [];\n        } else if (typeof protocols === \"string\") {\n            protocols = [\n                protocols\n            ];\n        } else if (!Array.isArray(protocols)) {\n            options = protocols;\n            protocols = [];\n        }\n        this.readyState = WebSocket.CONNECTING;\n        this.bytesReceived = 0;\n        this.extensions = {};\n        this.protocol = \"\";\n        this._binaryType = constants.BINARY_TYPES[0];\n        this._finalize = this.finalize.bind(this);\n        this._closeFrameReceived = false;\n        this._closeFrameSent = false;\n        this._closeMessage = \"\";\n        this._closeTimer = null;\n        this._finalized = false;\n        this._closeCode = 1006;\n        this._receiver = null;\n        this._sender = null;\n        this._socket = null;\n        this._ultron = null;\n        if (Array.isArray(address)) {\n            initAsServerClient.call(this, address[0], address[1], options);\n        } else {\n            initAsClient.call(this, address, protocols, options);\n        }\n    }\n    get CONNECTING() {\n        return WebSocket.CONNECTING;\n    }\n    get CLOSING() {\n        return WebSocket.CLOSING;\n    }\n    get CLOSED() {\n        return WebSocket.CLOSED;\n    }\n    get OPEN() {\n        return WebSocket.OPEN;\n    }\n    /**\n   * @type {Number}\n   */ get bufferedAmount() {\n        var amount = 0;\n        if (this._socket) {\n            amount = this._socket.bufferSize + this._sender._bufferedBytes;\n        }\n        return amount;\n    }\n    /**\n   * This deviates from the WHATWG interface since ws doesn't support the required\n   * default \"blob\" type (instead we define a custom \"nodebuffer\" type).\n   *\n   * @type {String}\n   */ get binaryType() {\n        return this._binaryType;\n    }\n    set binaryType(type) {\n        if (constants.BINARY_TYPES.indexOf(type) < 0) return;\n        this._binaryType = type;\n        //\n        // Allow to change `binaryType` on the fly.\n        //\n        if (this._receiver) this._receiver._binaryType = type;\n    }\n    /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @private\n   */ setSocket(socket, head) {\n        socket.setTimeout(0);\n        socket.setNoDelay();\n        this._receiver = new Receiver(this.extensions, this._maxPayload, this.binaryType);\n        this._sender = new Sender(socket, this.extensions);\n        this._ultron = new Ultron(socket);\n        this._socket = socket;\n        this._ultron.on(\"close\", this._finalize);\n        this._ultron.on(\"error\", this._finalize);\n        this._ultron.on(\"end\", this._finalize);\n        if (head.length > 0) socket.unshift(head);\n        this._ultron.on(\"data\", (data)=>{\n            this.bytesReceived += data.length;\n            this._receiver.add(data);\n        });\n        this._receiver.onmessage = (data)=>this.emit(\"message\", data);\n        this._receiver.onping = (data)=>{\n            this.pong(data, !this._isServer, true);\n            this.emit(\"ping\", data);\n        };\n        this._receiver.onpong = (data)=>this.emit(\"pong\", data);\n        this._receiver.onclose = (code, reason)=>{\n            this._closeFrameReceived = true;\n            this._closeMessage = reason;\n            this._closeCode = code;\n            if (!this._finalized) this.close(code, reason);\n        };\n        this._receiver.onerror = (error, code)=>{\n            this._closeMessage = \"\";\n            this._closeCode = code;\n            //\n            // Ensure that the error is emitted even if `WebSocket#finalize()` has\n            // already been called.\n            //\n            this.readyState = WebSocket.CLOSING;\n            this.emit(\"error\", error);\n            this.finalize(true);\n        };\n        this.readyState = WebSocket.OPEN;\n        this.emit(\"open\");\n    }\n    /**\n   * Clean up and release internal resources.\n   *\n   * @param {(Boolean|Error)} error Indicates whether or not an error occurred\n   * @private\n   */ finalize(error) {\n        if (this._finalized) return;\n        this.readyState = WebSocket.CLOSING;\n        this._finalized = true;\n        if (typeof error === \"object\") this.emit(\"error\", error);\n        if (!this._socket) return this.emitClose();\n        clearTimeout(this._closeTimer);\n        this._closeTimer = null;\n        this._ultron.destroy();\n        this._ultron = null;\n        this._socket.on(\"error\", constants.NOOP);\n        if (!error) this._socket.end();\n        else this._socket.destroy();\n        this._socket = null;\n        this._sender = null;\n        this._receiver.cleanup(()=>this.emitClose());\n        this._receiver = null;\n    }\n    /**\n   * Emit the `close` event.\n   *\n   * @private\n   */ emitClose() {\n        this.readyState = WebSocket.CLOSED;\n        this.emit(\"close\", this._closeCode, this._closeMessage);\n        if (this.extensions[PerMessageDeflate.extensionName]) {\n            this.extensions[PerMessageDeflate.extensionName].cleanup();\n        }\n        this.extensions = null;\n        this.removeAllListeners();\n    }\n    /**\n   * Pause the socket stream.\n   *\n   * @public\n   */ pause() {\n        if (this.readyState !== WebSocket.OPEN) throw new Error(\"not opened\");\n        this._socket.pause();\n    }\n    /**\n   * Resume the socket stream\n   *\n   * @public\n   */ resume() {\n        if (this.readyState !== WebSocket.OPEN) throw new Error(\"not opened\");\n        this._socket.resume();\n    }\n    /**\n   * Start a closing handshake.\n   *\n   *            +----------+     +-----------+   +----------+\n   *     + - - -|ws.close()|---->|close frame|-->|ws.close()|- - - -\n   *            +----------+     +-----------+   +----------+       |\n   *     |      +----------+     +-----------+         |\n   *            |ws.close()|<----|close frame|<--------+            |\n   *            +----------+     +-----------+         |\n   *  CLOSING         |              +---+             |         CLOSING\n   *                  |          +---|fin|<------------+\n   *     |            |          |   +---+                          |\n   *                  |          |   +---+      +-------------+\n   *     |            +----------+-->|fin|----->|ws.finalize()| - - +\n   *                             |   +---+      +-------------+\n   *     |     +-------------+   |\n   *      - - -|ws.finalize()|<--+\n   *           +-------------+\n   *\n   * @param {Number} code Status code explaining why the connection is closing\n   * @param {String} data A string explaining why the connection is closing\n   * @public\n   */ close(code, data) {\n        if (this.readyState === WebSocket.CLOSED) return;\n        if (this.readyState === WebSocket.CONNECTING) {\n            this._req.abort();\n            this.finalize(new Error(\"closed before the connection is established\"));\n            return;\n        }\n        if (this.readyState === WebSocket.CLOSING) {\n            if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();\n            return;\n        }\n        this.readyState = WebSocket.CLOSING;\n        this._sender.close(code, data, !this._isServer, (err)=>{\n            //\n            // This error is handled by the `'error'` listener on the socket. We only\n            // want to know if the close frame has been sent here.\n            //\n            if (err) return;\n            this._closeFrameSent = true;\n            if (!this._finalized) {\n                if (this._closeFrameReceived) this._socket.end();\n                //\n                // Ensure that the connection is cleaned up even when the closing\n                // handshake fails.\n                //\n                this._closeTimer = setTimeout(this._finalize, closeTimeout, true);\n            }\n        });\n    }\n    /**\n   * Send a ping message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`\n   * @public\n   */ ping(data, mask, failSilently) {\n        if (this.readyState !== WebSocket.OPEN) {\n            if (failSilently) return;\n            throw new Error(\"not opened\");\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (mask === undefined) mask = !this._isServer;\n        this._sender.ping(data || constants.EMPTY_BUFFER, mask);\n    }\n    /**\n   * Send a pong message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`\n   * @public\n   */ pong(data, mask, failSilently) {\n        if (this.readyState !== WebSocket.OPEN) {\n            if (failSilently) return;\n            throw new Error(\"not opened\");\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (mask === undefined) mask = !this._isServer;\n        this._sender.pong(data || constants.EMPTY_BUFFER, mask);\n    }\n    /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when data is written out\n   * @public\n   */ send(data, options, cb) {\n        if (typeof options === \"function\") {\n            cb = options;\n            options = {};\n        }\n        if (this.readyState !== WebSocket.OPEN) {\n            if (cb) cb(new Error(\"not opened\"));\n            else throw new Error(\"not opened\");\n            return;\n        }\n        if (typeof data === \"number\") data = data.toString();\n        const opts = Object.assign({\n            binary: typeof data !== \"string\",\n            mask: !this._isServer,\n            compress: true,\n            fin: true\n        }, options);\n        if (!this.extensions[PerMessageDeflate.extensionName]) {\n            opts.compress = false;\n        }\n        this._sender.send(data || constants.EMPTY_BUFFER, opts, cb);\n    }\n    /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */ terminate() {\n        if (this.readyState === WebSocket.CLOSED) return;\n        if (this.readyState === WebSocket.CONNECTING) {\n            this._req.abort();\n            this.finalize(new Error(\"closed before the connection is established\"));\n            return;\n        }\n        this.finalize(true);\n    }\n}\nWebSocket.CONNECTING = 0;\nWebSocket.OPEN = 1;\nWebSocket.CLOSING = 2;\nWebSocket.CLOSED = 3;\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n[\n    \"open\",\n    \"error\",\n    \"close\",\n    \"message\"\n].forEach((method)=>{\n    Object.defineProperty(WebSocket.prototype, `on${method}`, {\n        /**\n     * Return the listener of the event.\n     *\n     * @return {(Function|undefined)} The event listener or `undefined`\n     * @public\n     */ get () {\n            const listeners = this.listeners(method);\n            for(var i = 0; i < listeners.length; i++){\n                if (listeners[i]._listener) return listeners[i]._listener;\n            }\n        },\n        /**\n     * Add a listener for the event.\n     *\n     * @param {Function} listener The listener to add\n     * @public\n     */ set (listener) {\n            const listeners = this.listeners(method);\n            for(var i = 0; i < listeners.length; i++){\n                //\n                // Remove only the listeners added via `addEventListener`.\n                //\n                if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n            }\n            this.addEventListener(method, listener);\n        }\n    });\n});\nWebSocket.prototype.addEventListener = EventTarget.addEventListener;\nWebSocket.prototype.removeEventListener = EventTarget.removeEventListener;\nmodule.exports = WebSocket;\n/**\n * Initialize a WebSocket server client.\n *\n * @param {http.IncomingMessage} req The request object\n * @param {net.Socket} socket The network socket between the server and client\n * @param {Buffer} head The first packet of the upgraded stream\n * @param {Object} options WebSocket attributes\n * @param {Number} options.protocolVersion The WebSocket protocol version\n * @param {Object} options.extensions The negotiated extensions\n * @param {Number} options.maxPayload The maximum allowed message size\n * @param {String} options.protocol The chosen subprotocol\n * @private\n */ function initAsServerClient(socket, head, options) {\n    this.protocolVersion = options.protocolVersion;\n    this._maxPayload = options.maxPayload;\n    this.extensions = options.extensions;\n    this.protocol = options.protocol;\n    this._isServer = true;\n    this.setSocket(socket, head);\n}\n/**\n * Initialize a WebSocket client.\n *\n * @param {String} address The URL to which to connect\n * @param {String[]} protocols The list of subprotocols\n * @param {Object} options Connection options\n * @param {String} options.protocol Value of the `Sec-WebSocket-Protocol` header\n * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n * @param {Number} options.handshakeTimeout Timeout in milliseconds for the handshake request\n * @param {String} options.localAddress Local interface to bind for network connections\n * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version` header\n * @param {Object} options.headers An object containing request headers\n * @param {String} options.origin Value of the `Origin` or `Sec-WebSocket-Origin` header\n * @param {http.Agent} options.agent Use the specified Agent\n * @param {String} options.host Value of the `Host` header\n * @param {Number} options.family IP address family to use during hostname lookup (4 or 6).\n * @param {Function} options.checkServerIdentity A function to validate the server hostname\n * @param {Boolean} options.rejectUnauthorized Verify or not the server certificate\n * @param {String} options.passphrase The passphrase for the private key or pfx\n * @param {String} options.ciphers The ciphers to use or exclude\n * @param {String} options.ecdhCurve The curves for ECDH key agreement to use or exclude\n * @param {(String|String[]|Buffer|Buffer[])} options.cert The certificate key\n * @param {(String|String[]|Buffer|Buffer[])} options.key The private key\n * @param {(String|Buffer)} options.pfx The private key, certificate, and CA certs\n * @param {(String|String[]|Buffer|Buffer[])} options.ca Trusted certificates\n * @private\n */ function initAsClient(address, protocols, options) {\n    options = Object.assign({\n        protocolVersion: protocolVersions[1],\n        protocol: protocols.join(\",\"),\n        perMessageDeflate: true,\n        handshakeTimeout: null,\n        localAddress: null,\n        headers: null,\n        family: null,\n        origin: null,\n        agent: null,\n        host: null,\n        //\n        // SSL options.\n        //\n        checkServerIdentity: null,\n        rejectUnauthorized: null,\n        passphrase: null,\n        ciphers: null,\n        ecdhCurve: null,\n        cert: null,\n        key: null,\n        pfx: null,\n        ca: null\n    }, options);\n    if (protocolVersions.indexOf(options.protocolVersion) === -1) {\n        throw new Error(`unsupported protocol version: ${options.protocolVersion} ` + `(supported versions: ${protocolVersions.join(\", \")})`);\n    }\n    this.protocolVersion = options.protocolVersion;\n    this._isServer = false;\n    this.url = address;\n    const serverUrl = url.parse(address);\n    const isUnixSocket = serverUrl.protocol === \"ws+unix:\";\n    if (!serverUrl.host && (!isUnixSocket || !serverUrl.path)) {\n        throw new Error(\"invalid url\");\n    }\n    const isSecure = serverUrl.protocol === \"wss:\" || serverUrl.protocol === \"https:\";\n    const key = crypto.randomBytes(16).toString(\"base64\");\n    const httpObj = isSecure ? https : http;\n    var perMessageDeflate;\n    const requestOptions = {\n        port: serverUrl.port || (isSecure ? 443 : 80),\n        host: serverUrl.hostname,\n        path: \"/\",\n        headers: {\n            \"Sec-WebSocket-Version\": options.protocolVersion,\n            \"Sec-WebSocket-Key\": key,\n            \"Connection\": \"Upgrade\",\n            \"Upgrade\": \"websocket\"\n        }\n    };\n    if (options.headers) Object.assign(requestOptions.headers, options.headers);\n    if (options.perMessageDeflate) {\n        perMessageDeflate = new PerMessageDeflate(options.perMessageDeflate !== true ? options.perMessageDeflate : {}, false);\n        requestOptions.headers[\"Sec-WebSocket-Extensions\"] = Extensions.format({\n            [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n        });\n    }\n    if (options.protocol) {\n        requestOptions.headers[\"Sec-WebSocket-Protocol\"] = options.protocol;\n    }\n    if (options.origin) {\n        if (options.protocolVersion < 13) {\n            requestOptions.headers[\"Sec-WebSocket-Origin\"] = options.origin;\n        } else {\n            requestOptions.headers.Origin = options.origin;\n        }\n    }\n    if (options.host) requestOptions.headers.Host = options.host;\n    if (serverUrl.auth) requestOptions.auth = serverUrl.auth;\n    if (options.localAddress) requestOptions.localAddress = options.localAddress;\n    if (options.family) requestOptions.family = options.family;\n    if (isUnixSocket) {\n        const parts = serverUrl.path.split(\":\");\n        requestOptions.socketPath = parts[0];\n        requestOptions.path = parts[1];\n    } else if (serverUrl.path) {\n        //\n        // Make sure that path starts with `/`.\n        //\n        if (serverUrl.path.charAt(0) !== \"/\") {\n            requestOptions.path = `/${serverUrl.path}`;\n        } else {\n            requestOptions.path = serverUrl.path;\n        }\n    }\n    var agent = options.agent;\n    //\n    // A custom agent is required for these options.\n    //\n    if (options.rejectUnauthorized != null || options.checkServerIdentity || options.passphrase || options.ciphers || options.ecdhCurve || options.cert || options.key || options.pfx || options.ca) {\n        if (options.passphrase) requestOptions.passphrase = options.passphrase;\n        if (options.ciphers) requestOptions.ciphers = options.ciphers;\n        if (options.ecdhCurve) requestOptions.ecdhCurve = options.ecdhCurve;\n        if (options.cert) requestOptions.cert = options.cert;\n        if (options.key) requestOptions.key = options.key;\n        if (options.pfx) requestOptions.pfx = options.pfx;\n        if (options.ca) requestOptions.ca = options.ca;\n        if (options.checkServerIdentity) {\n            requestOptions.checkServerIdentity = options.checkServerIdentity;\n        }\n        if (options.rejectUnauthorized != null) {\n            requestOptions.rejectUnauthorized = options.rejectUnauthorized;\n        }\n        if (!agent) agent = new httpObj.Agent(requestOptions);\n    }\n    if (agent) requestOptions.agent = agent;\n    this._req = httpObj.get(requestOptions);\n    if (options.handshakeTimeout) {\n        this._req.setTimeout(options.handshakeTimeout, ()=>{\n            this._req.abort();\n            this.finalize(new Error(\"opening handshake has timed out\"));\n        });\n    }\n    this._req.on(\"error\", (error)=>{\n        if (this._req.aborted) return;\n        this._req = null;\n        this.finalize(error);\n    });\n    this._req.on(\"response\", (res)=>{\n        if (!this.emit(\"unexpected-response\", this._req, res)) {\n            this._req.abort();\n            this.finalize(new Error(`unexpected server response (${res.statusCode})`));\n        }\n    });\n    this._req.on(\"upgrade\", (res, socket, head)=>{\n        this.emit(\"headers\", res.headers, res);\n        //\n        // The user may have closed the connection from a listener of the `headers`\n        // event.\n        //\n        if (this.readyState !== WebSocket.CONNECTING) return;\n        this._req = null;\n        const digest = crypto.createHash(\"sha1\").update(key + constants.GUID, \"binary\").digest(\"base64\");\n        if (res.headers[\"sec-websocket-accept\"] !== digest) {\n            socket.destroy();\n            return this.finalize(new Error(\"invalid server key\"));\n        }\n        const serverProt = res.headers[\"sec-websocket-protocol\"];\n        const protList = (options.protocol || \"\").split(/, */);\n        var protError;\n        if (!options.protocol && serverProt) {\n            protError = \"server sent a subprotocol even though none requested\";\n        } else if (options.protocol && !serverProt) {\n            protError = \"server sent no subprotocol even though requested\";\n        } else if (serverProt && protList.indexOf(serverProt) === -1) {\n            protError = \"server responded with an invalid protocol\";\n        }\n        if (protError) {\n            socket.destroy();\n            return this.finalize(new Error(protError));\n        }\n        if (serverProt) this.protocol = serverProt;\n        if (perMessageDeflate) {\n            try {\n                const serverExtensions = Extensions.parse(res.headers[\"sec-websocket-extensions\"]);\n                if (serverExtensions[PerMessageDeflate.extensionName]) {\n                    perMessageDeflate.accept(serverExtensions[PerMessageDeflate.extensionName]);\n                    this.extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n                }\n            } catch (err) {\n                socket.destroy();\n                this.finalize(new Error(\"invalid Sec-WebSocket-Extensions header\"));\n                return;\n            }\n        }\n        this.setSocket(socket, head);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/lib/WebSocket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ws/lib/WebSocketServer.js":
/*!************************************************!*\
  !*** ./node_modules/ws/lib/WebSocketServer.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */ \nconst safeBuffer = __webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/ws/node_modules/safe-buffer/index.js\");\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst Ultron = __webpack_require__(/*! ultron */ \"(rsc)/./node_modules/ultron/index.js\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst PerMessageDeflate = __webpack_require__(/*! ./PerMessageDeflate */ \"(rsc)/./node_modules/ws/lib/PerMessageDeflate.js\");\nconst Extensions = __webpack_require__(/*! ./Extensions */ \"(rsc)/./node_modules/ws/lib/Extensions.js\");\nconst constants = __webpack_require__(/*! ./Constants */ \"(rsc)/./node_modules/ws/lib/Constants.js\");\nconst WebSocket = __webpack_require__(/*! ./WebSocket */ \"(rsc)/./node_modules/ws/lib/WebSocket.js\");\nconst Buffer = safeBuffer.Buffer;\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */ class WebSocketServer extends EventEmitter {\n    /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {String} options.host The hostname where to bind the server\n   * @param {Number} options.port The port where to bind the server\n   * @param {http.Server} options.server A pre-created HTTP/S server to use\n   * @param {Function} options.verifyClient An hook to reject connections\n   * @param {Function} options.handleProtocols An hook to handle protocols\n   * @param {String} options.path Accept only connections matching this path\n   * @param {Boolean} options.noServer Enable no server mode\n   * @param {Boolean} options.clientTracking Specifies whether or not to track clients\n   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n   * @param {Number} options.maxPayload The maximum allowed message size\n   * @param {Function} callback A listener for the `listening` event\n   */ constructor(options, callback){\n        super();\n        options = Object.assign({\n            maxPayload: 100 * 1024 * 1024,\n            perMessageDeflate: false,\n            handleProtocols: null,\n            clientTracking: true,\n            verifyClient: null,\n            noServer: false,\n            backlog: null,\n            server: null,\n            host: null,\n            path: null,\n            port: null\n        }, options);\n        if (options.port == null && !options.server && !options.noServer) {\n            throw new TypeError(\"missing or invalid options\");\n        }\n        if (options.port != null) {\n            this._server = http.createServer((req, res)=>{\n                const body = http.STATUS_CODES[426];\n                res.writeHead(426, {\n                    \"Content-Length\": body.length,\n                    \"Content-Type\": \"text/plain\"\n                });\n                res.end(body);\n            });\n            this._server.listen(options.port, options.host, options.backlog, callback);\n        } else if (options.server) {\n            this._server = options.server;\n        }\n        if (this._server) {\n            this._ultron = new Ultron(this._server);\n            this._ultron.on(\"listening\", ()=>this.emit(\"listening\"));\n            this._ultron.on(\"error\", (err)=>this.emit(\"error\", err));\n            this._ultron.on(\"upgrade\", (req, socket, head)=>{\n                this.handleUpgrade(req, socket, head, (client)=>{\n                    this.emit(\"connection\", client, req);\n                });\n            });\n        }\n        if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n        if (options.clientTracking) this.clients = new Set();\n        this.options = options;\n    }\n    /**\n   * Close the server.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */ close(cb) {\n        //\n        // Terminate all associated clients.\n        //\n        if (this.clients) {\n            for (const client of this.clients)client.terminate();\n        }\n        const server = this._server;\n        if (server) {\n            this._ultron.destroy();\n            this._ultron = this._server = null;\n            //\n            // Close the http server if it was internally created.\n            //\n            if (this.options.port != null) return server.close(cb);\n        }\n        if (cb) cb();\n    }\n    /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */ shouldHandle(req) {\n        if (this.options.path && url.parse(req.url).pathname !== this.options.path) {\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */ handleUpgrade(req, socket, head, cb) {\n        socket.on(\"error\", socketError);\n        const version = +req.headers[\"sec-websocket-version\"];\n        const extensions = {};\n        if (req.method !== \"GET\" || req.headers.upgrade.toLowerCase() !== \"websocket\" || !req.headers[\"sec-websocket-key\"] || version !== 8 && version !== 13 || !this.shouldHandle(req)) {\n            return abortConnection(socket, 400);\n        }\n        if (this.options.perMessageDeflate) {\n            const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);\n            try {\n                const offers = Extensions.parse(req.headers[\"sec-websocket-extensions\"]);\n                if (offers[PerMessageDeflate.extensionName]) {\n                    perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n                    extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n                }\n            } catch (err) {\n                return abortConnection(socket, 400);\n            }\n        }\n        var protocol = (req.headers[\"sec-websocket-protocol\"] || \"\").split(/, */);\n        //\n        // Optionally call external protocol selection handler.\n        //\n        if (this.options.handleProtocols) {\n            protocol = this.options.handleProtocols(protocol, req);\n            if (protocol === false) return abortConnection(socket, 401);\n        } else {\n            protocol = protocol[0];\n        }\n        //\n        // Optionally call external client verification handler.\n        //\n        if (this.options.verifyClient) {\n            const info = {\n                origin: req.headers[`${version === 8 ? \"sec-websocket-origin\" : \"origin\"}`],\n                secure: !!(req.connection.authorized || req.connection.encrypted),\n                req\n            };\n            if (this.options.verifyClient.length === 2) {\n                this.options.verifyClient(info, (verified, code, message)=>{\n                    if (!verified) return abortConnection(socket, code || 401, message);\n                    this.completeUpgrade(protocol, extensions, version, req, socket, head, cb);\n                });\n                return;\n            }\n            if (!this.options.verifyClient(info)) return abortConnection(socket, 401);\n        }\n        this.completeUpgrade(protocol, extensions, version, req, socket, head, cb);\n    }\n    /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} protocol The chosen subprotocol\n   * @param {Object} extensions The accepted extensions\n   * @param {Number} version The WebSocket protocol version\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @private\n   */ completeUpgrade(protocol, extensions, version, req, socket, head, cb) {\n        //\n        // Destroy the socket if the client has already sent a FIN packet.\n        //\n        if (!socket.readable || !socket.writable) return socket.destroy();\n        const key = crypto.createHash(\"sha1\").update(req.headers[\"sec-websocket-key\"] + constants.GUID, \"binary\").digest(\"base64\");\n        const headers = [\n            \"HTTP/1.1 101 Switching Protocols\",\n            \"Upgrade: websocket\",\n            \"Connection: Upgrade\",\n            `Sec-WebSocket-Accept: ${key}`\n        ];\n        if (protocol) headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        if (extensions[PerMessageDeflate.extensionName]) {\n            const params = extensions[PerMessageDeflate.extensionName].params;\n            const value = Extensions.format({\n                [PerMessageDeflate.extensionName]: [\n                    params\n                ]\n            });\n            headers.push(`Sec-WebSocket-Extensions: ${value}`);\n        }\n        //\n        // Allow external modification/inspection of handshake headers.\n        //\n        this.emit(\"headers\", headers, req);\n        socket.write(headers.concat(\"\\r\\n\").join(\"\\r\\n\"));\n        const client = new WebSocket([\n            socket,\n            head\n        ], null, {\n            maxPayload: this.options.maxPayload,\n            protocolVersion: version,\n            extensions,\n            protocol\n        });\n        if (this.clients) {\n            this.clients.add(client);\n            client.on(\"close\", ()=>this.clients.delete(client));\n        }\n        socket.removeListener(\"error\", socketError);\n        cb(client);\n    }\n}\nmodule.exports = WebSocketServer;\n/**\n * Handle premature socket errors.\n *\n * @private\n */ function socketError() {\n    this.destroy();\n}\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {net.Socket} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @private\n */ function abortConnection(socket, code, message) {\n    if (socket.writable) {\n        message = message || http.STATUS_CODES[code];\n        socket.write(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` + \"Connection: close\\r\\n\" + \"Content-type: text/html\\r\\n\" + `Content-Length: ${Buffer.byteLength(message)}\\r\\n` + \"\\r\\n\" + message);\n    }\n    socket.removeListener(\"error\", socketError);\n    socket.destroy();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd3MvbGliL1dlYlNvY2tldFNlcnZlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7OztDQUlDLEdBRUQ7QUFFQSxNQUFNQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUMzQixNQUFNQyxlQUFlRCxtQkFBT0EsQ0FBQztBQUM3QixNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQztBQUN2QixNQUFNRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUN2QixNQUFNSSxPQUFPSixtQkFBT0EsQ0FBQztBQUNyQixNQUFNSyxNQUFNTCxtQkFBT0EsQ0FBQztBQUVwQixNQUFNTSxvQkFBb0JOLG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU1PLGFBQWFQLG1CQUFPQSxDQUFDO0FBQzNCLE1BQU1RLFlBQVlSLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1TLFlBQVlULG1CQUFPQSxDQUFDO0FBRTFCLE1BQU1VLFNBQVNYLFdBQVdXLE1BQU07QUFFaEM7Ozs7Q0FJQyxHQUNELE1BQU1DLHdCQUF3QlY7SUFDNUI7Ozs7Ozs7Ozs7Ozs7OztHQWVDLEdBQ0RXLFlBQWFDLE9BQU8sRUFBRUMsUUFBUSxDQUFFO1FBQzlCLEtBQUs7UUFFTEQsVUFBVUUsT0FBT0MsTUFBTSxDQUFDO1lBQ3RCQyxZQUFZLE1BQU0sT0FBTztZQUN6QkMsbUJBQW1CO1lBQ25CQyxpQkFBaUI7WUFDakJDLGdCQUFnQjtZQUNoQkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLFNBQVM7WUFDVEMsUUFBUTtZQUNSQyxNQUFNO1lBQ05DLE1BQU07WUFDTkMsTUFBTTtRQUNSLEdBQUdkO1FBRUgsSUFBSUEsUUFBUWMsSUFBSSxJQUFJLFFBQVEsQ0FBQ2QsUUFBUVcsTUFBTSxJQUFJLENBQUNYLFFBQVFTLFFBQVEsRUFBRTtZQUNoRSxNQUFNLElBQUlNLFVBQVU7UUFDdEI7UUFFQSxJQUFJZixRQUFRYyxJQUFJLElBQUksTUFBTTtZQUN4QixJQUFJLENBQUNFLE9BQU8sR0FBR3pCLEtBQUswQixZQUFZLENBQUMsQ0FBQ0Ms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QUNGO0FBRUFtRCxPQUFPQyxPQUFPLEdBQUd2RjtBQUVqQjs7OztDQUlDLEdBQ0QsU0FBUzZDO0lBQ1AsSUFBSSxDQUFDSixPQUFPO0FBQ2Q7QUFFQTs7Ozs7OztDQU9DLEdBQ0QsU0FBU1csZ0JBQWlCcEIsTUFBTSxFQUFFaUMsSUFBSSxFQUFFQyxPQUFPO0lBQzdDLElBQUlsQyxPQUFPcUMsUUFBUSxFQUFFO1FBQ25CSCxVQUFVQSxXQUFXekUsS0FBSzhCLFlBQVksQ0FBQzBDLEtBQUs7UUFDNUNqQyxPQUFPK0MsS0FBSyxDQUNWLENBQUMsU0FBUyxFQUFFZCxLQUFLLENBQUMsRUFBRXhFLEtBQUs4QixZQUFZLENBQUMwQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQ2pELDBCQUNBLGdDQUNBLENBQUMsZ0JBQWdCLEVBQUVsRSxPQUFPeUYsVUFBVSxDQUFDdEIsU0FBUyxJQUFJLENBQUMsR0FDbkQsU0FDQUE7SUFFSjtJQUVBbEMsT0FBT3FELGNBQWMsQ0FBQyxTQUFTeEM7SUFDL0JiLE9BQU9TLE9BQU87QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3dzL2xpYi9XZWJTb2NrZXRTZXJ2ZXIuanM/YmExOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIHdzOiBhIG5vZGUuanMgd2Vic29ja2V0IGNsaWVudFxuICogQ29weXJpZ2h0KGMpIDIwMTEgRWluYXIgT3R0byBTdGFuZ3ZpayA8ZWluYXJvc0BnbWFpbC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHNhZmVCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IFVsdHJvbiA9IHJlcXVpcmUoJ3VsdHJvbicpO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbmNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuXG5jb25zdCBQZXJNZXNzYWdlRGVmbGF0ZSA9IHJlcXVpcmUoJy4vUGVyTWVzc2FnZURlZmxhdGUnKTtcbmNvbnN0IEV4dGVuc2lvbnMgPSByZXF1aXJlKCcuL0V4dGVuc2lvbnMnKTtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vQ29uc3RhbnRzJyk7XG5jb25zdCBXZWJTb2NrZXQgPSByZXF1aXJlKCcuL1dlYlNvY2tldCcpO1xuXG5jb25zdCBCdWZmZXIgPSBzYWZlQnVmZmVyLkJ1ZmZlcjtcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBXZWJTb2NrZXQgc2VydmVyLlxuICpcbiAqIEBleHRlbmRzIEV2ZW50RW1pdHRlclxuICovXG5jbGFzcyBXZWJTb2NrZXRTZXJ2ZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAvKipcbiAgICogQ3JlYXRlIGEgYFdlYlNvY2tldFNlcnZlcmAgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIENvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5ob3N0IFRoZSBob3N0bmFtZSB3aGVyZSB0byBiaW5kIHRoZSBzZXJ2ZXJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucG9ydCBUaGUgcG9ydCB3aGVyZSB0byBiaW5kIHRoZSBzZXJ2ZXJcbiAgICogQHBhcmFtIHtodHRwLlNlcnZlcn0gb3B0aW9ucy5zZXJ2ZXIgQSBwcmUtY3JlYXRlZCBIVFRQL1Mgc2VydmVyIHRvIHVzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLnZlcmlmeUNsaWVudCBBbiBob29rIHRvIHJlamVjdCBjb25uZWN0aW9uc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLmhhbmRsZVByb3RvY29scyBBbiBob29rIHRvIGhhbmRsZSBwcm90b2NvbHNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMucGF0aCBBY2NlcHQgb25seSBjb25uZWN0aW9ucyBtYXRjaGluZyB0aGlzIHBhdGhcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLm5vU2VydmVyIEVuYWJsZSBubyBzZXJ2ZXIgbW9kZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuY2xpZW50VHJhY2tpbmcgU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIHRyYWNrIGNsaWVudHNcbiAgICogQHBhcmFtIHsoQm9vbGVhbnxPYmplY3QpfSBvcHRpb25zLnBlck1lc3NhZ2VEZWZsYXRlIEVuYWJsZS9kaXNhYmxlIHBlcm1lc3NhZ2UtZGVmbGF0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5tYXhQYXlsb2FkIFRoZSBtYXhpbXVtIGFsbG93ZWQgbWVzc2FnZSBzaXplXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIEEgbGlzdGVuZXIgZm9yIHRoZSBgbGlzdGVuaW5nYCBldmVudFxuICAgKi9cbiAgY29uc3RydWN0b3IgKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIG1heFBheWxvYWQ6IDEwMCAqIDEwMjQgKiAxMDI0LFxuICAgICAgcGVyTWVzc2FnZURlZmxhdGU6IGZhbHNlLFxuICAgICAgaGFuZGxlUHJvdG9jb2xzOiBudWxsLFxuICAgICAgY2xpZW50VHJhY2tpbmc6IHRydWUsXG4gICAgICB2ZXJpZnlDbGllbnQ6IG51bGwsXG4gICAgICBub1NlcnZlcjogZmFsc2UsXG4gICAgICBiYWNrbG9nOiBudWxsLCAvLyB1c2UgZGVmYXVsdCAoNTExIGFzIGltcGxlbWVudGVkIGluIG5ldC5qcylcbiAgICAgIHNlcnZlcjogbnVsbCxcbiAgICAgIGhvc3Q6IG51bGwsXG4gICAgICBwYXRoOiBudWxsLFxuICAgICAgcG9ydDogbnVsbFxuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgaWYgKG9wdGlvbnMucG9ydCA9PSBudWxsICYmICFvcHRpb25zLnNlcnZlciAmJiAhb3B0aW9ucy5ub1NlcnZlcikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWlzc2luZyBvciBpbnZhbGlkIG9wdGlvbnMnKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5wb3J0ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3NlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKChyZXEsIHJlcykgPT4ge1xuICAgICAgICBjb25zdCBib2R5ID0gaHR0cC5TVEFUVVNfQ09ERVNbNDI2XTtcblxuICAgICAgICByZXMud3JpdGVIZWFkKDQyNiwge1xuICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLFxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbidcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5lbmQoYm9keSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX3NlcnZlci5saXN0ZW4ob3B0aW9ucy5wb3J0LCBvcHRpb25zLmhvc3QsIG9wdGlvbnMuYmFja2xvZywgY2FsbGJhY2spO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5zZXJ2ZXIpIHtcbiAgICAgIHRoaXMuX3NlcnZlciA9IG9wdGlvbnMuc2VydmVyO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9zZXJ2ZXIpIHtcbiAgICAgIHRoaXMuX3VsdHJvbiA9IG5ldyBVbHRyb24odGhpcy5fc2VydmVyKTtcbiAgICAgIHRoaXMuX3VsdHJvbi5vbignbGlzdGVuaW5nJywgKCkgPT4gdGhpcy5lbWl0KCdsaXN0ZW5pbmcnKSk7XG4gICAgICB0aGlzLl91bHRyb24ub24oJ2Vycm9yJywgKGVycikgPT4gdGhpcy5lbWl0KCdlcnJvcicsIGVycikpO1xuICAgICAgdGhpcy5fdWx0cm9uLm9uKCd1cGdyYWRlJywgKHJlcSwgc29ja2V0LCBoZWFkKSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlVXBncmFkZShyZXEsIHNvY2tldCwgaGVhZCwgKGNsaWVudCkgPT4ge1xuICAgICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdGlvbicsIGNsaWVudCwgcmVxKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSA9PT0gdHJ1ZSkgb3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSA9IHt9O1xuICAgIGlmIChvcHRpb25zLmNsaWVudFRyYWNraW5nKSB0aGlzLmNsaWVudHMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiBDYWxsYmFja1xuICAgKiBAcHVibGljXG4gICAqL1xuICBjbG9zZSAoY2IpIHtcbiAgICAvL1xuICAgIC8vIFRlcm1pbmF0ZSBhbGwgYXNzb2NpYXRlZCBjbGllbnRzLlxuICAgIC8vXG4gICAgaWYgKHRoaXMuY2xpZW50cykge1xuICAgICAgZm9yIChjb25zdCBjbGllbnQgb2YgdGhpcy5jbGllbnRzKSBjbGllbnQudGVybWluYXRlKCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VydmVyID0gdGhpcy5fc2VydmVyO1xuXG4gICAgaWYgKHNlcnZlcikge1xuICAgICAgdGhpcy5fdWx0cm9uLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuX3VsdHJvbiA9IHRoaXMuX3NlcnZlciA9IG51bGw7XG5cbiAgICAgIC8vXG4gICAgICAvLyBDbG9zZSB0aGUgaHR0cCBzZXJ2ZXIgaWYgaXQgd2FzIGludGVybmFsbHkgY3JlYXRlZC5cbiAgICAgIC8vXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnBvcnQgIT0gbnVsbCkgcmV0dXJuIHNlcnZlci5jbG9zZShjYik7XG4gICAgfVxuXG4gICAgaWYgKGNiKSBjYigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlZSBpZiBhIGdpdmVuIHJlcXVlc3Qgc2hvdWxkIGJlIGhhbmRsZWQgYnkgdGhpcyBzZXJ2ZXIgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7aHR0cC5JbmNvbWluZ01lc3NhZ2V9IHJlcSBSZXF1ZXN0IG9iamVjdCB0byBpbnNwZWN0XG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgcmVxdWVzdCBpcyB2YWxpZCwgZWxzZSBgZmFsc2VgXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHNob3VsZEhhbmRsZSAocmVxKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXRoICYmIHVybC5wYXJzZShyZXEudXJsKS5wYXRobmFtZSAhPT0gdGhpcy5vcHRpb25zLnBhdGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYSBIVFRQIFVwZ3JhZGUgcmVxdWVzdC5cbiAgICpcbiAgICogQHBhcmFtIHtodHRwLkluY29taW5nTWVzc2FnZX0gcmVxIFRoZSByZXF1ZXN0IG9iamVjdFxuICAgKiBAcGFyYW0ge25ldC5Tb2NrZXR9IHNvY2tldCBUaGUgbmV0d29yayBzb2NrZXQgYmV0d2VlbiB0aGUgc2VydmVyIGFuZCBjbGllbnRcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGhlYWQgVGhlIGZpcnN0IHBhY2tldCBvZiB0aGUgdXBncmFkZWQgc3RyZWFtXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGhhbmRsZVVwZ3JhZGUgKHJlcSwgc29ja2V0LCBoZWFkLCBjYikge1xuICAgIHNvY2tldC5vbignZXJyb3InLCBzb2NrZXRFcnJvcik7XG5cbiAgICBjb25zdCB2ZXJzaW9uID0gK3JlcS5oZWFkZXJzWydzZWMtd2Vic29ja2V0LXZlcnNpb24nXTtcbiAgICBjb25zdCBleHRlbnNpb25zID0ge307XG5cbiAgICBpZiAoXG4gICAgICByZXEubWV0aG9kICE9PSAnR0VUJyB8fCByZXEuaGVhZGVycy51cGdyYWRlLnRvTG93ZXJDYXNlKCkgIT09ICd3ZWJzb2NrZXQnIHx8XG4gICAgICAhcmVxLmhlYWRlcnNbJ3NlYy13ZWJzb2NrZXQta2V5J10gfHwgKHZlcnNpb24gIT09IDggJiYgdmVyc2lvbiAhPT0gMTMpIHx8XG4gICAgICAhdGhpcy5zaG91bGRIYW5kbGUocmVxKVxuICAgICkge1xuICAgICAgcmV0dXJuIGFib3J0Q29ubmVjdGlvbihzb2NrZXQsIDQwMCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSkge1xuICAgICAgY29uc3QgcGVyTWVzc2FnZURlZmxhdGUgPSBuZXcgUGVyTWVzc2FnZURlZmxhdGUoXG4gICAgICAgIHRoaXMub3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGhpcy5vcHRpb25zLm1heFBheWxvYWRcbiAgICAgICk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9mZmVycyA9IEV4dGVuc2lvbnMucGFyc2UoXG4gICAgICAgICAgcmVxLmhlYWRlcnNbJ3NlYy13ZWJzb2NrZXQtZXh0ZW5zaW9ucyddXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKG9mZmVyc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXSkge1xuICAgICAgICAgIHBlck1lc3NhZ2VEZWZsYXRlLmFjY2VwdChvZmZlcnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV0pO1xuICAgICAgICAgIGV4dGVuc2lvbnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV0gPSBwZXJNZXNzYWdlRGVmbGF0ZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBhYm9ydENvbm5lY3Rpb24oc29ja2V0LCA0MDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm90b2NvbCA9IChyZXEuaGVhZGVyc1snc2VjLXdlYnNvY2tldC1wcm90b2NvbCddIHx8ICcnKS5zcGxpdCgvLCAqLyk7XG5cbiAgICAvL1xuICAgIC8vIE9wdGlvbmFsbHkgY2FsbCBleHRlcm5hbCBwcm90b2NvbCBzZWxlY3Rpb24gaGFuZGxlci5cbiAgICAvL1xuICAgIGlmICh0aGlzLm9wdGlvbnMuaGFuZGxlUHJvdG9jb2xzKSB7XG4gICAgICBwcm90b2NvbCA9IHRoaXMub3B0aW9ucy5oYW5kbGVQcm90b2NvbHMocHJvdG9jb2wsIHJlcSk7XG4gICAgICBpZiAocHJvdG9jb2wgPT09IGZhbHNlKSByZXR1cm4gYWJvcnRDb25uZWN0aW9uKHNvY2tldCwgNDAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvdG9jb2wgPSBwcm90b2NvbFswXTtcbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIE9wdGlvbmFsbHkgY2FsbCBleHRlcm5hbCBjbGllbnQgdmVyaWZpY2F0aW9uIGhhbmRsZXIuXG4gICAgLy9cbiAgICBpZiAodGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudCkge1xuICAgICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgb3JpZ2luOiByZXEuaGVhZGVyc1tgJHt2ZXJzaW9uID09PSA4ID8gJ3NlYy13ZWJzb2NrZXQtb3JpZ2luJyA6ICdvcmlnaW4nfWBdLFxuICAgICAgICBzZWN1cmU6ICEhKHJlcS5jb25uZWN0aW9uLmF1dGhvcml6ZWQgfHwgcmVxLmNvbm5lY3Rpb24uZW5jcnlwdGVkKSxcbiAgICAgICAgcmVxXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudChpbmZvLCAodmVyaWZpZWQsIGNvZGUsIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICBpZiAoIXZlcmlmaWVkKSByZXR1cm4gYWJvcnRDb25uZWN0aW9uKHNvY2tldCwgY29kZSB8fCA0MDEsIG1lc3NhZ2UpO1xuXG4gICAgICAgICAgdGhpcy5jb21wbGV0ZVVwZ3JhZGUoXG4gICAgICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgICAgIGV4dGVuc2lvbnMsXG4gICAgICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgc29ja2V0LFxuICAgICAgICAgICAgaGVhZCxcbiAgICAgICAgICAgIGNiXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudmVyaWZ5Q2xpZW50KGluZm8pKSByZXR1cm4gYWJvcnRDb25uZWN0aW9uKHNvY2tldCwgNDAxKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbXBsZXRlVXBncmFkZShwcm90b2NvbCwgZXh0ZW5zaW9ucywgdmVyc2lvbiwgcmVxLCBzb2NrZXQsIGhlYWQsIGNiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGdyYWRlIHRoZSBjb25uZWN0aW9uIHRvIFdlYlNvY2tldC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3RvY29sIFRoZSBjaG9zZW4gc3VicHJvdG9jb2xcbiAgICogQHBhcmFtIHtPYmplY3R9IGV4dGVuc2lvbnMgVGhlIGFjY2VwdGVkIGV4dGVuc2lvbnNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZlcnNpb24gVGhlIFdlYlNvY2tldCBwcm90b2NvbCB2ZXJzaW9uXG4gICAqIEBwYXJhbSB7aHR0cC5JbmNvbWluZ01lc3NhZ2V9IHJlcSBUaGUgcmVxdWVzdCBvYmplY3RcbiAgICogQHBhcmFtIHtuZXQuU29ja2V0fSBzb2NrZXQgVGhlIG5ldHdvcmsgc29ja2V0IGJldHdlZW4gdGhlIHNlcnZlciBhbmQgY2xpZW50XG4gICAqIEBwYXJhbSB7QnVmZmVyfSBoZWFkIFRoZSBmaXJzdCBwYWNrZXQgb2YgdGhlIHVwZ3JhZGVkIHN0cmVhbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiBDYWxsYmFja1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29tcGxldGVVcGdyYWRlIChwcm90b2NvbCwgZXh0ZW5zaW9ucywgdmVyc2lvbiwgcmVxLCBzb2NrZXQsIGhlYWQsIGNiKSB7XG4gICAgLy9cbiAgICAvLyBEZXN0cm95IHRoZSBzb2NrZXQgaWYgdGhlIGNsaWVudCBoYXMgYWxyZWFkeSBzZW50IGEgRklOIHBhY2tldC5cbiAgICAvL1xuICAgIGlmICghc29ja2V0LnJlYWRhYmxlIHx8ICFzb2NrZXQud3JpdGFibGUpIHJldHVybiBzb2NrZXQuZGVzdHJveSgpO1xuXG4gICAgY29uc3Qga2V5ID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTEnKVxuICAgICAgLnVwZGF0ZShyZXEuaGVhZGVyc1snc2VjLXdlYnNvY2tldC1rZXknXSArIGNvbnN0YW50cy5HVUlELCAnYmluYXJ5JylcbiAgICAgIC5kaWdlc3QoJ2Jhc2U2NCcpO1xuXG4gICAgY29uc3QgaGVhZGVycyA9IFtcbiAgICAgICdIVFRQLzEuMSAxMDEgU3dpdGNoaW5nIFByb3RvY29scycsXG4gICAgICAnVXBncmFkZTogd2Vic29ja2V0JyxcbiAgICAgICdDb25uZWN0aW9uOiBVcGdyYWRlJyxcbiAgICAgIGBTZWMtV2ViU29ja2V0LUFjY2VwdDogJHtrZXl9YFxuICAgIF07XG5cbiAgICBpZiAocHJvdG9jb2wpIGhlYWRlcnMucHVzaChgU2VjLVdlYlNvY2tldC1Qcm90b2NvbDogJHtwcm90b2NvbH1gKTtcbiAgICBpZiAoZXh0ZW5zaW9uc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXSkge1xuICAgICAgY29uc3QgcGFyYW1zID0gZXh0ZW5zaW9uc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXS5wYXJhbXM7XG4gICAgICBjb25zdCB2YWx1ZSA9IEV4dGVuc2lvbnMuZm9ybWF0KHtcbiAgICAgICAgW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdOiBbcGFyYW1zXVxuICAgICAgfSk7XG4gICAgICBoZWFkZXJzLnB1c2goYFNlYy1XZWJTb2NrZXQtRXh0ZW5zaW9uczogJHt2YWx1ZX1gKTtcbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIEFsbG93IGV4dGVybmFsIG1vZGlmaWNhdGlvbi9pbnNwZWN0aW9uIG9mIGhhbmRzaGFrZSBoZWFkZXJzLlxuICAgIC8vXG4gICAgdGhpcy5lbWl0KCdoZWFkZXJzJywgaGVhZGVycywgcmVxKTtcblxuICAgIHNvY2tldC53cml0ZShoZWFkZXJzLmNvbmNhdCgnXFxyXFxuJykuam9pbignXFxyXFxuJykpO1xuXG4gICAgY29uc3QgY2xpZW50ID0gbmV3IFdlYlNvY2tldChbc29ja2V0LCBoZWFkXSwgbnVsbCwge1xuICAgICAgbWF4UGF5bG9hZDogdGhpcy5vcHRpb25zLm1heFBheWxvYWQsXG4gICAgICBwcm90b2NvbFZlcnNpb246IHZlcnNpb24sXG4gICAgICBleHRlbnNpb25zLFxuICAgICAgcHJvdG9jb2xcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmNsaWVudHMpIHtcbiAgICAgIHRoaXMuY2xpZW50cy5hZGQoY2xpZW50KTtcbiAgICAgIGNsaWVudC5vbignY2xvc2UnLCAoKSA9PiB0aGlzLmNsaWVudHMuZGVsZXRlKGNsaWVudCkpO1xuICAgIH1cblxuICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBzb2NrZXRFcnJvcik7XG4gICAgY2IoY2xpZW50KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlNvY2tldFNlcnZlcjtcblxuLyoqXG4gKiBIYW5kbGUgcHJlbWF0dXJlIHNvY2tldCBlcnJvcnMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc29ja2V0RXJyb3IgKCkge1xuICB0aGlzLmRlc3Ryb3koKTtcbn1cblxuLyoqXG4gKiBDbG9zZSB0aGUgY29ubmVjdGlvbiB3aGVuIHByZWNvbmRpdGlvbnMgYXJlIG5vdCBmdWxmaWxsZWQuXG4gKlxuICogQHBhcmFtIHtuZXQuU29ja2V0fSBzb2NrZXQgVGhlIHNvY2tldCBvZiB0aGUgdXBncmFkZSByZXF1ZXN0XG4gKiBAcGFyYW0ge051bWJlcn0gY29kZSBUaGUgSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZVxuICogQHBhcmFtIHtTdHJpbmd9IFttZXNzYWdlXSBUaGUgSFRUUCByZXNwb25zZSBib2R5XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhYm9ydENvbm5lY3Rpb24gKHNvY2tldCwgY29kZSwgbWVzc2FnZSkge1xuICBpZiAoc29ja2V0LndyaXRhYmxlKSB7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UgfHwgaHR0cC5TVEFUVVNfQ09ERVNbY29kZV07XG4gICAgc29ja2V0LndyaXRlKFxuICAgICAgYEhUVFAvMS4xICR7Y29kZX0gJHtodHRwLlNUQVRVU19DT0RFU1tjb2RlXX1cXHJcXG5gICtcbiAgICAgICdDb25uZWN0aW9uOiBjbG9zZVxcclxcbicgK1xuICAgICAgJ0NvbnRlbnQtdHlwZTogdGV4dC9odG1sXFxyXFxuJyArXG4gICAgICBgQ29udGVudC1MZW5ndGg6ICR7QnVmZmVyLmJ5dGVMZW5ndGgobWVzc2FnZSl9XFxyXFxuYCArXG4gICAgICAnXFxyXFxuJyArXG4gICAgICBtZXNzYWdlXG4gICAgKTtcbiAgfVxuXG4gIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBzb2NrZXRFcnJvcik7XG4gIHNvY2tldC5kZXN0cm95KCk7XG59XG4iXSwibmFtZXMiOlsic2FmZUJ1ZmZlciIsInJlcXVpcmUiLCJFdmVudEVtaXR0ZXIiLCJjcnlwdG8iLCJVbHRyb24iLCJodHRwIiwidXJsIiwiUGVyTWVzc2FnZURlZmxhdGUiLCJFeHRlbnNpb25zIiwiY29uc3RhbnRzIiwiV2ViU29ja2V0IiwiQnVmZmVyIiwiV2ViU29ja2V0U2VydmVyIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiY2FsbGJhY2siLCJPYmplY3QiLCJhc3NpZ24iLCJtYXhQYXlsb2FkIiwicGVyTWVzc2FnZURlZmxhdGUiLCJoYW5kbGVQcm90b2NvbHMiLCJjbGllbnRUcmFja2luZyIsInZlcmlmeUNsaWVudCIsIm5vU2VydmVyIiwiYmFja2xvZyIsInNlcnZlciIsImhvc3QiLCJwYXRoIiwicG9ydCIsIlR5cGVFcnJvciIsIl9zZXJ2ZXIiLCJjcmVhdGVTZXJ2ZXIiLCJyZXEiLCJyZXMiLCJib2R5IiwiU1RBVFVTX0NPREVTIiwid3JpdGVIZWFkIiwibGVuZ3RoIiwiZW5kIiwibGlzdGVuIiwiX3VsdHJvbiIsIm9uIiwiZW1pdCIsImVyciIsInNvY2tldCIsImhlYWQiLCJoYW5kbGVVcGdyYWRlIiwiY2xpZW50IiwiY2xpZW50cyIsIlNldCIsImNsb3NlIiwiY2IiLCJ0ZXJtaW5hdGUiLCJkZXN0cm95Iiwic2hvdWxkSGFuZGxlIiwicGFyc2UiLCJwYXRobmFtZSIsInNvY2tldEVycm9yIiwidmVyc2lvbiIsImhlYWRlcnMiLCJleHRlbnNpb25zIiwibWV0aG9kIiwidXBncmFkZSIsInRvTG93ZXJDYXNlIiwiYWJvcnRDb25uZWN0aW9uIiwib2ZmZXJzIiwiZXh0ZW5zaW9uTmFtZSIsImFjY2VwdCIsInByb3RvY29sIiwic3BsaXQiLCJpbmZvIiwib3JpZ2luIiwic2VjdXJlIiwiY29ubmVjdGlvbiIsImF1dGhvcml6ZWQiLCJlbmNyeXB0ZWQiLCJ2ZXJpZmllZCIsImNvZGUiLCJtZXNzYWdlIiwiY29tcGxldGVVcGdyYWRlIiwicmVhZGFibGUiLCJ3cml0YWJsZSIsImtleSIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJHVUlEIiwiZGlnZXN0IiwicHVzaCIsInBhcmFtcyIsInZhbHVlIiwiZm9ybWF0Iiwid3JpdGUiLCJjb25jYXQiLCJqb2luIiwicHJvdG9jb2xWZXJzaW9uIiwiYWRkIiwiZGVsZXRlIiwicmVtb3ZlTGlzdGVuZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnl0ZUxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/lib/WebSocketServer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ws/node_modules/safe-buffer/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/ws/node_modules/safe-buffer/index.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* eslint-disable node/no-deprecated-api */ \nvar buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar Buffer = buffer.Buffer;\n// alternative to using Object.keys for old browsers\nfunction copyProps(src, dst) {\n    for(var key in src){\n        dst[key] = src[key];\n    }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n    module.exports = buffer;\n} else {\n    // Copy properties from require('buffer')\n    copyProps(buffer, exports);\n    exports.Buffer = SafeBuffer;\n}\nfunction SafeBuffer(arg, encodingOrOffset, length) {\n    return Buffer(arg, encodingOrOffset, length);\n}\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer);\nSafeBuffer.from = function(arg, encodingOrOffset, length) {\n    if (typeof arg === \"number\") {\n        throw new TypeError(\"Argument must not be a number\");\n    }\n    return Buffer(arg, encodingOrOffset, length);\n};\nSafeBuffer.alloc = function(size, fill, encoding) {\n    if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n    }\n    var buf = Buffer(size);\n    if (fill !== undefined) {\n        if (typeof encoding === \"string\") {\n            buf.fill(fill, encoding);\n        } else {\n            buf.fill(fill);\n        }\n    } else {\n        buf.fill(0);\n    }\n    return buf;\n};\nSafeBuffer.allocUnsafe = function(size) {\n    if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n    }\n    return Buffer(size);\n};\nSafeBuffer.allocUnsafeSlow = function(size) {\n    if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n    }\n    return buffer.SlowBuffer(size);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd3Mvbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHlDQUF5QztBQUN6QyxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxTQUFTRixPQUFPRSxNQUFNO0FBRTFCLG9EQUFvRDtBQUNwRCxTQUFTQyxVQUFXQyxHQUFHLEVBQUVDLEdBQUc7SUFDMUIsSUFBSyxJQUFJQyxPQUFPRixJQUFLO1FBQ25CQyxHQUFHLENBQUNDLElBQUksR0FBR0YsR0FBRyxDQUFDRSxJQUFJO0lBQ3JCO0FBQ0Y7QUFDQSxJQUFJSixPQUFPSyxJQUFJLElBQUlMLE9BQU9NLEtBQUssSUFBSU4sT0FBT08sV0FBVyxJQUFJUCxPQUFPUSxlQUFlLEVBQUU7SUFDL0VDLE9BQU9DLE9BQU8sR0FBR1o7QUFDbkIsT0FBTztJQUNMLHlDQUF5QztJQUN6Q0csVUFBVUgsUUFBUVk7SUFDbEJBLGNBQWMsR0FBR0M7QUFDbkI7QUFFQSxTQUFTQSxXQUFZQyxHQUFHLEVBQUVDLGdCQUFnQixFQUFFQyxNQUFNO0lBQ2hELE9BQU9kLE9BQU9ZLEtBQUtDLGtCQUFrQkM7QUFDdkM7QUFFQSxrQ0FBa0M7QUFDbENiLFVBQVVELFFBQVFXO0FBRWxCQSxXQUFXTixJQUFJLEdBQUcsU0FBVU8sR0FBRyxFQUFFQyxnQkFBZ0IsRUFBRUMsTUFBTTtJQUN2RCxJQUFJLE9BQU9GLFFBQVEsVUFBVTtRQUMzQixNQUFNLElBQUlHLFVBQVU7SUFDdEI7SUFDQSxPQUFPZixPQUFPWSxLQUFLQyxrQkFBa0JDO0FBQ3ZDO0FBRUFILFdBQVdMLEtBQUssR0FBRyxTQUFVVSxJQUFJLEVBQUVDLElBQUksRUFBRUMsUUFBUTtJQUMvQyxJQUFJLE9BQU9GLFNBQVMsVUFBVTtRQUM1QixNQUFNLElBQUlELFVBQVU7SUFDdEI7SUFDQSxJQUFJSSxNQUFNbkIsT0FBT2dCO0lBQ2pCLElBQUlDLFNBQVNHLFdBQVc7UUFDdEIsSUFBSSxPQUFPRixhQUFhLFVBQVU7WUFDaENDLElBQUlGLElBQUksQ0FBQ0EsTUFBTUM7UUFDakIsT0FBTztZQUNMQyxJQUFJRixJQUFJLENBQUNBO1FBQ1g7SUFDRixPQUFPO1FBQ0xFLElBQUlGLElBQUksQ0FBQztJQUNYO0lBQ0EsT0FBT0U7QUFDVDtBQUVBUixXQUFXSixXQUFXLEdBQUcsU0FBVVMsSUFBSTtJQUNyQyxJQUFJLE9BQU9BLFNBQVMsVUFBVTtRQUM1QixNQUFNLElBQUlELFVBQVU7SUFDdEI7SUFDQSxPQUFPZixPQUFPZ0I7QUFDaEI7QUFFQUwsV0FBV0gsZUFBZSxHQUFHLFNBQVVRLElBQUk7SUFDekMsSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDNUIsTUFBTSxJQUFJRCxVQUFVO0lBQ3RCO0lBQ0EsT0FBT2pCLE9BQU91QixVQUFVLENBQUNMO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkZGl0LWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy93cy9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanM/NWEzMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIl0sIm5hbWVzIjpbImJ1ZmZlciIsInJlcXVpcmUiLCJCdWZmZXIiLCJjb3B5UHJvcHMiLCJzcmMiLCJkc3QiLCJrZXkiLCJmcm9tIiwiYWxsb2MiLCJhbGxvY1Vuc2FmZSIsImFsbG9jVW5zYWZlU2xvdyIsIm1vZHVsZSIsImV4cG9ydHMiLCJTYWZlQnVmZmVyIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImxlbmd0aCIsIlR5cGVFcnJvciIsInNpemUiLCJmaWxsIiwiZW5jb2RpbmciLCJidWYiLCJ1bmRlZmluZWQiLCJTbG93QnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ws/node_modules/safe-buffer/index.js\n");

/***/ })

};
;
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/oauth-sign";
exports.ids = ["vendor-chunks/oauth-sign"];
exports.modules = {

/***/ "(rsc)/./node_modules/oauth-sign/index.js":
/*!******************************************!*\
  !*** ./node_modules/oauth-sign/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var crypto = __webpack_require__(/*! crypto */ \"crypto\");\nfunction sha(key, body, algorithm) {\n    return crypto.createHmac(algorithm, key).update(body).digest(\"base64\");\n}\nfunction rsa(key, body) {\n    return crypto.createSign(\"RSA-SHA1\").update(body).sign(key, \"base64\");\n}\nfunction rfc3986(str) {\n    return encodeURIComponent(str).replace(/!/g, \"%21\").replace(/\\*/g, \"%2A\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\").replace(/'/g, \"%27\");\n}\n// Maps object to bi-dimensional array\n// Converts { foo: 'A', bar: [ 'b', 'B' ]} to\n// [ ['foo', 'A'], ['bar', 'b'], ['bar', 'B'] ]\nfunction map(obj) {\n    var key, val, arr = [];\n    for(key in obj){\n        val = obj[key];\n        if (Array.isArray(val)) for(var i = 0; i < val.length; i++)arr.push([\n            key,\n            val[i]\n        ]);\n        else if (typeof val === \"object\") for(var prop in val)arr.push([\n            key + \"[\" + prop + \"]\",\n            val[prop]\n        ]);\n        else arr.push([\n            key,\n            val\n        ]);\n    }\n    return arr;\n}\n// Compare function for sort\nfunction compare(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n}\nfunction generateBase(httpMethod, base_uri, params) {\n    // adapted from https://dev.twitter.com/docs/auth/oauth and \n    // https://dev.twitter.com/docs/auth/creating-signature\n    // Parameter normalization\n    // http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2\n    var normalized = map(params)// 1.  First, the name and value of each parameter are encoded\n    .map(function(p) {\n        return [\n            rfc3986(p[0]),\n            rfc3986(p[1] || \"\")\n        ];\n    })// 2.  The parameters are sorted by name, using ascending byte value\n    //     ordering.  If two or more parameters share the same name, they\n    //     are sorted by their value.\n    .sort(function(a, b) {\n        return compare(a[0], b[0]) || compare(a[1], b[1]);\n    })// 3.  The name of each parameter is concatenated to its corresponding\n    //     value using an \"=\" character (ASCII code 61) as a separator, even\n    //     if the value is empty.\n    .map(function(p) {\n        return p.join(\"=\");\n    })// 4.  The sorted name/value pairs are concatenated together into a\n    //     single string by using an \"&\" character (ASCII code 38) as\n    //     separator.\n    .join(\"&\");\n    var base = [\n        rfc3986(httpMethod ? httpMethod.toUpperCase() : \"GET\"),\n        rfc3986(base_uri),\n        rfc3986(normalized)\n    ].join(\"&\");\n    return base;\n}\nfunction hmacsign(httpMethod, base_uri, params, consumer_secret, token_secret) {\n    var base = generateBase(httpMethod, base_uri, params);\n    var key = [\n        consumer_secret || \"\",\n        token_secret || \"\"\n    ].map(rfc3986).join(\"&\");\n    return sha(key, base, \"sha1\");\n}\nfunction hmacsign256(httpMethod, base_uri, params, consumer_secret, token_secret) {\n    var base = generateBase(httpMethod, base_uri, params);\n    var key = [\n        consumer_secret || \"\",\n        token_secret || \"\"\n    ].map(rfc3986).join(\"&\");\n    return sha(key, base, \"sha256\");\n}\nfunction rsasign(httpMethod, base_uri, params, private_key, token_secret) {\n    var base = generateBase(httpMethod, base_uri, params);\n    var key = private_key || \"\";\n    return rsa(key, base);\n}\nfunction plaintext(consumer_secret, token_secret) {\n    var key = [\n        consumer_secret || \"\",\n        token_secret || \"\"\n    ].map(rfc3986).join(\"&\");\n    return key;\n}\nfunction sign(signMethod, httpMethod, base_uri, params, consumer_secret, token_secret) {\n    var method;\n    var skipArgs = 1;\n    switch(signMethod){\n        case \"RSA-SHA1\":\n            method = rsasign;\n            break;\n        case \"HMAC-SHA1\":\n            method = hmacsign;\n            break;\n        case \"HMAC-SHA256\":\n            method = hmacsign256;\n            break;\n        case \"PLAINTEXT\":\n            method = plaintext;\n            skipArgs = 4;\n            break;\n        default:\n            throw new Error(\"Signature method not supported: \" + signMethod);\n    }\n    return method.apply(null, [].slice.call(arguments, skipArgs));\n}\nexports.hmacsign = hmacsign;\nexports.hmacsign256 = hmacsign256;\nexports.rsasign = rsasign;\nexports.plaintext = plaintext;\nexports.sign = sign;\nexports.rfc3986 = rfc3986;\nexports.generateBase = generateBase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/oauth-sign/index.js\n");

/***/ })

};
;
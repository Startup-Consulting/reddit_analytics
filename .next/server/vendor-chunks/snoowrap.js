"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/snoowrap";
exports.ids = ["vendor-chunks/snoowrap"];
exports.modules = {

/***/ "(rsc)/./node_modules/snoowrap/dist/Promise.js":
/*!***********************************************!*\
  !*** ./node_modules/snoowrap/dist/Promise.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _bluebird = _interopRequireDefault(__webpack_require__(/*! bluebird */ \"(rsc)/./node_modules/bluebird/js/release/bluebird.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar PromiseCopy = _bluebird.default.getNewLibraryCopy();\nPromiseCopy.config({\n    cancellation: true,\n    warnings: false\n});\nvar _default = PromiseCopy;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9Qcm9taXNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsWUFBWUMsdUJBQXVCQyxtQkFBT0EsQ0FBQyxzRUFBVTtBQUV6RCxTQUFTRCx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUosU0FBU0k7SUFBSTtBQUFHO0FBRTlGLElBQUlFLGNBQWNMLFVBQVVELE9BQU8sQ0FBQ08saUJBQWlCO0FBRXJERCxZQUFZRSxNQUFNLENBQUM7SUFDakJDLGNBQWM7SUFDZEMsVUFBVTtBQUNaO0FBQ0EsSUFBSUMsV0FBV0w7QUFDZlIsa0JBQWUsR0FBR2EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3Nub293cmFwL2Rpc3QvUHJvbWlzZS5qcz8zZWUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2JsdWViaXJkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiYmx1ZWJpcmRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUHJvbWlzZUNvcHkgPSBfYmx1ZWJpcmQuZGVmYXVsdC5nZXROZXdMaWJyYXJ5Q29weSgpO1xuXG5Qcm9taXNlQ29weS5jb25maWcoe1xuICBjYW5jZWxsYXRpb246IHRydWUsXG4gIHdhcm5pbmdzOiBmYWxzZVxufSk7XG52YXIgX2RlZmF1bHQgPSBQcm9taXNlQ29weTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfYmx1ZWJpcmQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJQcm9taXNlQ29weSIsImdldE5ld0xpYnJhcnlDb3B5IiwiY29uZmlnIiwiY2FuY2VsbGF0aW9uIiwid2FybmluZ3MiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/Promise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/snoowrap/dist/constants.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MAX_LISTING_ITEMS = exports.MAX_API_MORECHILDREN_AMOUNT = exports.MAX_API_INFO_AMOUNT = exports.MAX_TOKEN_LATENCY = exports.IDEMPOTENT_HTTP_VERBS = exports.HTTP_VERBS = exports.LIVETHREAD_PERMISSIONS = exports.MODERATOR_PERMISSIONS = exports.USERNAME_REGEX = exports.KINDS = exports.SUBREDDIT_KEYS = exports.USER_KEYS = exports.API_RULES_LINK = exports.DOCS_LINK = exports.VERSION = exports.MODULE_NAME = void 0;\nvar MODULE_NAME = \"snoowrap\";\nexports.MODULE_NAME = MODULE_NAME;\nvar VERSION = \"1.23.0\";\nexports.VERSION = VERSION;\nvar DOCS_LINK = \"https://not-an-aardvark.github.io/snoowrap/\";\nexports.DOCS_LINK = DOCS_LINK;\nvar API_RULES_LINK = \"https://github.com/reddit/reddit/wiki/API\";\n/* USER_KEYS and SUBREDDIT_KEYS are keys that are replaced by RedditUser and Subreddit objects when encountered in\n`snoowrap#_populate`. `author`, `approved_by`, `banned_by`, and `subreddit` all appear in fetched Submissions, among other\nplaces. `user` appears in responses from the api/flairlist endpoint, and `sr` appears in responses from the `api/v1/me/karma`\nendpoint. */ exports.API_RULES_LINK = API_RULES_LINK;\nvar USER_KEYS = new Set([\n    \"author\",\n    \"approved_by\",\n    \"banned_by\",\n    \"user\"\n]);\nexports.USER_KEYS = USER_KEYS;\nvar SUBREDDIT_KEYS = new Set([\n    \"subreddit\",\n    \"sr\"\n]);\nexports.SUBREDDIT_KEYS = SUBREDDIT_KEYS;\nvar KINDS = {\n    t1: \"Comment\",\n    t2: \"RedditUser\",\n    t3: \"Submission\",\n    t4: \"PrivateMessage\",\n    t5: \"Subreddit\",\n    t6: \"Trophy\",\n    t8: \"PromoCampaign\",\n    Listing: \"Listing\",\n    more: \"More\",\n    UserList: \"UserList\",\n    KarmaList: \"KarmaList\",\n    TrophyList: \"TrophyList\",\n    subreddit_settings: \"SubredditSettings\",\n    modaction: \"ModAction\",\n    wikipage: \"WikiPage\",\n    wikipagesettings: \"WikiPageSettings\",\n    wikipagelisting: \"WikiPageListing\",\n    LiveUpdateEvent: \"LiveThread\",\n    LiveUpdate: \"LiveUpdate\",\n    LabeledMulti: \"MultiReddit\",\n    ModmailConversation: \"ModmailConversation\",\n    ModmailConversationAuthor: \"ModmailConversationAuthor\"\n};\nexports.KINDS = KINDS;\nvar USERNAME_REGEX = /^[\\w-]{1,20}$/;\nexports.USERNAME_REGEX = USERNAME_REGEX;\nvar MODERATOR_PERMISSIONS = [\n    \"wiki\",\n    \"posts\",\n    \"access\",\n    \"mail\",\n    \"config\",\n    \"flair\"\n];\nexports.MODERATOR_PERMISSIONS = MODERATOR_PERMISSIONS;\nvar LIVETHREAD_PERMISSIONS = [\n    \"update\",\n    \"edit\",\n    \"manage\"\n];\nexports.LIVETHREAD_PERMISSIONS = LIVETHREAD_PERMISSIONS;\nvar HTTP_VERBS = [\n    \"delete\",\n    \"get\",\n    \"head\",\n    \"patch\",\n    \"post\",\n    \"put\"\n];\nexports.HTTP_VERBS = HTTP_VERBS;\nvar IDEMPOTENT_HTTP_VERBS = [\n    \"delete\",\n    \"get\",\n    \"head\",\n    \"put\"\n];\nexports.IDEMPOTENT_HTTP_VERBS = IDEMPOTENT_HTTP_VERBS;\nvar MAX_TOKEN_LATENCY = 10000;\nexports.MAX_TOKEN_LATENCY = MAX_TOKEN_LATENCY;\nvar MAX_API_INFO_AMOUNT = 100;\nexports.MAX_API_INFO_AMOUNT = MAX_API_INFO_AMOUNT;\nvar MAX_API_MORECHILDREN_AMOUNT = 20;\nexports.MAX_API_MORECHILDREN_AMOUNT = MAX_API_MORECHILDREN_AMOUNT;\nvar MAX_LISTING_ITEMS = 100;\nexports.MAX_LISTING_ITEMS = MAX_LISTING_ITEMS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHlCQUF5QixHQUFHQSxtQ0FBbUMsR0FBR0EsMkJBQTJCLEdBQUdBLHlCQUF5QixHQUFHQSw2QkFBNkIsR0FBR0Esa0JBQWtCLEdBQUdBLDhCQUE4QixHQUFHQSw2QkFBNkIsR0FBR0Esc0JBQXNCLEdBQUdBLGFBQWEsR0FBR0Esc0JBQXNCLEdBQUdBLGlCQUFpQixHQUFHQSxzQkFBc0IsR0FBR0EsaUJBQWlCLEdBQUdBLGVBQWUsR0FBR0EsbUJBQW1CLEdBQUcsS0FBSztBQUNsYSxJQUFJaUIsY0FBYztBQUNsQmpCLG1CQUFtQixHQUFHaUI7QUFDdEIsSUFBSUQsVUFBVTtBQUNkaEIsZUFBZSxHQUFHZ0I7QUFDbEIsSUFBSUQsWUFBWTtBQUNoQmYsaUJBQWlCLEdBQUdlO0FBQ3BCLElBQUlELGlCQUFpQjtBQUNyQjs7O1VBR1UsR0FFVmQsc0JBQXNCLEdBQUdjO0FBQ3pCLElBQUlELFlBQVksSUFBSUssSUFBSTtJQUFDO0lBQVU7SUFBZTtJQUFhO0NBQU87QUFDdEVsQixpQkFBaUIsR0FBR2E7QUFDcEIsSUFBSUQsaUJBQWlCLElBQUlNLElBQUk7SUFBQztJQUFhO0NBQUs7QUFDaERsQixzQkFBc0IsR0FBR1k7QUFDekIsSUFBSUQsUUFBUTtJQUNWUSxJQUFJO0lBQ0pDLElBQUk7SUFDSkMsSUFBSTtJQUNKQyxJQUFJO0lBQ0pDLElBQUk7SUFDSkMsSUFBSTtJQUNKQyxJQUFJO0lBQ0pDLFNBQVM7SUFDVEMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLFdBQVc7SUFDWEMsWUFBWTtJQUNaQyxvQkFBb0I7SUFDcEJDLFdBQVc7SUFDWEMsVUFBVTtJQUNWQyxrQkFBa0I7SUFDbEJDLGlCQUFpQjtJQUNqQkMsaUJBQWlCO0lBQ2pCQyxZQUFZO0lBQ1pDLGNBQWM7SUFDZEMscUJBQXFCO0lBQ3JCQywyQkFBMkI7QUFDN0I7QUFDQXhDLGFBQWEsR0FBR1c7QUFDaEIsSUFBSUQsaUJBQWlCO0FBQ3JCVixzQkFBc0IsR0FBR1U7QUFDekIsSUFBSUQsd0JBQXdCO0lBQUM7SUFBUTtJQUFTO0lBQVU7SUFBUTtJQUFVO0NBQVE7QUFDbEZULDZCQUE2QixHQUFHUztBQUNoQyxJQUFJRCx5QkFBeUI7SUFBQztJQUFVO0lBQVE7Q0FBUztBQUN6RFIsOEJBQThCLEdBQUdRO0FBQ2pDLElBQUlELGFBQWE7SUFBQztJQUFVO0lBQU87SUFBUTtJQUFTO0lBQVE7Q0FBTTtBQUNsRVAsa0JBQWtCLEdBQUdPO0FBQ3JCLElBQUlELHdCQUF3QjtJQUFDO0lBQVU7SUFBTztJQUFRO0NBQU07QUFDNUROLDZCQUE2QixHQUFHTTtBQUNoQyxJQUFJRCxvQkFBb0I7QUFDeEJMLHlCQUF5QixHQUFHSztBQUM1QixJQUFJRCxzQkFBc0I7QUFDMUJKLDJCQUEyQixHQUFHSTtBQUM5QixJQUFJRCw4QkFBOEI7QUFDbENILG1DQUFtQyxHQUFHRztBQUN0QyxJQUFJRCxvQkFBb0I7QUFDeEJGLHlCQUF5QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZGRpdC1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9jb25zdGFudHMuanM/ZDI0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTUFYX0xJU1RJTkdfSVRFTVMgPSBleHBvcnRzLk1BWF9BUElfTU9SRUNISUxEUkVOX0FNT1VOVCA9IGV4cG9ydHMuTUFYX0FQSV9JTkZPX0FNT1VOVCA9IGV4cG9ydHMuTUFYX1RPS0VOX0xBVEVOQ1kgPSBleHBvcnRzLklERU1QT1RFTlRfSFRUUF9WRVJCUyA9IGV4cG9ydHMuSFRUUF9WRVJCUyA9IGV4cG9ydHMuTElWRVRIUkVBRF9QRVJNSVNTSU9OUyA9IGV4cG9ydHMuTU9ERVJBVE9SX1BFUk1JU1NJT05TID0gZXhwb3J0cy5VU0VSTkFNRV9SRUdFWCA9IGV4cG9ydHMuS0lORFMgPSBleHBvcnRzLlNVQlJFRERJVF9LRVlTID0gZXhwb3J0cy5VU0VSX0tFWVMgPSBleHBvcnRzLkFQSV9SVUxFU19MSU5LID0gZXhwb3J0cy5ET0NTX0xJTksgPSBleHBvcnRzLlZFUlNJT04gPSBleHBvcnRzLk1PRFVMRV9OQU1FID0gdm9pZCAwO1xudmFyIE1PRFVMRV9OQU1FID0gJ3Nub293cmFwJztcbmV4cG9ydHMuTU9EVUxFX05BTUUgPSBNT0RVTEVfTkFNRTtcbnZhciBWRVJTSU9OID0gJzEuMjMuMCc7XG5leHBvcnRzLlZFUlNJT04gPSBWRVJTSU9OO1xudmFyIERPQ1NfTElOSyA9ICdodHRwczovL25vdC1hbi1hYXJkdmFyay5naXRodWIuaW8vc25vb3dyYXAvJztcbmV4cG9ydHMuRE9DU19MSU5LID0gRE9DU19MSU5LO1xudmFyIEFQSV9SVUxFU19MSU5LID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9yZWRkaXQvcmVkZGl0L3dpa2kvQVBJJztcbi8qIFVTRVJfS0VZUyBhbmQgU1VCUkVERElUX0tFWVMgYXJlIGtleXMgdGhhdCBhcmUgcmVwbGFjZWQgYnkgUmVkZGl0VXNlciBhbmQgU3VicmVkZGl0IG9iamVjdHMgd2hlbiBlbmNvdW50ZXJlZCBpblxuYHNub293cmFwI19wb3B1bGF0ZWAuIGBhdXRob3JgLCBgYXBwcm92ZWRfYnlgLCBgYmFubmVkX2J5YCwgYW5kIGBzdWJyZWRkaXRgIGFsbCBhcHBlYXIgaW4gZmV0Y2hlZCBTdWJtaXNzaW9ucywgYW1vbmcgb3RoZXJcbnBsYWNlcy4gYHVzZXJgIGFwcGVhcnMgaW4gcmVzcG9uc2VzIGZyb20gdGhlIGFwaS9mbGFpcmxpc3QgZW5kcG9pbnQsIGFuZCBgc3JgIGFwcGVhcnMgaW4gcmVzcG9uc2VzIGZyb20gdGhlIGBhcGkvdjEvbWUva2FybWFgXG5lbmRwb2ludC4gKi9cblxuZXhwb3J0cy5BUElfUlVMRVNfTElOSyA9IEFQSV9SVUxFU19MSU5LO1xudmFyIFVTRVJfS0VZUyA9IG5ldyBTZXQoWydhdXRob3InLCAnYXBwcm92ZWRfYnknLCAnYmFubmVkX2J5JywgJ3VzZXInXSk7XG5leHBvcnRzLlVTRVJfS0VZUyA9IFVTRVJfS0VZUztcbnZhciBTVUJSRURESVRfS0VZUyA9IG5ldyBTZXQoWydzdWJyZWRkaXQnLCAnc3InXSk7XG5leHBvcnRzLlNVQlJFRERJVF9LRVlTID0gU1VCUkVERElUX0tFWVM7XG52YXIgS0lORFMgPSB7XG4gIHQxOiAnQ29tbWVudCcsXG4gIHQyOiAnUmVkZGl0VXNlcicsXG4gIHQzOiAnU3VibWlzc2lvbicsXG4gIHQ0OiAnUHJpdmF0ZU1lc3NhZ2UnLFxuICB0NTogJ1N1YnJlZGRpdCcsXG4gIHQ2OiAnVHJvcGh5JyxcbiAgdDg6ICdQcm9tb0NhbXBhaWduJyxcbiAgTGlzdGluZzogJ0xpc3RpbmcnLFxuICBtb3JlOiAnTW9yZScsXG4gIFVzZXJMaXN0OiAnVXNlckxpc3QnLFxuICBLYXJtYUxpc3Q6ICdLYXJtYUxpc3QnLFxuICBUcm9waHlMaXN0OiAnVHJvcGh5TGlzdCcsXG4gIHN1YnJlZGRpdF9zZXR0aW5nczogJ1N1YnJlZGRpdFNldHRpbmdzJyxcbiAgbW9kYWN0aW9uOiAnTW9kQWN0aW9uJyxcbiAgd2lraXBhZ2U6ICdXaWtpUGFnZScsXG4gIHdpa2lwYWdlc2V0dGluZ3M6ICdXaWtpUGFnZVNldHRpbmdzJyxcbiAgd2lraXBhZ2VsaXN0aW5nOiAnV2lraVBhZ2VMaXN0aW5nJyxcbiAgTGl2ZVVwZGF0ZUV2ZW50OiAnTGl2ZVRocmVhZCcsXG4gIExpdmVVcGRhdGU6ICdMaXZlVXBkYXRlJyxcbiAgTGFiZWxlZE11bHRpOiAnTXVsdGlSZWRkaXQnLFxuICBNb2RtYWlsQ29udmVyc2F0aW9uOiAnTW9kbWFpbENvbnZlcnNhdGlvbicsXG4gIE1vZG1haWxDb252ZXJzYXRpb25BdXRob3I6ICdNb2RtYWlsQ29udmVyc2F0aW9uQXV0aG9yJ1xufTtcbmV4cG9ydHMuS0lORFMgPSBLSU5EUztcbnZhciBVU0VSTkFNRV9SRUdFWCA9IC9eW1xcdy1dezEsMjB9JC87XG5leHBvcnRzLlVTRVJOQU1FX1JFR0VYID0gVVNFUk5BTUVfUkVHRVg7XG52YXIgTU9ERVJBVE9SX1BFUk1JU1NJT05TID0gWyd3aWtpJywgJ3Bvc3RzJywgJ2FjY2VzcycsICdtYWlsJywgJ2NvbmZpZycsICdmbGFpciddO1xuZXhwb3J0cy5NT0RFUkFUT1JfUEVSTUlTU0lPTlMgPSBNT0RFUkFUT1JfUEVSTUlTU0lPTlM7XG52YXIgTElWRVRIUkVBRF9QRVJNSVNTSU9OUyA9IFsndXBkYXRlJywgJ2VkaXQnLCAnbWFuYWdlJ107XG5leHBvcnRzLkxJVkVUSFJFQURfUEVSTUlTU0lPTlMgPSBMSVZFVEhSRUFEX1BFUk1JU1NJT05TO1xudmFyIEhUVFBfVkVSQlMgPSBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwYXRjaCcsICdwb3N0JywgJ3B1dCddO1xuZXhwb3J0cy5IVFRQX1ZFUkJTID0gSFRUUF9WRVJCUztcbnZhciBJREVNUE9URU5UX0hUVFBfVkVSQlMgPSBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwdXQnXTtcbmV4cG9ydHMuSURFTVBPVEVOVF9IVFRQX1ZFUkJTID0gSURFTVBPVEVOVF9IVFRQX1ZFUkJTO1xudmFyIE1BWF9UT0tFTl9MQVRFTkNZID0gMTAwMDA7XG5leHBvcnRzLk1BWF9UT0tFTl9MQVRFTkNZID0gTUFYX1RPS0VOX0xBVEVOQ1k7XG52YXIgTUFYX0FQSV9JTkZPX0FNT1VOVCA9IDEwMDtcbmV4cG9ydHMuTUFYX0FQSV9JTkZPX0FNT1VOVCA9IE1BWF9BUElfSU5GT19BTU9VTlQ7XG52YXIgTUFYX0FQSV9NT1JFQ0hJTERSRU5fQU1PVU5UID0gMjA7XG5leHBvcnRzLk1BWF9BUElfTU9SRUNISUxEUkVOX0FNT1VOVCA9IE1BWF9BUElfTU9SRUNISUxEUkVOX0FNT1VOVDtcbnZhciBNQVhfTElTVElOR19JVEVNUyA9IDEwMDtcbmV4cG9ydHMuTUFYX0xJU1RJTkdfSVRFTVMgPSBNQVhfTElTVElOR19JVEVNUzsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNQVhfTElTVElOR19JVEVNUyIsIk1BWF9BUElfTU9SRUNISUxEUkVOX0FNT1VOVCIsIk1BWF9BUElfSU5GT19BTU9VTlQiLCJNQVhfVE9LRU5fTEFURU5DWSIsIklERU1QT1RFTlRfSFRUUF9WRVJCUyIsIkhUVFBfVkVSQlMiLCJMSVZFVEhSRUFEX1BFUk1JU1NJT05TIiwiTU9ERVJBVE9SX1BFUk1JU1NJT05TIiwiVVNFUk5BTUVfUkVHRVgiLCJLSU5EUyIsIlNVQlJFRERJVF9LRVlTIiwiVVNFUl9LRVlTIiwiQVBJX1JVTEVTX0xJTksiLCJET0NTX0xJTksiLCJWRVJTSU9OIiwiTU9EVUxFX05BTUUiLCJTZXQiLCJ0MSIsInQyIiwidDMiLCJ0NCIsInQ1IiwidDYiLCJ0OCIsIkxpc3RpbmciLCJtb3JlIiwiVXNlckxpc3QiLCJLYXJtYUxpc3QiLCJUcm9waHlMaXN0Iiwic3VicmVkZGl0X3NldHRpbmdzIiwibW9kYWN0aW9uIiwid2lraXBhZ2UiLCJ3aWtpcGFnZXNldHRpbmdzIiwid2lraXBhZ2VsaXN0aW5nIiwiTGl2ZVVwZGF0ZUV2ZW50IiwiTGl2ZVVwZGF0ZSIsIkxhYmVsZWRNdWx0aSIsIk1vZG1haWxDb252ZXJzYXRpb24iLCJNb2RtYWlsQ29udmVyc2F0aW9uQXV0aG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/create_config.js":
/*!*****************************************************!*\
  !*** ./node_modules/snoowrap/dist/create_config.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = _default;\nexports.consoleLogger = void 0;\nvar _helpers = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/snoowrap/dist/helpers.js\");\nvar consoleLogger = Object.freeze({\n    warn () {\n        var _console;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        // eslint-disable-next-line no-console\n        (_console = console).warn.apply(_console, [\n            \"[warning]\"\n        ].concat(args));\n    },\n    info () {\n        var _console2;\n        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n            args[_key2] = arguments[_key2];\n        }\n        // eslint-disable-next-line no-console\n        (_console2 = console).info.apply(_console2, [\n            \"[info]\"\n        ].concat(args));\n    },\n    debug () {\n        var _console3;\n        for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n            args[_key3] = arguments[_key3];\n        }\n        // eslint-disable-next-line no-console\n        (_console3 = console).debug.apply(_console3, [\n            \"[debug]\"\n        ].concat(args));\n    },\n    trace () {\n        var _console4;\n        for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){\n            args[_key4] = arguments[_key4];\n        }\n        // eslint-disable-next-line no-console\n        (_console4 = console).trace.apply(_console4, [\n            \"[trace]\"\n        ].concat(args));\n    }\n});\nexports.consoleLogger = consoleLogger;\nfunction _default() {\n    var config = Object.create(null);\n    config.endpointDomain = \"reddit.com\";\n    config.requestDelay = 0;\n    config.requestTimeout = 30000;\n    config.continueAfterRatelimitError = false;\n    config.retryErrorCodes = [\n        502,\n        503,\n        504,\n        522\n    ];\n    config.maxRetryAttempts = 3;\n    config.warnings = true;\n    config.debug = false;\n    config.logger = consoleLogger;\n    config.proxies = true;\n    return (0, _helpers.addSnakeCaseShadowProps)(config);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9jcmVhdGVfY29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHRztBQUNsQkgscUJBQXFCLEdBQUcsS0FBSztBQUU3QixJQUFJSyxXQUFXQyxtQkFBT0EsQ0FBQyxtRUFBYztBQUVyQyxJQUFJRixnQkFBZ0JOLE9BQU9TLE1BQU0sQ0FBQztJQUNoQ0M7UUFDRSxJQUFJQztRQUVKLElBQUssSUFBSUMsT0FBT0MsVUFBVUMsTUFBTSxFQUFFQyxPQUFPLElBQUlDLE1BQU1KLE9BQU9LLE9BQU8sR0FBR0EsT0FBT0wsTUFBTUssT0FBUTtZQUN2RkYsSUFBSSxDQUFDRSxLQUFLLEdBQUdKLFNBQVMsQ0FBQ0ksS0FBSztRQUM5QjtRQUVBLHNDQUFzQztRQUNyQ04sQ0FBQUEsV0FBV08sT0FBTSxFQUFHUixJQUFJLENBQUNTLEtBQUssQ0FBQ1IsVUFBVTtZQUFDO1NBQVksQ0FBQ1MsTUFBTSxDQUFDTDtJQUNqRTtJQUVBTTtRQUNFLElBQUlDO1FBRUosSUFBSyxJQUFJQyxRQUFRVixVQUFVQyxNQUFNLEVBQUVDLE9BQU8sSUFBSUMsTUFBTU8sUUFBUUMsUUFBUSxHQUFHQSxRQUFRRCxPQUFPQyxRQUFTO1lBQzdGVCxJQUFJLENBQUNTLE1BQU0sR0FBR1gsU0FBUyxDQUFDVyxNQUFNO1FBQ2hDO1FBRUEsc0NBQXNDO1FBQ3JDRixDQUFBQSxZQUFZSixPQUFNLEVBQUdHLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxXQUFXO1lBQUM7U0FBUyxDQUFDRixNQUFNLENBQUNMO0lBQ2hFO0lBRUFVO1FBQ0UsSUFBSUM7UUFFSixJQUFLLElBQUlDLFFBQVFkLFVBQVVDLE1BQU0sRUFBRUMsT0FBTyxJQUFJQyxNQUFNVyxRQUFRQyxRQUFRLEdBQUdBLFFBQVFELE9BQU9DLFFBQVM7WUFDN0ZiLElBQUksQ0FBQ2EsTUFBTSxHQUFHZixTQUFTLENBQUNlLE1BQU07UUFDaEM7UUFFQSxzQ0FBc0M7UUFDckNGLENBQUFBLFlBQVlSLE9BQU0sRUFBR08sS0FBSyxDQUFDTixLQUFLLENBQUNPLFdBQVc7WUFBQztTQUFVLENBQUNOLE1BQU0sQ0FBQ0w7SUFDbEU7SUFFQWM7UUFDRSxJQUFJQztRQUVKLElBQUssSUFBSUMsUUFBUWxCLFVBQVVDLE1BQU0sRUFBRUMsT0FBTyxJQUFJQyxNQUFNZSxRQUFRQyxRQUFRLEdBQUdBLFFBQVFELE9BQU9DLFFBQVM7WUFDN0ZqQixJQUFJLENBQUNpQixNQUFNLEdBQUduQixTQUFTLENBQUNtQixNQUFNO1FBQ2hDO1FBRUEsc0NBQXNDO1FBQ3JDRixDQUFBQSxZQUFZWixPQUFNLEVBQUdXLEtBQUssQ0FBQ1YsS0FBSyxDQUFDVyxXQUFXO1lBQUM7U0FBVSxDQUFDVixNQUFNLENBQUNMO0lBQ2xFO0FBRUY7QUFDQWIscUJBQXFCLEdBQUdJO0FBRXhCLFNBQVNEO0lBQ1AsSUFBSTRCLFNBQVNqQyxPQUFPa0MsTUFBTSxDQUFDO0lBQzNCRCxPQUFPRSxjQUFjLEdBQUc7SUFDeEJGLE9BQU9HLFlBQVksR0FBRztJQUN0QkgsT0FBT0ksY0FBYyxHQUFHO0lBQ3hCSixPQUFPSywyQkFBMkIsR0FBRztJQUNyQ0wsT0FBT00sZUFBZSxHQUFHO1FBQUM7UUFBSztRQUFLO1FBQUs7S0FBSTtJQUM3Q04sT0FBT08sZ0JBQWdCLEdBQUc7SUFDMUJQLE9BQU9RLFFBQVEsR0FBRztJQUNsQlIsT0FBT1IsS0FBSyxHQUFHO0lBQ2ZRLE9BQU9TLE1BQU0sR0FBR3BDO0lBQ2hCMkIsT0FBT1UsT0FBTyxHQUFHO0lBQ2pCLE9BQU8sQ0FBQyxHQUFHcEMsU0FBU3FDLHVCQUF1QixFQUFFWDtBQUMvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZGRpdC1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9jcmVhdGVfY29uZmlnLmpzPzdlNWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbmV4cG9ydHMuY29uc29sZUxvZ2dlciA9IHZvaWQgMDtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4vaGVscGVycy5qc1wiKTtcblxudmFyIGNvbnNvbGVMb2dnZXIgPSBPYmplY3QuZnJlZXplKHtcbiAgd2FybigpIHtcbiAgICB2YXIgX2NvbnNvbGU7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAoX2NvbnNvbGUgPSBjb25zb2xlKS53YXJuLmFwcGx5KF9jb25zb2xlLCBbJ1t3YXJuaW5nXSddLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgaW5mbygpIHtcbiAgICB2YXIgX2NvbnNvbGUyO1xuXG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAoX2NvbnNvbGUyID0gY29uc29sZSkuaW5mby5hcHBseShfY29uc29sZTIsIFsnW2luZm9dJ10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICBkZWJ1ZygpIHtcbiAgICB2YXIgX2NvbnNvbGUzO1xuXG4gICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAoX2NvbnNvbGUzID0gY29uc29sZSkuZGVidWcuYXBwbHkoX2NvbnNvbGUzLCBbJ1tkZWJ1Z10nXS5jb25jYXQoYXJncykpO1xuICB9LFxuXG4gIHRyYWNlKCkge1xuICAgIHZhciBfY29uc29sZTQ7XG5cbiAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIChfY29uc29sZTQgPSBjb25zb2xlKS50cmFjZS5hcHBseShfY29uc29sZTQsIFsnW3RyYWNlXSddLmNvbmNhdChhcmdzKSk7XG4gIH1cblxufSk7XG5leHBvcnRzLmNvbnNvbGVMb2dnZXIgPSBjb25zb2xlTG9nZ2VyO1xuXG5mdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgdmFyIGNvbmZpZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbmZpZy5lbmRwb2ludERvbWFpbiA9ICdyZWRkaXQuY29tJztcbiAgY29uZmlnLnJlcXVlc3REZWxheSA9IDA7XG4gIGNvbmZpZy5yZXF1ZXN0VGltZW91dCA9IDMwMDAwO1xuICBjb25maWcuY29udGludWVBZnRlclJhdGVsaW1pdEVycm9yID0gZmFsc2U7XG4gIGNvbmZpZy5yZXRyeUVycm9yQ29kZXMgPSBbNTAyLCA1MDMsIDUwNCwgNTIyXTtcbiAgY29uZmlnLm1heFJldHJ5QXR0ZW1wdHMgPSAzO1xuICBjb25maWcud2FybmluZ3MgPSB0cnVlO1xuICBjb25maWcuZGVidWcgPSBmYWxzZTtcbiAgY29uZmlnLmxvZ2dlciA9IGNvbnNvbGVMb2dnZXI7XG4gIGNvbmZpZy5wcm94aWVzID0gdHJ1ZTtcbiAgcmV0dXJuICgwLCBfaGVscGVycy5hZGRTbmFrZUNhc2VTaGFkb3dQcm9wcykoY29uZmlnKTtcbn0iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX2RlZmF1bHQiLCJjb25zb2xlTG9nZ2VyIiwiX2hlbHBlcnMiLCJyZXF1aXJlIiwiZnJlZXplIiwid2FybiIsIl9jb25zb2xlIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb25zb2xlIiwiYXBwbHkiLCJjb25jYXQiLCJpbmZvIiwiX2NvbnNvbGUyIiwiX2xlbjIiLCJfa2V5MiIsImRlYnVnIiwiX2NvbnNvbGUzIiwiX2xlbjMiLCJfa2V5MyIsInRyYWNlIiwiX2NvbnNvbGU0IiwiX2xlbjQiLCJfa2V5NCIsImNvbmZpZyIsImNyZWF0ZSIsImVuZHBvaW50RG9tYWluIiwicmVxdWVzdERlbGF5IiwicmVxdWVzdFRpbWVvdXQiLCJjb250aW51ZUFmdGVyUmF0ZWxpbWl0RXJyb3IiLCJyZXRyeUVycm9yQ29kZXMiLCJtYXhSZXRyeUF0dGVtcHRzIiwid2FybmluZ3MiLCJsb2dnZXIiLCJwcm94aWVzIiwiYWRkU25ha2VDYXNlU2hhZG93UHJvcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/create_config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/errors.js":
/*!**********************************************!*\
  !*** ./node_modules/snoowrap/dist/errors.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.rateLimitWarning = rateLimitWarning;\nexports.StatusCodeError = exports.RequestError = exports.InvalidMethodCallError = exports.NoCredentialsError = exports.InvalidUserError = exports.RateLimitError = void 0;\nvar _constants = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/snoowrap/dist/constants.js\");\n/* eslint-disable max-len */ class RateLimitError extends Error {\n    constructor(){\n        super(\"\".concat(_constants.MODULE_NAME, \" refused to continue because reddit's ratelimit was exceeded. For more information about reddit's ratelimit, please consult reddit's API rules at \").concat(_constants.API_RULES_LINK, \".\"));\n    }\n}\nexports.RateLimitError = RateLimitError;\nclass InvalidUserError extends Error {\n    constructor(){\n        var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Cannot fetch information on the given user. Please be sure you have the right username.\";\n        super(message);\n    }\n}\nexports.InvalidUserError = InvalidUserError;\nclass NoCredentialsError extends Error {\n    constructor(){\n        var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Missing credentials passed to \".concat(_constants.MODULE_NAME, \" constructor. You must pass an object containing either (a) userAgent, clientId, clientSecret, and refreshToken properties, (b) userAgent and accessToken properties, or (c) userAgent, clientId, clientSecret, username, and password properties. For information, please read the docs at \").concat(_constants.DOCS_LINK, \".\");\n        super(message);\n    }\n}\nexports.NoCredentialsError = NoCredentialsError;\nclass InvalidMethodCallError extends Error {\n}\nexports.InvalidMethodCallError = InvalidMethodCallError;\nclass RequestError extends Error {\n}\nexports.RequestError = RequestError;\nclass StatusCodeError extends Error {\n}\nexports.StatusCodeError = StatusCodeError;\nfunction rateLimitWarning(millisecondsUntilReset) {\n    return \"Warning: \".concat(_constants.MODULE_NAME, \" temporarily stopped sending requests because reddit's ratelimit was exceeded. The request you attempted to send was queued, and will be sent to reddit when the current ratelimit period expires in \").concat(millisecondsUntilReset / 1000, \" seconds.\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHdCQUF3QixHQUFHRTtBQUMzQkYsdUJBQXVCLEdBQUdBLG9CQUFvQixHQUFHQSw4QkFBOEIsR0FBR0EsMEJBQTBCLEdBQUdBLHdCQUF3QixHQUFHQSxzQkFBc0IsR0FBRyxLQUFLO0FBRXhLLElBQUlTLGFBQWFDLG1CQUFPQSxDQUFDLHVFQUFnQjtBQUV6QywwQkFBMEIsR0FDMUIsTUFBTUYsdUJBQXVCRztJQUMzQkMsYUFBYztRQUNaLEtBQUssQ0FBQyxHQUFHQyxNQUFNLENBQUNKLFdBQVdLLFdBQVcsRUFBRSxzSkFBc0pELE1BQU0sQ0FBQ0osV0FBV00sY0FBYyxFQUFFO0lBQ2xPO0FBRUY7QUFFQWYsc0JBQXNCLEdBQUdRO0FBRXpCLE1BQU1ELHlCQUF5Qkk7SUFDN0JDLGFBQWM7UUFDWixJQUFJSSxVQUFVQyxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS0UsWUFBWUYsU0FBUyxDQUFDLEVBQUUsR0FBRztRQUNsRixLQUFLLENBQUNEO0lBQ1I7QUFFRjtBQUVBaEIsd0JBQXdCLEdBQUdPO0FBRTNCLE1BQU1ELDJCQUEyQks7SUFDL0JDLGFBQWM7UUFDWixJQUFJSSxVQUFVQyxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS0UsWUFBWUYsU0FBUyxDQUFDLEVBQUUsR0FBRyxpQ0FBaUNKLE1BQU0sQ0FBQ0osV0FBV0ssV0FBVyxFQUFFLGdTQUFnU0QsTUFBTSxDQUFDSixXQUFXVyxTQUFTLEVBQUU7UUFDL2MsS0FBSyxDQUFDSjtJQUNSO0FBRUY7QUFFQWhCLDBCQUEwQixHQUFHTTtBQUU3QixNQUFNRCwrQkFBK0JNO0FBQU87QUFFNUNYLDhCQUE4QixHQUFHSztBQUVqQyxNQUFNRCxxQkFBcUJPO0FBQU87QUFFbENYLG9CQUFvQixHQUFHSTtBQUV2QixNQUFNRCx3QkFBd0JRO0FBQU87QUFFckNYLHVCQUF1QixHQUFHRztBQUUxQixTQUFTRCxpQkFBaUJtQixzQkFBc0I7SUFDOUMsT0FBTyxZQUFZUixNQUFNLENBQUNKLFdBQVdLLFdBQVcsRUFBRSx5TUFBeU1ELE1BQU0sQ0FBQ1EseUJBQXlCLE1BQU07QUFDblMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3Nub293cmFwL2Rpc3QvZXJyb3JzLmpzPzBlNmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnJhdGVMaW1pdFdhcm5pbmcgPSByYXRlTGltaXRXYXJuaW5nO1xuZXhwb3J0cy5TdGF0dXNDb2RlRXJyb3IgPSBleHBvcnRzLlJlcXVlc3RFcnJvciA9IGV4cG9ydHMuSW52YWxpZE1ldGhvZENhbGxFcnJvciA9IGV4cG9ydHMuTm9DcmVkZW50aWFsc0Vycm9yID0gZXhwb3J0cy5JbnZhbGlkVXNlckVycm9yID0gZXhwb3J0cy5SYXRlTGltaXRFcnJvciA9IHZvaWQgMDtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHMuanNcIik7XG5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbmNsYXNzIFJhdGVMaW1pdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIlwiLmNvbmNhdChfY29uc3RhbnRzLk1PRFVMRV9OQU1FLCBcIiByZWZ1c2VkIHRvIGNvbnRpbnVlIGJlY2F1c2UgcmVkZGl0J3MgcmF0ZWxpbWl0IHdhcyBleGNlZWRlZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgcmVkZGl0J3MgcmF0ZWxpbWl0LCBwbGVhc2UgY29uc3VsdCByZWRkaXQncyBBUEkgcnVsZXMgYXQgXCIpLmNvbmNhdChfY29uc3RhbnRzLkFQSV9SVUxFU19MSU5LLCBcIi5cIikpO1xuICB9XG5cbn1cblxuZXhwb3J0cy5SYXRlTGltaXRFcnJvciA9IFJhdGVMaW1pdEVycm9yO1xuXG5jbGFzcyBJbnZhbGlkVXNlckVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ0Nhbm5vdCBmZXRjaCBpbmZvcm1hdGlvbiBvbiB0aGUgZ2l2ZW4gdXNlci4gUGxlYXNlIGJlIHN1cmUgeW91IGhhdmUgdGhlIHJpZ2h0IHVzZXJuYW1lLic7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gIH1cblxufVxuXG5leHBvcnRzLkludmFsaWRVc2VyRXJyb3IgPSBJbnZhbGlkVXNlckVycm9yO1xuXG5jbGFzcyBOb0NyZWRlbnRpYWxzRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHZhciBtZXNzYWdlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBcIk1pc3NpbmcgY3JlZGVudGlhbHMgcGFzc2VkIHRvIFwiLmNvbmNhdChfY29uc3RhbnRzLk1PRFVMRV9OQU1FLCBcIiBjb25zdHJ1Y3Rvci4gWW91IG11c3QgcGFzcyBhbiBvYmplY3QgY29udGFpbmluZyBlaXRoZXIgKGEpIHVzZXJBZ2VudCwgY2xpZW50SWQsIGNsaWVudFNlY3JldCwgYW5kIHJlZnJlc2hUb2tlbiBwcm9wZXJ0aWVzLCAoYikgdXNlckFnZW50IGFuZCBhY2Nlc3NUb2tlbiBwcm9wZXJ0aWVzLCBvciAoYykgdXNlckFnZW50LCBjbGllbnRJZCwgY2xpZW50U2VjcmV0LCB1c2VybmFtZSwgYW5kIHBhc3N3b3JkIHByb3BlcnRpZXMuIEZvciBpbmZvcm1hdGlvbiwgcGxlYXNlIHJlYWQgdGhlIGRvY3MgYXQgXCIpLmNvbmNhdChfY29uc3RhbnRzLkRPQ1NfTElOSywgXCIuXCIpO1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG5cbn1cblxuZXhwb3J0cy5Ob0NyZWRlbnRpYWxzRXJyb3IgPSBOb0NyZWRlbnRpYWxzRXJyb3I7XG5cbmNsYXNzIEludmFsaWRNZXRob2RDYWxsRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuXG5leHBvcnRzLkludmFsaWRNZXRob2RDYWxsRXJyb3IgPSBJbnZhbGlkTWV0aG9kQ2FsbEVycm9yO1xuXG5jbGFzcyBSZXF1ZXN0RXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuXG5leHBvcnRzLlJlcXVlc3RFcnJvciA9IFJlcXVlc3RFcnJvcjtcblxuY2xhc3MgU3RhdHVzQ29kZUVycm9yIGV4dGVuZHMgRXJyb3Ige31cblxuZXhwb3J0cy5TdGF0dXNDb2RlRXJyb3IgPSBTdGF0dXNDb2RlRXJyb3I7XG5cbmZ1bmN0aW9uIHJhdGVMaW1pdFdhcm5pbmcobWlsbGlzZWNvbmRzVW50aWxSZXNldCkge1xuICByZXR1cm4gXCJXYXJuaW5nOiBcIi5jb25jYXQoX2NvbnN0YW50cy5NT0RVTEVfTkFNRSwgXCIgdGVtcG9yYXJpbHkgc3RvcHBlZCBzZW5kaW5nIHJlcXVlc3RzIGJlY2F1c2UgcmVkZGl0J3MgcmF0ZWxpbWl0IHdhcyBleGNlZWRlZC4gVGhlIHJlcXVlc3QgeW91IGF0dGVtcHRlZCB0byBzZW5kIHdhcyBxdWV1ZWQsIGFuZCB3aWxsIGJlIHNlbnQgdG8gcmVkZGl0IHdoZW4gdGhlIGN1cnJlbnQgcmF0ZWxpbWl0IHBlcmlvZCBleHBpcmVzIGluIFwiKS5jb25jYXQobWlsbGlzZWNvbmRzVW50aWxSZXNldCAvIDEwMDAsIFwiIHNlY29uZHMuXCIpO1xufSJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJhdGVMaW1pdFdhcm5pbmciLCJTdGF0dXNDb2RlRXJyb3IiLCJSZXF1ZXN0RXJyb3IiLCJJbnZhbGlkTWV0aG9kQ2FsbEVycm9yIiwiTm9DcmVkZW50aWFsc0Vycm9yIiwiSW52YWxpZFVzZXJFcnJvciIsIlJhdGVMaW1pdEVycm9yIiwiX2NvbnN0YW50cyIsInJlcXVpcmUiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiY29uY2F0IiwiTU9EVUxFX05BTUUiLCJBUElfUlVMRVNfTElOSyIsIm1lc3NhZ2UiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJET0NTX0xJTksiLCJtaWxsaXNlY29uZHNVbnRpbFJlc2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/helpers.js":
/*!***********************************************!*\
  !*** ./node_modules/snoowrap/dist/helpers.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getEmptyRepliesListing = getEmptyRepliesListing;\nexports.addEmptyRepliesListing = addEmptyRepliesListing;\nexports.handleJsonErrors = handleJsonErrors;\nexports.findMessageInTree = findMessageInTree;\nexports.formatPermissions = formatPermissions;\nexports.renameKey = renameKey;\nexports.buildRepliesTree = buildRepliesTree;\nexports.addFullnamePrefix = addFullnamePrefix;\nexports.hasFullnamePrefix = hasFullnamePrefix;\nexports.addSnakeCaseShadowProps = addSnakeCaseShadowProps;\nexports.defineInspectFunc = defineInspectFunc;\nexports.requiredArg = requiredArg;\nexports.isBrowser = exports.formatLivethreadPermissions = exports.formatModPermissions = void 0;\nvar _util = _interopRequireDefault(__webpack_require__(/*! util */ \"util\"));\nvar _lodash = __webpack_require__(/*! lodash */ \"lodash\");\nvar _constants = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/snoowrap/dist/constants.js\");\nvar _More = __webpack_require__(/*! ./objects/More.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/More.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(source, true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(source).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n* @summary Returns an unfetched empty replies Listing for an item.\n* @param {Comment|Submission|PrivateMessage} item An item without a replies Listing\n* @returns {Listing} The empty replies Listing\n* @api private\n*/ function getEmptyRepliesListing(item) {\n    if (item.constructor._name === \"Comment\") {\n        return item._r._newObject(\"Listing\", {\n            _uri: \"comments/\".concat((item.link_id || item.parent_id).slice(3)),\n            _query: {\n                comment: item.name.slice(3)\n            },\n            _transform: (0, _lodash.property)(\"comments[0].replies\"),\n            _link_id: item.link_id,\n            _isCommentList: true\n        });\n    }\n    if (item.constructor._name === \"Submission\") {\n        return item._r._newObject(\"Listing\", {\n            _uri: \"comments/\".concat(item.id),\n            _transform: (0, _lodash.property)(\"comments\"),\n            _isCommentList: true\n        });\n    }\n    return item._r._newObject(\"Listing\");\n}\n/**\n* @summary Adds an empty replies Listing to an item.\n* @param {Comment|PrivateMessage} item\n* @returns {Comment|PrivateMessage} The item with the new replies Listing\n* @api private\n*/ function addEmptyRepliesListing(item) {\n    item.replies = getEmptyRepliesListing(item);\n    return item;\n}\nfunction handleJsonErrors(returnValue) {\n    return function(response) {\n        if ((0, _lodash.isEmpty)(response) || (0, _lodash.isEmpty)(response.json.errors)) {\n            return returnValue;\n        }\n        throw new Error(response.json.errors[0]);\n    };\n}\n/**\n* @summary Performs a depth-first search of a tree of private messages, in order to find a message with a given name.\n* @param {String} desiredName The fullname of the desired message\n* @param {PrivateMessage} rootNode The root message of the tree\n* @returns {PrivateMessage} The PrivateMessage with the given fullname, or undefined if it was not found in the tree.\n* @api private\n*/ function findMessageInTree(desiredName, rootNode) {\n    return rootNode.name === desiredName ? rootNode : (0, _lodash.find)(rootNode.replies.map((0, _lodash.partial)(findMessageInTree, desiredName)));\n}\n/**\n* @summary Formats permissions into a '+'/'-' string\n* @param {String[]} allPermissionNames All possible permissions in this category\n* @param {String[]} permsArray The permissions that should be enabled\n* @returns {String} The permissions formatted into a '+'/'-' string\n* @api private\n*/ function formatPermissions(allPermissionNames, permsArray) {\n    return permsArray ? allPermissionNames.map(function(type) {\n        return ((0, _lodash.includes)(permsArray, type) ? \"+\" : \"-\") + type;\n    }).join(\",\") : \"+all\";\n}\nvar formatModPermissions = (0, _lodash.partial)(formatPermissions, _constants.MODERATOR_PERMISSIONS);\nexports.formatModPermissions = formatModPermissions;\nvar formatLivethreadPermissions = (0, _lodash.partial)(formatPermissions, _constants.LIVETHREAD_PERMISSIONS);\n/**\n* @summary Renames a key on an object, omitting the old key\n* @param {Object} obj\n* @param oldKey {String}\n* @param newKey {String}\n* @returns {Object} A version of the object with the key renamed\n* @api private\n*/ exports.formatLivethreadPermissions = formatLivethreadPermissions;\nfunction renameKey(obj, oldKey, newKey) {\n    return obj && (0, _lodash.omit)(_objectSpread({}, obj, {\n        [newKey]: obj[oldKey]\n    }), oldKey);\n}\n/**\n* @summary Builds a replies tree from a list of child comments or messages\n* @desc When reddit returns private messages (or comments from the /api/morechildren endpoint), it arranges their in a very\nnonintuitive way (see https://github.com/not-an-aardvark/snoowrap/issues/15 for details). This function rearranges the message\ntree so that replies are threaded properly.\n* @param {Array} childList The list of child comments\n* @returns {Array} The resulting list of child comments, arranged into a tree.\n* @api private\n*/ function buildRepliesTree(childList) {\n    var childMap = (0, _lodash.keyBy)(childList, \"name\");\n    childList.forEach(addEmptyRepliesListing);\n    childList.filter(function(child) {\n        return child.constructor._name === \"Comment\";\n    }).forEach(function(child) {\n        return child.replies._more = _More.emptyChildren;\n    });\n    (0, _lodash.remove)(childList, function(child) {\n        return childMap[child.parent_id];\n    }).forEach(function(child) {\n        if (child.constructor._name === \"More\") {\n            childMap[child.parent_id].replies._setMore(child);\n            child.link_id = childMap[child.parent_id].link_id;\n        } else {\n            childMap[child.parent_id].replies.push(child);\n        }\n    });\n    return childList;\n}\n/**\n* @summary Adds a fullname prefix to an item, if it doesn't have a prefix already. If the item is a RedditContent object, gets\nthe item's fullname.\n* @param {String|RedditContent} item\n* @returns {String}\n* @api private\n*/ function addFullnamePrefix(item, prefix) {\n    if (typeof item === \"string\") {\n        return hasFullnamePrefix(item) ? item : prefix + item;\n    }\n    return item.name;\n}\n/**\n* @summary Determines whether a string is a \"fullname\". A \"fullname\" starts with \"t1_\", \"t2_\", ... \"t8_\", or \"LiveUpdateEvent_\".\n* @param {String} item\n* @returns {boolean}\n* @api private\n*/ function hasFullnamePrefix(item) {\n    return /^(t\\d|LiveUpdateEvent)_/.test(item);\n}\n/**\n* @summary Adds snake_case getters and setters to an object\n* @desc All of snoowrap's functions and object options used to be defined in snake_case. For backwards compatibility,\nsnake_case property names (e.g. for the snoowrap constructor) are still supported. This function adds snake_case getters and\nsetters to a camelCase object, such that accessing and setting the snake_case property also correctly set the camelCase version\nof the property.\n* @param {object} obj The object that should have getters/setters attached\n* @returns The updated version of `obj`\n* @api private\n*/ function addSnakeCaseShadowProps(obj) {\n    Object.keys(obj).filter(function(key) {\n        return !key.startsWith(\"_\") && key !== (0, _lodash.snakeCase)(key);\n    }).forEach(function(key) {\n        Object.defineProperty(obj, (0, _lodash.snakeCase)(key), {\n            get: function() {\n                return obj[key];\n            },\n            set: function(value) {\n                return obj[key] = value;\n            }\n        });\n    });\n    return obj;\n}\nvar isBrowser = typeof self === \"object\";\nexports.isBrowser = isBrowser;\nfunction defineInspectFunc(obj, inspectFunc) {\n    if (isBrowser) {\n        return;\n    } // Use the util.inspect.custom symbol if available (Node 6.6.0+)\n    var inspectKey = _util.default.inspect && typeof _util.default.inspect.custom === \"symbol\" ? _util.default.inspect.custom : \"inspect\";\n    Object.defineProperty(obj, inspectKey, {\n        writable: true,\n        enumerable: false,\n        value: inspectFunc\n    });\n}\nfunction requiredArg(argName) {\n    throw new TypeError(\"Missing required argument \".concat(argName));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/Comment.js":
/*!*******************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/Comment.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _helpers = __webpack_require__(/*! ../helpers.js */ \"(rsc)/./node_modules/snoowrap/dist/helpers.js\");\nvar _Listing = _interopRequireDefault(__webpack_require__(/*! ./Listing.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/Listing.js\"));\nvar _More = __webpack_require__(/*! ./More.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/More.js\");\nvar _VoteableContent = _interopRequireDefault(__webpack_require__(/*! ./VoteableContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/VoteableContent.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/**\n* A class representing a reddit comment\n* <style> #Comment {display: none} </style>\n* @example\n*\n* // Get a comment with the given ID\n* r.getComment('c0hkuyq')\n*\n* @extends VoteableContent\n*/ var Comment = class Comment extends _VoteableContent.default {\n    constructor(options, _r, _hasFetched){\n        super(options, _r, _hasFetched);\n        if (_hasFetched) {\n            /* If a comment is in a deep comment chain, reddit will send a single `more` object with name `t1__` in place of the\n      comment's replies. This is the equivalent of seeing a 'Continue this thread' link on the HTML site, and it indicates that\n      replies should be fetched by sending another request to view the deep comment alone, and parsing the replies from that. */ if (this.replies instanceof _Listing.default && !this.replies.length && this.replies._more && this.replies._more.name === \"t1__\") {\n                this.replies = (0, _helpers.getEmptyRepliesListing)(this);\n            } else if (this.replies === \"\") {\n                /* If a comment has no replies, reddit returns an empty string as its `replies` property rather than an empty Listing.\n        This behavior is unexpected, so replace the empty string with an empty Listing. */ this.replies = this._r._newObject(\"Listing\", {\n                    children: [],\n                    _more: _More.emptyChildren,\n                    _isCommentList: true\n                });\n            } else if (this.replies._more && !this.replies._more.link_id) {\n                this.replies._more.link_id = this.link_id;\n            }\n        }\n    }\n    _transformApiResponse(response) {\n        return (0, _helpers.addEmptyRepliesListing)(response[0]);\n    }\n    get _uri() {\n        return \"api/info?id=\".concat(this.name);\n    }\n    /**\n  * @summary Locks this Comment, preventing new comments from being posted on it.\n  * @returns {Promise} The updated version of this Comment\n  * @example r.getComment('d1xclfo').lock()\n  */ lock() {\n        return this._post({\n            uri: \"api/lock\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Unlocks this Comment, allowing comments to be posted on it again.\n  * @returns {Promise} The updated version of this Comment\n  * @example r.getComment('d1xclfo').unlock()\n  */ unlock() {\n        return this._post({\n            uri: \"api/unlock\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n};\nvar _default = Comment;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9vYmplY3RzL0NvbW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUcsS0FBSztBQUV2QixJQUFJRyxXQUFXQyxtQkFBT0EsQ0FBQyxvRUFBZTtBQUV0QyxJQUFJQyxXQUFXQyx1QkFBdUJGLG1CQUFPQSxDQUFDLDJFQUFjO0FBRTVELElBQUlHLFFBQVFILG1CQUFPQSxDQUFDLHFFQUFXO0FBRS9CLElBQUlJLG1CQUFtQkYsdUJBQXVCRixtQkFBT0EsQ0FBQywyRkFBc0I7QUFFNUUsU0FBU0UsdUJBQXVCRyxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVQLFNBQVNPO0lBQUk7QUFBRztBQUU5Rjs7Ozs7Ozs7O0FBU0EsR0FDQSxJQUFJRSxVQUFVLE1BQU1BLGdCQUFnQkgsaUJBQWlCTixPQUFPO0lBQzFEVSxZQUFZQyxPQUFPLEVBQUVDLEVBQUUsRUFBRUMsV0FBVyxDQUFFO1FBQ3BDLEtBQUssQ0FBQ0YsU0FBU0MsSUFBSUM7UUFFbkIsSUFBSUEsYUFBYTtZQUNmOzs4SEFFd0gsR0FDeEgsSUFBSSxJQUFJLENBQUNDLE9BQU8sWUFBWVgsU0FBU0gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDYyxPQUFPLENBQUNDLE1BQU0sSUFBSSxJQUFJLENBQUNELE9BQU8sQ0FBQ0UsS0FBSyxJQUFJLElBQUksQ0FBQ0YsT0FBTyxDQUFDRSxLQUFLLENBQUNDLElBQUksS0FBSyxRQUFRO2dCQUNoSSxJQUFJLENBQUNILE9BQU8sR0FBRyxDQUFDLEdBQUdiLFNBQVNpQixzQkFBc0IsRUFBRSxJQUFJO1lBQzFELE9BQU8sSUFBSSxJQUFJLENBQUNKLE9BQU8sS0FBSyxJQUFJO2dCQUM5Qjt3RkFDZ0YsR0FDaEYsSUFBSSxDQUFDQSxPQUFPLEdBQUcsSUFBSSxDQUFDRixFQUFFLENBQUNPLFVBQVUsQ0FBQyxXQUFXO29CQUMzQ0MsVUFBVSxFQUFFO29CQUNaSixPQUFPWCxNQUFNZ0IsYUFBYTtvQkFDMUJDLGdCQUFnQjtnQkFDbEI7WUFDRixPQUFPLElBQUksSUFBSSxDQUFDUixPQUFPLENBQUNFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQ0YsT0FBTyxDQUFDRSxLQUFLLENBQUNPLE9BQU8sRUFBRTtnQkFDNUQsSUFBSSxDQUFDVCxPQUFPLENBQUNFLEtBQUssQ0FBQ08sT0FBTyxHQUFHLElBQUksQ0FBQ0EsT0FBTztZQUMzQztRQUNGO0lBQ0Y7SUFFQUMsc0JBQXNCQyxRQUFRLEVBQUU7UUFDOUIsT0FBTyxDQUFDLEdBQUd4QixTQUFTeUIsc0JBQXNCLEVBQUVELFFBQVEsQ0FBQyxFQUFFO0lBQ3pEO0lBRUEsSUFBSUUsT0FBTztRQUNULE9BQU8sZUFBZUMsTUFBTSxDQUFDLElBQUksQ0FBQ1gsSUFBSTtJQUN4QztJQUNBOzs7O0VBSUEsR0FHQVksT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDQyxLQUFLLENBQUM7WUFDaEJDLEtBQUs7WUFDTEMsTUFBTTtnQkFDSkMsSUFBSSxJQUFJLENBQUNoQixJQUFJO1lBQ2Y7UUFDRixHQUFHaUIsTUFBTSxDQUFDLElBQUk7SUFDaEI7SUFDQTs7OztFQUlBLEdBR0FDLFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQ0wsS0FBSyxDQUFDO1lBQ2hCQyxLQUFLO1lBQ0xDLE1BQU07Z0JBQ0pDLElBQUksSUFBSSxDQUFDaEIsSUFBSTtZQUNmO1FBQ0YsR0FBR2lCLE1BQU0sQ0FBQyxJQUFJO0lBQ2hCO0FBRUY7QUFDQSxJQUFJRSxXQUFXM0I7QUFDZlgsa0JBQWUsR0FBR3NDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkZGl0LWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9zbm9vd3JhcC9kaXN0L29iamVjdHMvQ29tbWVudC5qcz9hZjYwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vaGVscGVycy5qc1wiKTtcblxudmFyIF9MaXN0aW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MaXN0aW5nLmpzXCIpKTtcblxudmFyIF9Nb3JlID0gcmVxdWlyZShcIi4vTW9yZS5qc1wiKTtcblxudmFyIF9Wb3RlYWJsZUNvbnRlbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1ZvdGVhYmxlQ29udGVudC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuKiBBIGNsYXNzIHJlcHJlc2VudGluZyBhIHJlZGRpdCBjb21tZW50XG4qIDxzdHlsZT4gI0NvbW1lbnQge2Rpc3BsYXk6IG5vbmV9IDwvc3R5bGU+XG4qIEBleGFtcGxlXG4qXG4qIC8vIEdldCBhIGNvbW1lbnQgd2l0aCB0aGUgZ2l2ZW4gSURcbiogci5nZXRDb21tZW50KCdjMGhrdXlxJylcbipcbiogQGV4dGVuZHMgVm90ZWFibGVDb250ZW50XG4qL1xudmFyIENvbW1lbnQgPSBjbGFzcyBDb21tZW50IGV4dGVuZHMgX1ZvdGVhYmxlQ29udGVudC5kZWZhdWx0IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucywgX3IsIF9oYXNGZXRjaGVkKSB7XG4gICAgc3VwZXIob3B0aW9ucywgX3IsIF9oYXNGZXRjaGVkKTtcblxuICAgIGlmIChfaGFzRmV0Y2hlZCkge1xuICAgICAgLyogSWYgYSBjb21tZW50IGlzIGluIGEgZGVlcCBjb21tZW50IGNoYWluLCByZWRkaXQgd2lsbCBzZW5kIGEgc2luZ2xlIGBtb3JlYCBvYmplY3Qgd2l0aCBuYW1lIGB0MV9fYCBpbiBwbGFjZSBvZiB0aGVcbiAgICAgIGNvbW1lbnQncyByZXBsaWVzLiBUaGlzIGlzIHRoZSBlcXVpdmFsZW50IG9mIHNlZWluZyBhICdDb250aW51ZSB0aGlzIHRocmVhZCcgbGluayBvbiB0aGUgSFRNTCBzaXRlLCBhbmQgaXQgaW5kaWNhdGVzIHRoYXRcbiAgICAgIHJlcGxpZXMgc2hvdWxkIGJlIGZldGNoZWQgYnkgc2VuZGluZyBhbm90aGVyIHJlcXVlc3QgdG8gdmlldyB0aGUgZGVlcCBjb21tZW50IGFsb25lLCBhbmQgcGFyc2luZyB0aGUgcmVwbGllcyBmcm9tIHRoYXQuICovXG4gICAgICBpZiAodGhpcy5yZXBsaWVzIGluc3RhbmNlb2YgX0xpc3RpbmcuZGVmYXVsdCAmJiAhdGhpcy5yZXBsaWVzLmxlbmd0aCAmJiB0aGlzLnJlcGxpZXMuX21vcmUgJiYgdGhpcy5yZXBsaWVzLl9tb3JlLm5hbWUgPT09ICd0MV9fJykge1xuICAgICAgICB0aGlzLnJlcGxpZXMgPSAoMCwgX2hlbHBlcnMuZ2V0RW1wdHlSZXBsaWVzTGlzdGluZykodGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucmVwbGllcyA9PT0gJycpIHtcbiAgICAgICAgLyogSWYgYSBjb21tZW50IGhhcyBubyByZXBsaWVzLCByZWRkaXQgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcgYXMgaXRzIGByZXBsaWVzYCBwcm9wZXJ0eSByYXRoZXIgdGhhbiBhbiBlbXB0eSBMaXN0aW5nLlxuICAgICAgICBUaGlzIGJlaGF2aW9yIGlzIHVuZXhwZWN0ZWQsIHNvIHJlcGxhY2UgdGhlIGVtcHR5IHN0cmluZyB3aXRoIGFuIGVtcHR5IExpc3RpbmcuICovXG4gICAgICAgIHRoaXMucmVwbGllcyA9IHRoaXMuX3IuX25ld09iamVjdCgnTGlzdGluZycsIHtcbiAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgX21vcmU6IF9Nb3JlLmVtcHR5Q2hpbGRyZW4sXG4gICAgICAgICAgX2lzQ29tbWVudExpc3Q6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucmVwbGllcy5fbW9yZSAmJiAhdGhpcy5yZXBsaWVzLl9tb3JlLmxpbmtfaWQpIHtcbiAgICAgICAgdGhpcy5yZXBsaWVzLl9tb3JlLmxpbmtfaWQgPSB0aGlzLmxpbmtfaWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3RyYW5zZm9ybUFwaVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuICgwLCBfaGVscGVycy5hZGRFbXB0eVJlcGxpZXNMaXN0aW5nKShyZXNwb25zZVswXSk7XG4gIH1cblxuICBnZXQgX3VyaSgpIHtcbiAgICByZXR1cm4gXCJhcGkvaW5mbz9pZD1cIi5jb25jYXQodGhpcy5uYW1lKTtcbiAgfVxuICAvKipcbiAgKiBAc3VtbWFyeSBMb2NrcyB0aGlzIENvbW1lbnQsIHByZXZlbnRpbmcgbmV3IGNvbW1lbnRzIGZyb20gYmVpbmcgcG9zdGVkIG9uIGl0LlxuICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgdXBkYXRlZCB2ZXJzaW9uIG9mIHRoaXMgQ29tbWVudFxuICAqIEBleGFtcGxlIHIuZ2V0Q29tbWVudCgnZDF4Y2xmbycpLmxvY2soKVxuICAqL1xuXG5cbiAgbG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zdCh7XG4gICAgICB1cmk6ICdhcGkvbG9jaycsXG4gICAgICBmb3JtOiB7XG4gICAgICAgIGlkOiB0aGlzLm5hbWVcbiAgICAgIH1cbiAgICB9KS5yZXR1cm4odGhpcyk7XG4gIH1cbiAgLyoqXG4gICogQHN1bW1hcnkgVW5sb2NrcyB0aGlzIENvbW1lbnQsIGFsbG93aW5nIGNvbW1lbnRzIHRvIGJlIHBvc3RlZCBvbiBpdCBhZ2Fpbi5cbiAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIHVwZGF0ZWQgdmVyc2lvbiBvZiB0aGlzIENvbW1lbnRcbiAgKiBAZXhhbXBsZSByLmdldENvbW1lbnQoJ2QxeGNsZm8nKS51bmxvY2soKVxuICAqL1xuXG5cbiAgdW5sb2NrKCkge1xuICAgIHJldHVybiB0aGlzLl9wb3N0KHtcbiAgICAgIHVyaTogJ2FwaS91bmxvY2snLFxuICAgICAgZm9ybToge1xuICAgICAgICBpZDogdGhpcy5uYW1lXG4gICAgICB9XG4gICAgfSkucmV0dXJuKHRoaXMpO1xuICB9XG5cbn07XG52YXIgX2RlZmF1bHQgPSBDb21tZW50O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9oZWxwZXJzIiwicmVxdWlyZSIsIl9MaXN0aW5nIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9Nb3JlIiwiX1ZvdGVhYmxlQ29udGVudCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJDb21tZW50IiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiX3IiLCJfaGFzRmV0Y2hlZCIsInJlcGxpZXMiLCJsZW5ndGgiLCJfbW9yZSIsIm5hbWUiLCJnZXRFbXB0eVJlcGxpZXNMaXN0aW5nIiwiX25ld09iamVjdCIsImNoaWxkcmVuIiwiZW1wdHlDaGlsZHJlbiIsIl9pc0NvbW1lbnRMaXN0IiwibGlua19pZCIsIl90cmFuc2Zvcm1BcGlSZXNwb25zZSIsInJlc3BvbnNlIiwiYWRkRW1wdHlSZXBsaWVzTGlzdGluZyIsIl91cmkiLCJjb25jYXQiLCJsb2NrIiwiX3Bvc3QiLCJ1cmkiLCJmb3JtIiwiaWQiLCJyZXR1cm4iLCJ1bmxvY2siLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/Comment.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/Listing.js":
/*!*******************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/Listing.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _lodash = __webpack_require__(/*! lodash */ \"lodash\");\nvar _Promise = _interopRequireDefault(__webpack_require__(/*! ../Promise.js */ \"(rsc)/./node_modules/snoowrap/dist/Promise.js\"));\nvar _util = _interopRequireDefault(__webpack_require__(/*! util */ \"util\"));\nvar _url = __webpack_require__(/*! url */ \"url\");\nvar _helpers = __webpack_require__(/*! ../helpers.js */ \"(rsc)/./node_modules/snoowrap/dist/helpers.js\");\nvar _errors = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/snoowrap/dist/errors.js\");\nvar _More = _interopRequireWildcard(__webpack_require__(/*! ./More.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/More.js\"));\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for(var key in obj){\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n                    if (desc.get || desc.set) {\n                        Object.defineProperty(newObj, key, desc);\n                    } else {\n                        newObj[key] = obj[key];\n                    }\n                }\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(source, true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(source).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n        for(var i = 0, arr2 = new Array(arr.length); i < arr.length; i++){\n            arr2[i] = arr[i];\n        }\n        return arr2;\n    }\n}\nvar INTERNAL_DEFAULTS = {\n    _query: {},\n    _transform: function(value) {\n        return value;\n    },\n    _method: \"get\",\n    _isCommentList: false,\n    _link_id: null,\n    _uri: null,\n    _more: null,\n    _cachedLookahead: null\n};\n/**\n* A class representing a list of content. This is a subclass of the native Array object, so it has all the properties of\nan Array (length, forEach, etc.) in addition to some added methods. The Listing can be extended by using the\n[#fetchMore()]{@link Listing#fetchMore} and\n[#fetchAll()]{@link Listing#fetchAll} functions. Note that these methods return new Listings, rather than mutating the\noriginal Listing.\n*\n* Most methods that return Listings will also accept `limit`, `after`, `before`, `show`, and `count` properties.\n*\n* If you've used the reddit API before (or used other API wrappers like [PRAW](https://praw.readthedocs.org/en/stable/)), you\nmight know that reddit uses a `MoreComments` object in its raw JSON responses, representing comments that have been stubbed\nout of Listings. In snoowrap, there are no exposed `MoreComments` objects; the objects returned by the reddit API are\nstripped from Listings and are used internally as sources for the `fetchMore` functions. This means that in snoowrap, Listings\nthat contain Comments can be used/expanded in the same manner as Listings that don't contain Comments, and for the most part\nyou don't have to worry about the distinction.\n\n(Incidentally, if you encounter a Listing that *does* contain a `MoreComments` object then it's a bug, so please report it.)\n\n* <style> #Listing {display: none} </style>\n* @extends Array\n*/ var Listing = class Listing extends Array {\n    constructor(){\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _r = arguments.length > 1 ? arguments[1] : undefined;\n        super();\n        if (!(this instanceof Listing)) {\n            // Safari 9 has an incorrect implementation of classes that extend Arrays. As a workaround,\n            // manually set the constructor and prototype.\n            this.constructor = Listing;\n            Object.setPrototypeOf(this, Listing.prototype);\n        }\n        this.push.apply(this, _toConsumableArray(options.children || []));\n        this._r = _r;\n        this._cachedLookahead = options._cachedLookahead;\n        (0, _lodash.defaultsDeep)(this, (0, _lodash.pick)(options, Object.keys(INTERNAL_DEFAULTS)), INTERNAL_DEFAULTS);\n        Object.assign(this._query, (0, _lodash.pick)(options, [\n            \"before\",\n            \"after\"\n        ]));\n        if (options.children && options.children[options.children.length - 1] instanceof _More.default) {\n            this._setMore(this.pop());\n        }\n    }\n    _setUri(value) {\n        var parsedUri = (0, _url.parse)(value, true);\n        this._uri = parsedUri.pathname;\n        (0, _lodash.defaultsDeep)(this._query, parsedUri.query);\n        if (parsedUri.query.before) {\n            this._query.after = null;\n        } else {\n            this._query.before = null;\n        }\n    }\n    /**\n  * @summary A getter that indicates whether this Listing has any more items to fetch.\n  * @type {boolean}\n  */ get isFinished() {\n        // The process of checking whether a Listing is 'finished' varies depending on what kind of Listing it is.\n        return this._isCommentList ? (0, _lodash.isEmpty)(this._cachedLookahead) && !!this._more && (0, _lodash.isEmpty)(this._more.children) : !this._uri || this._query.after === null && this._query.before === null;\n    }\n    get is_finished() {\n        // camel-case alias for backwards-compatibility.\n        // As a getter, the `isFinished` property doesn't have an alias like everything else.\n        return this.isFinished;\n    }\n    /**\n  * @summary Fetches some more items\n  * @param {object} options\n  * @param {number} options.amount The number of items to fetch.\n  * @param {boolean} [options.skipReplies=false] For a Listing that contains comment objects on a Submission, this option can\n  be used to save a few API calls, provided that only top-level comments are being examined. If this is set to `true`, snoowrap\n  is able to fetch 100 Comments per API call rather than 20, but all returned Comments will have no fetched replies by default.\n  *\n  * Internal details: When `skipReplies` is set to `true`, snoowrap uses reddit's `api/info` endpoint to fetch Comments. When\n  `skipReplies` is set to `false`, snoowrap uses reddit's `api/morechildren` endpoint. It's worth noting that reddit does\n  not allow concurrent requests to the `api/morechildren` endpoint by the same account.\n  * @param {boolean} [options.append=true] If `true`, the resulting Listing will contain the existing elements in addition to\n  the newly-fetched elements. If `false`, the resulting Listing will only contain the newly-fetched elements.\n  * @returns {Promise} A new Listing containing the newly-fetched elements. If `options.append` is `true`, the new Listing will\n  also contain all elements that were in the original Listing. Under most circumstances, the newly-fetched elements will appear\n  at the end of the new Listing. However, if reverse pagination is enabled (i.e. if this Listing was created with a `before`\n  query parameter), then the newly-fetched elements will appear at the beginning. In any case, continuity is maintained, i.e.\n  the order of items in the Listing will be the same as the order in which they appear on reddit.\n  * @example\n  * r.getHot({limit: 25}).then(myListing => {\n  *   console.log(myListing.length); // => 25\n  *   myListing.fetchMore({amount: 10}).then(extendedListing => {\n  *     console.log(extendedListing.length); // => 35\n  *   })\n  * });\n  */ fetchMore(options) {\n        var parsedOptions = (0, _lodash.defaults)(typeof options === \"number\" ? {\n            amount: options\n        } : (0, _lodash.clone)(options), {\n            append: true,\n            skipReplies: options.skip_replies\n        });\n        if (typeof parsedOptions.amount !== \"number\" || Number.isNaN(parsedOptions.amount)) {\n            throw new _errors.InvalidMethodCallError(\"Failed to fetch Listing. (`amount` parameter was missing or invalid)\");\n        }\n        if (parsedOptions.amount <= 0 || this.isFinished) {\n            return this._r._promiseWrap(_Promise.default.resolve(parsedOptions.append ? this._clone() : this._clone()._empty()));\n        }\n        if (this._cachedLookahead) {\n            var cloned = this._clone();\n            cloned.push.apply(cloned, _toConsumableArray(cloned._cachedLookahead.splice(0, parsedOptions.amount)));\n            return cloned.fetchMore(parsedOptions.amount - cloned.length + this.length);\n        }\n        return this._r._promiseWrap(this._more ? this._fetchMoreComments(parsedOptions) : this._fetchMoreRegular(parsedOptions));\n    }\n    _fetchMoreRegular(options) {\n        var _this = this;\n        var query = (0, _lodash.omitBy)((0, _lodash.clone)(this._query), function(value) {\n            return value === null || value === undefined;\n        });\n        if (!this._isCommentList) {\n            /* Reddit returns a different number of items per request depending on the `limit` querystring property specified in the\n      request. If no `limit` property is specified, reddit returns some number of items depending on the user's preferences\n      (currently 25 items with default preferences). If a `limit` property is specified, then reddit returns `limit` items per\n      batch. However, this is capped at 100, so if a `limit` larger than 100 items is specified, reddit will only return 100\n      items in the batch. (The cap of 100 could plausibly change to a different amount in the future.)\n       However, one caveat is that reddit's parser doesn't understand the javascript `Infinity` global. If `limit=Infinity` is\n      provided in the querystring, reddit won't understand the parameter so it'll just act as if no parameter was provided, and\n      will return 25 items in the batch. This is suboptimal behavior as far as snoowrap is concerned, because it means that 4\n      times as many requests are needed to fetch the entire listing.\n       To get around the issue, snoowrap caps the `limit` property at Number.MAX_SAFE_INTEGER when sending requests. This ensures\n      that `Infinity` will never be sent as part of the querystring, so reddit will always return the maximal 100 items per\n      request if the desired amount of items is large. */ query.limit = Math.min(options.amount, Number.MAX_SAFE_INTEGER);\n        }\n        return this._r.oauthRequest({\n            uri: this._uri,\n            qs: query,\n            method: this._method\n        }).then(this._transform).then(function(response) {\n            var cloned = _this._clone();\n            if (!options.append) {\n                cloned._empty();\n            }\n            if (cloned._query.before) {\n                cloned.unshift.apply(cloned, _toConsumableArray(response));\n                cloned._query.before = response._query.before;\n                cloned._query.after = null;\n            } else {\n                cloned.push.apply(cloned, _toConsumableArray(response));\n                cloned._query.before = null;\n                cloned._query.after = response._query.after;\n            }\n            if (_this._isCommentList) {\n                cloned._more = cloned._more || response._more || _More.emptyChildren;\n                if (response.length > options.amount) {\n                    cloned._cachedLookahead = Array.from(cloned.splice(options.amount));\n                }\n            }\n            return cloned.fetchMore(_objectSpread({}, options, {\n                append: true,\n                amount: options.amount - response.length\n            }));\n        });\n    }\n    /* Pagination for comments works differently than it does for most other things; rather than sending a link to the next page\n  within a Listing, reddit sends the last comment in the list as as a `more` object, with links to all the remaining comments\n  in the thread. */ _fetchMoreComments(options) {\n        var _this2 = this;\n        return this._more.fetchMore(options).then(function(moreComments) {\n            var cloned = _this2._clone();\n            if (!options.append) {\n                cloned._empty();\n            }\n            cloned.push.apply(cloned, _toConsumableArray(moreComments));\n            cloned._more.children = cloned._more.children.slice(options.amount);\n            return cloned;\n        });\n    }\n    /**\n  * @summary Fetches all of the items in this Listing, only stopping when there are none left.\n  * @param {object} [options] Fetching options -- see {@link Listing#fetchMore}\n  * @returns {Promise} A new fully-fetched Listing. Keep in mind that this method has the potential to exhaust your\n  ratelimit quickly if the Listing doesn't have a clear end (e.g. with posts on the front page), so use it with discretion.\n  * @example\n  *\n  * r.getMe().getUpvotedContent().fetchAll().then(console.log)\n  * // => Listing [ Submission { ... }, Submission { ... }, ... ]\n  */ fetchAll(options) {\n        return this.fetchMore(_objectSpread({}, options, {\n            amount: Infinity\n        }));\n    }\n    fetchUntil(options) {\n        this._r._warn(\"Listing#fetchUntil is deprecated -- use Listing#fetchMore instead.\");\n        return this.fetchMore(_objectSpread({}, options, {\n            append: true,\n            amount: options.length - this.length\n        }));\n    }\n    _clone() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$deep = _ref.deep, deep = _ref$deep === void 0 ? false : _ref$deep;\n        var properties = (0, _lodash.pick)(this, Object.keys(INTERNAL_DEFAULTS));\n        properties._query = (0, _lodash.clone)(properties._query);\n        properties._cachedLookahead = (0, _lodash.clone)(properties._cachedLookahead);\n        properties._more = this._more && this._more._clone();\n        var shallowChildren = Array.from(this);\n        properties.children = deep ? shallowChildren.map(function(item) {\n            return \"_clone\" in item && typeof item._clone === \"function\" ? item._clone({\n                deep\n            }) : item;\n        }) : shallowChildren;\n        return new Listing(properties, this._r);\n    }\n    _setMore(moreObj) {\n        this._more = moreObj;\n        this._isCommentList = true;\n    }\n    _empty() {\n        this.splice(0, this.length);\n        return this;\n    }\n    toJSON() {\n        return Array.from(this).map(function(item) {\n            return item && item.toJSON ? item.toJSON() : item;\n        });\n    }\n};\n(0, _helpers.defineInspectFunc)(Listing.prototype, function() {\n    return \"Listing \".concat(_util.default.inspect(Array.from(this)));\n});\nvar _default = Listing;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9vYmplY3RzL0xpc3RpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUcsS0FBSztBQUV2QixJQUFJRyxVQUFVQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUU5QixJQUFJQyxXQUFXQyx1QkFBdUJGLG1CQUFPQSxDQUFDLG9FQUFlO0FBRTdELElBQUlHLFFBQVFELHVCQUF1QkYsbUJBQU9BLENBQUMsa0JBQU07QUFFakQsSUFBSUksT0FBT0osbUJBQU9BLENBQUMsZ0JBQUs7QUFFeEIsSUFBSUssV0FBV0wsbUJBQU9BLENBQUMsb0VBQWU7QUFFdEMsSUFBSU0sVUFBVU4sbUJBQU9BLENBQUMsa0VBQWM7QUFFcEMsSUFBSU8sUUFBUUMsd0JBQXdCUixtQkFBT0EsQ0FBQyxxRUFBVztBQUV2RCxTQUFTUSx3QkFBd0JDLEdBQUc7SUFBSSxJQUFJQSxPQUFPQSxJQUFJQyxVQUFVLEVBQUU7UUFBRSxPQUFPRDtJQUFLLE9BQU87UUFBRSxJQUFJRSxTQUFTLENBQUM7UUFBRyxJQUFJRixPQUFPLE1BQU07WUFBRSxJQUFLLElBQUlHLE9BQU9ILElBQUs7Z0JBQUUsSUFBSWYsT0FBT21CLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNOLEtBQUtHLE1BQU07b0JBQUUsSUFBSUksT0FBT3RCLE9BQU9DLGNBQWMsSUFBSUQsT0FBT3VCLHdCQUF3QixHQUFHdkIsT0FBT3VCLHdCQUF3QixDQUFDUixLQUFLRyxPQUFPLENBQUM7b0JBQUcsSUFBSUksS0FBS0UsR0FBRyxJQUFJRixLQUFLRyxHQUFHLEVBQUU7d0JBQUV6QixPQUFPQyxjQUFjLENBQUNnQixRQUFRQyxLQUFLSTtvQkFBTyxPQUFPO3dCQUFFTCxNQUFNLENBQUNDLElBQUksR0FBR0gsR0FBRyxDQUFDRyxJQUFJO29CQUFFO2dCQUFFO1lBQUU7UUFBRTtRQUFFRCxPQUFPYixPQUFPLEdBQUdXO1FBQUssT0FBT0U7SUFBUTtBQUFFO0FBRXZkLFNBQVNULHVCQUF1Qk8sR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFWCxTQUFTVztJQUFJO0FBQUc7QUFFOUYsU0FBU1csUUFBUUMsTUFBTSxFQUFFQyxjQUFjO0lBQUksSUFBSUMsT0FBTzdCLE9BQU82QixJQUFJLENBQUNGO0lBQVMsSUFBSTNCLE9BQU84QixxQkFBcUIsRUFBRTtRQUFFLElBQUlDLFVBQVUvQixPQUFPOEIscUJBQXFCLENBQUNIO1FBQVMsSUFBSUMsZ0JBQWdCRyxVQUFVQSxRQUFRQyxNQUFNLENBQUMsU0FBVUMsR0FBRztZQUFJLE9BQU9qQyxPQUFPdUIsd0JBQXdCLENBQUNJLFFBQVFNLEtBQUtDLFVBQVU7UUFBRTtRQUFJTCxLQUFLTSxJQUFJLENBQUNDLEtBQUssQ0FBQ1AsTUFBTUU7SUFBVTtJQUFFLE9BQU9GO0FBQU07QUFFcFYsU0FBU1EsY0FBY0MsTUFBTTtJQUFJLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJQyxVQUFVQyxNQUFNLEVBQUVGLElBQUs7UUFBRSxJQUFJRyxTQUFTRixTQUFTLENBQUNELEVBQUUsSUFBSSxPQUFPQyxTQUFTLENBQUNELEVBQUUsR0FBRyxDQUFDO1FBQUcsSUFBSUEsSUFBSSxHQUFHO1lBQUViLFFBQVFnQixRQUFRLE1BQU1DLE9BQU8sQ0FBQyxTQUFVekIsR0FBRztnQkFBSTBCLGdCQUFnQk4sUUFBUXBCLEtBQUt3QixNQUFNLENBQUN4QixJQUFJO1lBQUc7UUFBSSxPQUFPLElBQUlsQixPQUFPNkMseUJBQXlCLEVBQUU7WUFBRTdDLE9BQU84QyxnQkFBZ0IsQ0FBQ1IsUUFBUXRDLE9BQU82Qyx5QkFBeUIsQ0FBQ0g7UUFBVSxPQUFPO1lBQUVoQixRQUFRZ0IsUUFBUUMsT0FBTyxDQUFDLFNBQVV6QixHQUFHO2dCQUFJbEIsT0FBT0MsY0FBYyxDQUFDcUMsUUFBUXBCLEtBQUtsQixPQUFPdUIsd0JBQXdCLENBQUNtQixRQUFReEI7WUFBTztRQUFJO0lBQUU7SUFBRSxPQUFPb0I7QUFBUTtBQUVyZ0IsU0FBU00sZ0JBQWdCN0IsR0FBRyxFQUFFRyxHQUFHLEVBQUVmLEtBQUs7SUFBSSxJQUFJZSxPQUFPSCxLQUFLO1FBQUVmLE9BQU9DLGNBQWMsQ0FBQ2MsS0FBS0csS0FBSztZQUFFZixPQUFPQTtZQUFPK0IsWUFBWTtZQUFNYSxjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRWpDLEdBQUcsQ0FBQ0csSUFBSSxHQUFHZjtJQUFPO0lBQUUsT0FBT1k7QUFBSztBQUVoTixTQUFTa0MsbUJBQW1CQyxHQUFHO0lBQUksT0FBT0MsbUJBQW1CRCxRQUFRRSxpQkFBaUJGLFFBQVFHO0FBQXNCO0FBRXBILFNBQVNBO0lBQXVCLE1BQU0sSUFBSUMsVUFBVTtBQUFvRDtBQUV4RyxTQUFTRixpQkFBaUJHLElBQUk7SUFBSSxJQUFJQyxPQUFPQyxRQUFRLElBQUl6RCxPQUFPdUQsU0FBU3ZELE9BQU9tQixTQUFTLENBQUN1QyxRQUFRLENBQUNyQyxJQUFJLENBQUNrQyxVQUFVLHNCQUFzQixPQUFPSSxNQUFNQyxJQUFJLENBQUNMO0FBQU87QUFFakssU0FBU0osbUJBQW1CRCxHQUFHO0lBQUksSUFBSVMsTUFBTUUsT0FBTyxDQUFDWCxNQUFNO1FBQUUsSUFBSyxJQUFJWCxJQUFJLEdBQUd1QixPQUFPLElBQUlILE1BQU1ULElBQUlULE1BQU0sR0FBR0YsSUFBSVcsSUFBSVQsTUFBTSxFQUFFRixJQUFLO1lBQUV1QixJQUFJLENBQUN2QixFQUFFLEdBQUdXLEdBQUcsQ0FBQ1gsRUFBRTtRQUFFO1FBQUUsT0FBT3VCO0lBQU07QUFBRTtBQUVySyxJQUFJQyxvQkFBb0I7SUFDdEJDLFFBQVEsQ0FBQztJQUNUQyxZQUFZLFNBQVU5RCxLQUFLO1FBQ3pCLE9BQU9BO0lBQ1Q7SUFDQStELFNBQVM7SUFDVEMsZ0JBQWdCO0lBQ2hCQyxVQUFVO0lBQ1ZDLE1BQU07SUFDTkMsT0FBTztJQUNQQyxrQkFBa0I7QUFDcEI7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkEsR0FFQSxJQUFJQyxVQUFVLE1BQU1BLGdCQUFnQmI7SUFDbENjLGFBQWM7UUFDWixJQUFJQyxVQUFVbEMsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUttQyxZQUFZbkMsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBRW5GLElBQUlvQyxLQUFLcEMsVUFBVUMsTUFBTSxHQUFHLElBQUlELFNBQVMsQ0FBQyxFQUFFLEdBQUdtQztRQUUvQyxLQUFLO1FBRUwsSUFBSSxDQUFFLEtBQUksWUFBWUgsT0FBTSxHQUFJO1lBQzlCLDJGQUEyRjtZQUMzRiw4Q0FBOEM7WUFDOUMsSUFBSSxDQUFDQyxXQUFXLEdBQUdEO1lBQ25CeEUsT0FBTzZFLGNBQWMsQ0FBQyxJQUFJLEVBQUVMLFFBQVFyRCxTQUFTO1FBQy9DO1FBRUEsSUFBSSxDQUFDZ0IsSUFBSSxDQUFDQyxLQUFLLENBQUMsSUFBSSxFQUFFYSxtQkFBbUJ5QixRQUFRSSxRQUFRLElBQUksRUFBRTtRQUMvRCxJQUFJLENBQUNGLEVBQUUsR0FBR0E7UUFDVixJQUFJLENBQUNMLGdCQUFnQixHQUFHRyxRQUFRSCxnQkFBZ0I7UUFDL0MsSUFBR2xFLFFBQVEwRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRzFFLFFBQVEyRSxJQUFJLEVBQUVOLFNBQVMxRSxPQUFPNkIsSUFBSSxDQUFDa0MscUJBQXFCQTtRQUM1Ri9ELE9BQU9pRixNQUFNLENBQUMsSUFBSSxDQUFDakIsTUFBTSxFQUFFLENBQUMsR0FBRzNELFFBQVEyRSxJQUFJLEVBQUVOLFNBQVM7WUFBQztZQUFVO1NBQVE7UUFFekUsSUFBSUEsUUFBUUksUUFBUSxJQUFJSixRQUFRSSxRQUFRLENBQUNKLFFBQVFJLFFBQVEsQ0FBQ3JDLE1BQU0sR0FBRyxFQUFFLFlBQVk1QixNQUFNVCxPQUFPLEVBQUU7WUFDOUYsSUFBSSxDQUFDOEUsUUFBUSxDQUFDLElBQUksQ0FBQ0MsR0FBRztRQUN4QjtJQUNGO0lBRUFDLFFBQVFqRixLQUFLLEVBQUU7UUFDYixJQUFJa0YsWUFBWSxDQUFDLEdBQUczRSxLQUFLNEUsS0FBSyxFQUFFbkYsT0FBTztRQUN2QyxJQUFJLENBQUNrRSxJQUFJLEdBQUdnQixVQUFVRSxRQUFRO1FBQzdCLElBQUdsRixRQUFRMEUsWUFBWSxFQUFFLElBQUksQ0FBQ2YsTUFBTSxFQUFFcUIsVUFBVUcsS0FBSztRQUV0RCxJQUFJSCxVQUFVRyxLQUFLLENBQUNDLE1BQU0sRUFBRTtZQUMxQixJQUFJLENBQUN6QixNQUFNLENBQUMwQixLQUFLLEdBQUc7UUFDdEIsT0FBTztZQUNMLElBQUksQ0FBQzFCLE1BQU0sQ0FBQ3lCLE1BQU0sR0FBRztRQUN2QjtJQUNGO0lBQ0E7OztFQUdBLEdBR0EsSUFBSUUsYUFBYTtRQUNmLDBHQUEwRztRQUMxRyxPQUFPLElBQUksQ0FBQ3hCLGNBQWMsR0FJeEIsQ0FBQyxHQUFHOUQsUUFBUXVGLE9BQU8sRUFBRSxJQUFJLENBQUNyQixnQkFBZ0IsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHakUsUUFBUXVGLE9BQU8sRUFBRSxJQUFJLENBQUN0QixLQUFLLENBQUNRLFFBQVEsSUFNdkcsQ0FBQyxJQUFJLENBQUNULElBQUksSUFBSSxJQUFJLENBQUNMLE1BQU0sQ0FBQzBCLEtBQUssS0FBSyxRQUFRLElBQUksQ0FBQzFCLE1BQU0sQ0FBQ3lCLE1BQU0sS0FBSztJQUN2RTtJQUVBLElBQUlJLGNBQWM7UUFDaEIsZ0RBQWdEO1FBQ2hELHFGQUFxRjtRQUNyRixPQUFPLElBQUksQ0FBQ0YsVUFBVTtJQUN4QjtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBeUJBLEdBR0FHLFVBQVVwQixPQUFPLEVBQUU7UUFDakIsSUFBSXFCLGdCQUFnQixDQUFDLEdBQUcxRixRQUFRMkYsUUFBUSxFQUFFLE9BQU90QixZQUFZLFdBQVc7WUFDdEV1QixRQUFRdkI7UUFDVixJQUFJLENBQUMsR0FBR3JFLFFBQVE2RixLQUFLLEVBQUV4QixVQUN2QjtZQUNFeUIsUUFBUTtZQUNSQyxhQUFhMUIsUUFBUTJCLFlBQVk7UUFDbkM7UUFFQSxJQUFJLE9BQU9OLGNBQWNFLE1BQU0sS0FBSyxZQUFZSyxPQUFPQyxLQUFLLENBQUNSLGNBQWNFLE1BQU0sR0FBRztZQUNsRixNQUFNLElBQUlyRixRQUFRNEYsc0JBQXNCLENBQUM7UUFDM0M7UUFFQSxJQUFJVCxjQUFjRSxNQUFNLElBQUksS0FBSyxJQUFJLENBQUNOLFVBQVUsRUFBRTtZQUNoRCxPQUFPLElBQUksQ0FBQ2YsRUFBRSxDQUFDNkIsWUFBWSxDQUFDbEcsU0FBU0gsT0FBTyxDQUFDc0csT0FBTyxDQUFDWCxjQUFjSSxNQUFNLEdBQUcsSUFBSSxDQUFDUSxNQUFNLEtBQUssSUFBSSxDQUFDQSxNQUFNLEdBQUdDLE1BQU07UUFDbEg7UUFFQSxJQUFJLElBQUksQ0FBQ3JDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUlzQyxTQUFTLElBQUksQ0FBQ0YsTUFBTTtZQUV4QkUsT0FBTzFFLElBQUksQ0FBQ0MsS0FBSyxDQUFDeUUsUUFBUTVELG1CQUFtQjRELE9BQU90QyxnQkFBZ0IsQ0FBQ3VDLE1BQU0sQ0FBQyxHQUFHZixjQUFjRSxNQUFNO1lBQ25HLE9BQU9ZLE9BQU9mLFNBQVMsQ0FBQ0MsY0FBY0UsTUFBTSxHQUFHWSxPQUFPcEUsTUFBTSxHQUFHLElBQUksQ0FBQ0EsTUFBTTtRQUM1RTtRQUVBLE9BQU8sSUFBSSxDQUFDbUMsRUFBRSxDQUFDNkIsWUFBWSxDQUFDLElBQUksQ0FBQ25DLEtBQUssR0FBRyxJQUFJLENBQUN5QyxrQkFBa0IsQ0FBQ2hCLGlCQUFpQixJQUFJLENBQUNpQixpQkFBaUIsQ0FBQ2pCO0lBQzNHO0lBRUFpQixrQkFBa0J0QyxPQUFPLEVBQUU7UUFDekIsSUFBSXVDLFFBQVEsSUFBSTtRQUVoQixJQUFJekIsUUFBUSxDQUFDLEdBQUduRixRQUFRNkcsTUFBTSxFQUFFLENBQUMsR0FBRzdHLFFBQVE2RixLQUFLLEVBQUUsSUFBSSxDQUFDbEMsTUFBTSxHQUFHLFNBQVU3RCxLQUFLO1lBQzlFLE9BQU9BLFVBQVUsUUFBUUEsVUFBVXdFO1FBQ3JDO1FBRUEsSUFBSSxDQUFDLElBQUksQ0FBQ1IsY0FBYyxFQUFFO1lBQ3hCOzs7Ozs7Ozs7Ozt1REFXaUQsR0FDakRxQixNQUFNMkIsS0FBSyxHQUFHQyxLQUFLQyxHQUFHLENBQUMzQyxRQUFRdUIsTUFBTSxFQUFFSyxPQUFPZ0IsZ0JBQWdCO1FBQ2hFO1FBRUEsT0FBTyxJQUFJLENBQUMxQyxFQUFFLENBQUMyQyxZQUFZLENBQUM7WUFDMUJDLEtBQUssSUFBSSxDQUFDbkQsSUFBSTtZQUNkb0QsSUFBSWpDO1lBQ0prQyxRQUFRLElBQUksQ0FBQ3hELE9BQU87UUFDdEIsR0FBR3lELElBQUksQ0FBQyxJQUFJLENBQUMxRCxVQUFVLEVBQUUwRCxJQUFJLENBQUMsU0FBVUMsUUFBUTtZQUM5QyxJQUFJZixTQUFTSSxNQUFNTixNQUFNO1lBRXpCLElBQUksQ0FBQ2pDLFFBQVF5QixNQUFNLEVBQUU7Z0JBQ25CVSxPQUFPRCxNQUFNO1lBQ2Y7WUFFQSxJQUFJQyxPQUFPN0MsTUFBTSxDQUFDeUIsTUFBTSxFQUFFO2dCQUN4Qm9CLE9BQU9nQixPQUFPLENBQUN6RixLQUFLLENBQUN5RSxRQUFRNUQsbUJBQW1CMkU7Z0JBQ2hEZixPQUFPN0MsTUFBTSxDQUFDeUIsTUFBTSxHQUFHbUMsU0FBUzVELE1BQU0sQ0FBQ3lCLE1BQU07Z0JBQzdDb0IsT0FBTzdDLE1BQU0sQ0FBQzBCLEtBQUssR0FBRztZQUN4QixPQUFPO2dCQUNMbUIsT0FBTzFFLElBQUksQ0FBQ0MsS0FBSyxDQUFDeUUsUUFBUTVELG1CQUFtQjJFO2dCQUM3Q2YsT0FBTzdDLE1BQU0sQ0FBQ3lCLE1BQU0sR0FBRztnQkFDdkJvQixPQUFPN0MsTUFBTSxDQUFDMEIsS0FBSyxHQUFHa0MsU0FBUzVELE1BQU0sQ0FBQzBCLEtBQUs7WUFDN0M7WUFFQSxJQUFJdUIsTUFBTTlDLGNBQWMsRUFBRTtnQkFDeEIwQyxPQUFPdkMsS0FBSyxHQUFHdUMsT0FBT3ZDLEtBQUssSUFBSXNELFNBQVN0RCxLQUFLLElBQUl6RCxNQUFNaUgsYUFBYTtnQkFFcEUsSUFBSUYsU0FBU25GLE1BQU0sR0FBR2lDLFFBQVF1QixNQUFNLEVBQUU7b0JBQ3BDWSxPQUFPdEMsZ0JBQWdCLEdBQUdaLE1BQU1DLElBQUksQ0FBQ2lELE9BQU9DLE1BQU0sQ0FBQ3BDLFFBQVF1QixNQUFNO2dCQUNuRTtZQUNGO1lBRUEsT0FBT1ksT0FBT2YsU0FBUyxDQUFDekQsY0FBYyxDQUFDLEdBQUdxQyxTQUFTO2dCQUNqRHlCLFFBQVE7Z0JBQ1JGLFFBQVF2QixRQUFRdUIsTUFBTSxHQUFHMkIsU0FBU25GLE1BQU07WUFDMUM7UUFDRjtJQUNGO0lBQ0E7O2lCQUVlLEdBR2ZzRSxtQkFBbUJyQyxPQUFPLEVBQUU7UUFDMUIsSUFBSXFELFNBQVMsSUFBSTtRQUVqQixPQUFPLElBQUksQ0FBQ3pELEtBQUssQ0FBQ3dCLFNBQVMsQ0FBQ3BCLFNBQVNpRCxJQUFJLENBQUMsU0FBVUssWUFBWTtZQUM5RCxJQUFJbkIsU0FBU2tCLE9BQU9wQixNQUFNO1lBRTFCLElBQUksQ0FBQ2pDLFFBQVF5QixNQUFNLEVBQUU7Z0JBQ25CVSxPQUFPRCxNQUFNO1lBQ2Y7WUFFQUMsT0FBTzFFLElBQUksQ0FBQ0MsS0FBSyxDQUFDeUUsUUFBUTVELG1CQUFtQitFO1lBQzdDbkIsT0FBT3ZDLEtBQUssQ0FBQ1EsUUFBUSxHQUFHK0IsT0FBT3ZDLEtBQUssQ0FBQ1EsUUFBUSxDQUFDbUQsS0FBSyxDQUFDdkQsUUFBUXVCLE1BQU07WUFDbEUsT0FBT1k7UUFDVDtJQUNGO0lBQ0E7Ozs7Ozs7OztFQVNBLEdBR0FxQixTQUFTeEQsT0FBTyxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDb0IsU0FBUyxDQUFDekQsY0FBYyxDQUFDLEdBQUdxQyxTQUFTO1lBQy9DdUIsUUFBUWtDO1FBQ1Y7SUFDRjtJQUVBQyxXQUFXMUQsT0FBTyxFQUFFO1FBQ2xCLElBQUksQ0FBQ0UsRUFBRSxDQUFDeUQsS0FBSyxDQUFDO1FBRWQsT0FBTyxJQUFJLENBQUN2QyxTQUFTLENBQUN6RCxjQUFjLENBQUMsR0FBR3FDLFNBQVM7WUFDL0N5QixRQUFRO1lBQ1JGLFFBQVF2QixRQUFRakMsTUFBTSxHQUFHLElBQUksQ0FBQ0EsTUFBTTtRQUN0QztJQUNGO0lBRUFrRSxTQUFTO1FBQ1AsSUFBSTJCLE9BQU85RixVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS21DLFlBQVluQyxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUMsR0FDNUUrRixZQUFZRCxLQUFLRSxJQUFJLEVBQ3JCQSxPQUFPRCxjQUFjLEtBQUssSUFBSSxRQUFRQTtRQUUxQyxJQUFJRSxhQUFhLENBQUMsR0FBR3BJLFFBQVEyRSxJQUFJLEVBQUUsSUFBSSxFQUFFaEYsT0FBTzZCLElBQUksQ0FBQ2tDO1FBQ3JEMEUsV0FBV3pFLE1BQU0sR0FBRyxDQUFDLEdBQUczRCxRQUFRNkYsS0FBSyxFQUFFdUMsV0FBV3pFLE1BQU07UUFDeER5RSxXQUFXbEUsZ0JBQWdCLEdBQUcsQ0FBQyxHQUFHbEUsUUFBUTZGLEtBQUssRUFBRXVDLFdBQVdsRSxnQkFBZ0I7UUFDNUVrRSxXQUFXbkUsS0FBSyxHQUFHLElBQUksQ0FBQ0EsS0FBSyxJQUFJLElBQUksQ0FBQ0EsS0FBSyxDQUFDcUMsTUFBTTtRQUNsRCxJQUFJK0Isa0JBQWtCL0UsTUFBTUMsSUFBSSxDQUFDLElBQUk7UUFDckM2RSxXQUFXM0QsUUFBUSxHQUFHMEQsT0FBT0UsZ0JBQWdCQyxHQUFHLENBQUMsU0FBVUMsSUFBSTtZQUM3RCxPQUFPLFlBQVlBLFFBQVEsT0FBT0EsS0FBS2pDLE1BQU0sS0FBSyxhQUFhaUMsS0FBS2pDLE1BQU0sQ0FBQztnQkFDekU2QjtZQUNGLEtBQUtJO1FBQ1AsS0FBS0Y7UUFDTCxPQUFPLElBQUlsRSxRQUFRaUUsWUFBWSxJQUFJLENBQUM3RCxFQUFFO0lBQ3hDO0lBRUFNLFNBQVMyRCxPQUFPLEVBQUU7UUFDaEIsSUFBSSxDQUFDdkUsS0FBSyxHQUFHdUU7UUFDYixJQUFJLENBQUMxRSxjQUFjLEdBQUc7SUFDeEI7SUFFQXlDLFNBQVM7UUFDUCxJQUFJLENBQUNFLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQ3JFLE1BQU07UUFDMUIsT0FBTyxJQUFJO0lBQ2I7SUFFQXFHLFNBQVM7UUFDUCxPQUFPbkYsTUFBTUMsSUFBSSxDQUFDLElBQUksRUFBRStFLEdBQUcsQ0FBQyxTQUFVQyxJQUFJO1lBQ3hDLE9BQU9BLFFBQVFBLEtBQUtFLE1BQU0sR0FBR0YsS0FBS0UsTUFBTSxLQUFLRjtRQUMvQztJQUNGO0FBRUY7QUFDQyxJQUFHakksU0FBU29JLGlCQUFpQixFQUFFdkUsUUFBUXJELFNBQVMsRUFBRTtJQUNqRCxPQUFPLFdBQVc2SCxNQUFNLENBQUN2SSxNQUFNTCxPQUFPLENBQUM2SSxPQUFPLENBQUN0RixNQUFNQyxJQUFJLENBQUMsSUFBSTtBQUNoRTtBQUNBLElBQUlzRixXQUFXMUU7QUFDZnRFLGtCQUFlLEdBQUdnSiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZGRpdC1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9vYmplY3RzL0xpc3RpbmcuanM/NTYzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9sb2Rhc2ggPSByZXF1aXJlKFwibG9kYXNoXCIpO1xuXG52YXIgX1Byb21pc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Qcm9taXNlLmpzXCIpKTtcblxudmFyIF91dGlsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwidXRpbFwiKSk7XG5cbnZhciBfdXJsID0gcmVxdWlyZShcInVybFwiKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnMuanNcIik7XG5cbnZhciBfZXJyb3JzID0gcmVxdWlyZShcIi4uL2Vycm9ycy5qc1wiKTtcblxudmFyIF9Nb3JlID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vTW9yZS5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxudmFyIElOVEVSTkFMX0RFRkFVTFRTID0ge1xuICBfcXVlcnk6IHt9LFxuICBfdHJhbnNmb3JtOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIF9tZXRob2Q6ICdnZXQnLFxuICBfaXNDb21tZW50TGlzdDogZmFsc2UsXG4gIF9saW5rX2lkOiBudWxsLFxuICBfdXJpOiBudWxsLFxuICBfbW9yZTogbnVsbCxcbiAgX2NhY2hlZExvb2thaGVhZDogbnVsbFxufTtcbi8qKlxuKiBBIGNsYXNzIHJlcHJlc2VudGluZyBhIGxpc3Qgb2YgY29udGVudC4gVGhpcyBpcyBhIHN1YmNsYXNzIG9mIHRoZSBuYXRpdmUgQXJyYXkgb2JqZWN0LCBzbyBpdCBoYXMgYWxsIHRoZSBwcm9wZXJ0aWVzIG9mXG5hbiBBcnJheSAobGVuZ3RoLCBmb3JFYWNoLCBldGMuKSBpbiBhZGRpdGlvbiB0byBzb21lIGFkZGVkIG1ldGhvZHMuIFRoZSBMaXN0aW5nIGNhbiBiZSBleHRlbmRlZCBieSB1c2luZyB0aGVcblsjZmV0Y2hNb3JlKClde0BsaW5rIExpc3RpbmcjZmV0Y2hNb3JlfSBhbmRcblsjZmV0Y2hBbGwoKV17QGxpbmsgTGlzdGluZyNmZXRjaEFsbH0gZnVuY3Rpb25zLiBOb3RlIHRoYXQgdGhlc2UgbWV0aG9kcyByZXR1cm4gbmV3IExpc3RpbmdzLCByYXRoZXIgdGhhbiBtdXRhdGluZyB0aGVcbm9yaWdpbmFsIExpc3RpbmcuXG4qXG4qIE1vc3QgbWV0aG9kcyB0aGF0IHJldHVybiBMaXN0aW5ncyB3aWxsIGFsc28gYWNjZXB0IGBsaW1pdGAsIGBhZnRlcmAsIGBiZWZvcmVgLCBgc2hvd2AsIGFuZCBgY291bnRgIHByb3BlcnRpZXMuXG4qXG4qIElmIHlvdSd2ZSB1c2VkIHRoZSByZWRkaXQgQVBJIGJlZm9yZSAob3IgdXNlZCBvdGhlciBBUEkgd3JhcHBlcnMgbGlrZSBbUFJBV10oaHR0cHM6Ly9wcmF3LnJlYWR0aGVkb2NzLm9yZy9lbi9zdGFibGUvKSksIHlvdVxubWlnaHQga25vdyB0aGF0IHJlZGRpdCB1c2VzIGEgYE1vcmVDb21tZW50c2Agb2JqZWN0IGluIGl0cyByYXcgSlNPTiByZXNwb25zZXMsIHJlcHJlc2VudGluZyBjb21tZW50cyB0aGF0IGhhdmUgYmVlbiBzdHViYmVkXG5vdXQgb2YgTGlzdGluZ3MuIEluIHNub293cmFwLCB0aGVyZSBhcmUgbm8gZXhwb3NlZCBgTW9yZUNvbW1lbnRzYCBvYmplY3RzOyB0aGUgb2JqZWN0cyByZXR1cm5lZCBieSB0aGUgcmVkZGl0IEFQSSBhcmVcbnN0cmlwcGVkIGZyb20gTGlzdGluZ3MgYW5kIGFyZSB1c2VkIGludGVybmFsbHkgYXMgc291cmNlcyBmb3IgdGhlIGBmZXRjaE1vcmVgIGZ1bmN0aW9ucy4gVGhpcyBtZWFucyB0aGF0IGluIHNub293cmFwLCBMaXN0aW5nc1xudGhhdCBjb250YWluIENvbW1lbnRzIGNhbiBiZSB1c2VkL2V4cGFuZGVkIGluIHRoZSBzYW1lIG1hbm5lciBhcyBMaXN0aW5ncyB0aGF0IGRvbid0IGNvbnRhaW4gQ29tbWVudHMsIGFuZCBmb3IgdGhlIG1vc3QgcGFydFxueW91IGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgdGhlIGRpc3RpbmN0aW9uLlxuXG4oSW5jaWRlbnRhbGx5LCBpZiB5b3UgZW5jb3VudGVyIGEgTGlzdGluZyB0aGF0ICpkb2VzKiBjb250YWluIGEgYE1vcmVDb21tZW50c2Agb2JqZWN0IHRoZW4gaXQncyBhIGJ1Zywgc28gcGxlYXNlIHJlcG9ydCBpdC4pXG5cbiogPHN0eWxlPiAjTGlzdGluZyB7ZGlzcGxheTogbm9uZX0gPC9zdHlsZT5cbiogQGV4dGVuZHMgQXJyYXlcbiovXG5cbnZhciBMaXN0aW5nID0gY2xhc3MgTGlzdGluZyBleHRlbmRzIEFycmF5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgdmFyIF9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICBzdXBlcigpO1xuXG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIExpc3RpbmcpKSB7XG4gICAgICAvLyBTYWZhcmkgOSBoYXMgYW4gaW5jb3JyZWN0IGltcGxlbWVudGF0aW9uIG9mIGNsYXNzZXMgdGhhdCBleHRlbmQgQXJyYXlzLiBBcyBhIHdvcmthcm91bmQsXG4gICAgICAvLyBtYW51YWxseSBzZXQgdGhlIGNvbnN0cnVjdG9yIGFuZCBwcm90b3R5cGUuXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yID0gTGlzdGluZztcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBMaXN0aW5nLnByb3RvdHlwZSk7XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoLmFwcGx5KHRoaXMsIF90b0NvbnN1bWFibGVBcnJheShvcHRpb25zLmNoaWxkcmVuIHx8IFtdKSk7XG4gICAgdGhpcy5fciA9IF9yO1xuICAgIHRoaXMuX2NhY2hlZExvb2thaGVhZCA9IG9wdGlvbnMuX2NhY2hlZExvb2thaGVhZDtcbiAgICAoMCwgX2xvZGFzaC5kZWZhdWx0c0RlZXApKHRoaXMsICgwLCBfbG9kYXNoLnBpY2spKG9wdGlvbnMsIE9iamVjdC5rZXlzKElOVEVSTkFMX0RFRkFVTFRTKSksIElOVEVSTkFMX0RFRkFVTFRTKTtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMuX3F1ZXJ5LCAoMCwgX2xvZGFzaC5waWNrKShvcHRpb25zLCBbJ2JlZm9yZScsICdhZnRlciddKSk7XG5cbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiAmJiBvcHRpb25zLmNoaWxkcmVuW29wdGlvbnMuY2hpbGRyZW4ubGVuZ3RoIC0gMV0gaW5zdGFuY2VvZiBfTW9yZS5kZWZhdWx0KSB7XG4gICAgICB0aGlzLl9zZXRNb3JlKHRoaXMucG9wKCkpO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRVcmkodmFsdWUpIHtcbiAgICB2YXIgcGFyc2VkVXJpID0gKDAsIF91cmwucGFyc2UpKHZhbHVlLCB0cnVlKTtcbiAgICB0aGlzLl91cmkgPSBwYXJzZWRVcmkucGF0aG5hbWU7XG4gICAgKDAsIF9sb2Rhc2guZGVmYXVsdHNEZWVwKSh0aGlzLl9xdWVyeSwgcGFyc2VkVXJpLnF1ZXJ5KTtcblxuICAgIGlmIChwYXJzZWRVcmkucXVlcnkuYmVmb3JlKSB7XG4gICAgICB0aGlzLl9xdWVyeS5hZnRlciA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3F1ZXJ5LmJlZm9yZSA9IG51bGw7XG4gICAgfVxuICB9XG4gIC8qKlxuICAqIEBzdW1tYXJ5IEEgZ2V0dGVyIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBMaXN0aW5nIGhhcyBhbnkgbW9yZSBpdGVtcyB0byBmZXRjaC5cbiAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgKi9cblxuXG4gIGdldCBpc0ZpbmlzaGVkKCkge1xuICAgIC8vIFRoZSBwcm9jZXNzIG9mIGNoZWNraW5nIHdoZXRoZXIgYSBMaXN0aW5nIGlzICdmaW5pc2hlZCcgdmFyaWVzIGRlcGVuZGluZyBvbiB3aGF0IGtpbmQgb2YgTGlzdGluZyBpdCBpcy5cbiAgICByZXR1cm4gdGhpcy5faXNDb21tZW50TGlzdFxuICAgIC8qIEZvciBjb21tZW50IExpc3RpbmdzIChpLmUuIExpc3RpbmdzIGNvbnRhaW5pbmcgY29tbWVudHMgYW5kIGNvbW1lbnQgcmVwbGllcywgc291cmNlZCBieSBgbW9yZWAgb2JqZWN0cyk6IEEgTGlzdGluZyBpc1xuICAgICpuZXZlciogZmluaXNoZWQgaWYgaXQgaGFzIGEgY2FjaGVkIGxvb2thaGVhZCAoaS5lLiBleHRyYSBpdGVtcyB0aGF0IHdlcmUgZmV0Y2hlZCBmcm9tIGEgcHJldmlvdXMgcmVxdWVzdCkuIElmIHRoZXJlIGlzXG4gICAgbm8gY2FjaGVkIGxvb2thaGVhZCwgYSBMaXN0aW5nIGlzIGZpbmlzaGVkIGlmZiBpdCBoYXMgYW4gZW1wdHkgYG1vcmVgIG9iamVjdC4gKi9cbiAgICA/ICgwLCBfbG9kYXNoLmlzRW1wdHkpKHRoaXMuX2NhY2hlZExvb2thaGVhZCkgJiYgISF0aGlzLl9tb3JlICYmICgwLCBfbG9kYXNoLmlzRW1wdHkpKHRoaXMuX21vcmUuY2hpbGRyZW4pXG4gICAgLyogRm9yIG5vbi1jb21tZW50IExpc3RpbmdzOiBBIExpc3RpbmcgaXMgYWx3YXlzIGZpbmlzaGVkIGlmIGl0IGhhcyBubyBVUkkgKHNpbmNlIHRoZXJlIHdvdWxkIGJlIG5vd2hlcmUgdG8gZmV0Y2ggaXRlbXNcbiAgICBmcm9tKS4gSWYgaXQgaGFzIGEgVVJJLCBhIExpc3RpbmcgaXMgZmluaXNoZWQgaWZmIGl0cyBgYmVmb3JlYCBhbmQgYGFmdGVyYCBxdWVyeSBhcmUgYm90aCBgbnVsbGAuIFRoaXMgaXMgYmVjYXVzZSByZWRkaXRcbiAgICByZXR1cm5zIGEgdmFsdWUgb2YgYG51bGxgIGFzIHRoZSBgYWZ0ZXJgIGFuZCBgYmVmb3JlYCBwYXJhbWV0ZXJzIHRvIHNpZ25pZnkgdGhhdCBhIExpc3RpbmcgaXMgY29tcGxldGUuXG4gICAgIEl0IGlzIGltcG9ydGFudCB0byBjaGVjayBmb3IgYG51bGxgIGhlcmUgcmF0aGVyIHRoYW4gYW55IGZhbHNleSB2YWx1ZSwgYmVjYXVzZSB3aGVuIGFuIGVtcHR5IExpc3RpbmcgaXMgaW5pdGlhbGl6ZWQsIGl0c1xuICAgIGBhZnRlcmAgYW5kIGBiZWZvcmVgIHByb3BlcnRpZXMgYXJlIGJvdGggYHVuZGVmaW5lZGAsIGJ1dCBjYWxsaW5nIHRoZXNlIGVtcHR5IExpc3RpbmdzIGBmaW5pc2hlZGAgd291bGQgYmUgaW5jb3JyZWN0LiAqL1xuICAgIDogIXRoaXMuX3VyaSB8fCB0aGlzLl9xdWVyeS5hZnRlciA9PT0gbnVsbCAmJiB0aGlzLl9xdWVyeS5iZWZvcmUgPT09IG51bGw7XG4gIH1cblxuICBnZXQgaXNfZmluaXNoZWQoKSB7XG4gICAgLy8gY2FtZWwtY2FzZSBhbGlhcyBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkuXG4gICAgLy8gQXMgYSBnZXR0ZXIsIHRoZSBgaXNGaW5pc2hlZGAgcHJvcGVydHkgZG9lc24ndCBoYXZlIGFuIGFsaWFzIGxpa2UgZXZlcnl0aGluZyBlbHNlLlxuICAgIHJldHVybiB0aGlzLmlzRmluaXNoZWQ7XG4gIH1cbiAgLyoqXG4gICogQHN1bW1hcnkgRmV0Y2hlcyBzb21lIG1vcmUgaXRlbXNcbiAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLmFtb3VudCBUaGUgbnVtYmVyIG9mIGl0ZW1zIHRvIGZldGNoLlxuICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuc2tpcFJlcGxpZXM9ZmFsc2VdIEZvciBhIExpc3RpbmcgdGhhdCBjb250YWlucyBjb21tZW50IG9iamVjdHMgb24gYSBTdWJtaXNzaW9uLCB0aGlzIG9wdGlvbiBjYW5cbiAgYmUgdXNlZCB0byBzYXZlIGEgZmV3IEFQSSBjYWxscywgcHJvdmlkZWQgdGhhdCBvbmx5IHRvcC1sZXZlbCBjb21tZW50cyBhcmUgYmVpbmcgZXhhbWluZWQuIElmIHRoaXMgaXMgc2V0IHRvIGB0cnVlYCwgc25vb3dyYXBcbiAgaXMgYWJsZSB0byBmZXRjaCAxMDAgQ29tbWVudHMgcGVyIEFQSSBjYWxsIHJhdGhlciB0aGFuIDIwLCBidXQgYWxsIHJldHVybmVkIENvbW1lbnRzIHdpbGwgaGF2ZSBubyBmZXRjaGVkIHJlcGxpZXMgYnkgZGVmYXVsdC5cbiAgKlxuICAqIEludGVybmFsIGRldGFpbHM6IFdoZW4gYHNraXBSZXBsaWVzYCBpcyBzZXQgdG8gYHRydWVgLCBzbm9vd3JhcCB1c2VzIHJlZGRpdCdzIGBhcGkvaW5mb2AgZW5kcG9pbnQgdG8gZmV0Y2ggQ29tbWVudHMuIFdoZW5cbiAgYHNraXBSZXBsaWVzYCBpcyBzZXQgdG8gYGZhbHNlYCwgc25vb3dyYXAgdXNlcyByZWRkaXQncyBgYXBpL21vcmVjaGlsZHJlbmAgZW5kcG9pbnQuIEl0J3Mgd29ydGggbm90aW5nIHRoYXQgcmVkZGl0IGRvZXNcbiAgbm90IGFsbG93IGNvbmN1cnJlbnQgcmVxdWVzdHMgdG8gdGhlIGBhcGkvbW9yZWNoaWxkcmVuYCBlbmRwb2ludCBieSB0aGUgc2FtZSBhY2NvdW50LlxuICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYXBwZW5kPXRydWVdIElmIGB0cnVlYCwgdGhlIHJlc3VsdGluZyBMaXN0aW5nIHdpbGwgY29udGFpbiB0aGUgZXhpc3RpbmcgZWxlbWVudHMgaW4gYWRkaXRpb24gdG9cbiAgdGhlIG5ld2x5LWZldGNoZWQgZWxlbWVudHMuIElmIGBmYWxzZWAsIHRoZSByZXN1bHRpbmcgTGlzdGluZyB3aWxsIG9ubHkgY29udGFpbiB0aGUgbmV3bHktZmV0Y2hlZCBlbGVtZW50cy5cbiAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBuZXcgTGlzdGluZyBjb250YWluaW5nIHRoZSBuZXdseS1mZXRjaGVkIGVsZW1lbnRzLiBJZiBgb3B0aW9ucy5hcHBlbmRgIGlzIGB0cnVlYCwgdGhlIG5ldyBMaXN0aW5nIHdpbGxcbiAgYWxzbyBjb250YWluIGFsbCBlbGVtZW50cyB0aGF0IHdlcmUgaW4gdGhlIG9yaWdpbmFsIExpc3RpbmcuIFVuZGVyIG1vc3QgY2lyY3Vtc3RhbmNlcywgdGhlIG5ld2x5LWZldGNoZWQgZWxlbWVudHMgd2lsbCBhcHBlYXJcbiAgYXQgdGhlIGVuZCBvZiB0aGUgbmV3IExpc3RpbmcuIEhvd2V2ZXIsIGlmIHJldmVyc2UgcGFnaW5hdGlvbiBpcyBlbmFibGVkIChpLmUuIGlmIHRoaXMgTGlzdGluZyB3YXMgY3JlYXRlZCB3aXRoIGEgYGJlZm9yZWBcbiAgcXVlcnkgcGFyYW1ldGVyKSwgdGhlbiB0aGUgbmV3bHktZmV0Y2hlZCBlbGVtZW50cyB3aWxsIGFwcGVhciBhdCB0aGUgYmVnaW5uaW5nLiBJbiBhbnkgY2FzZSwgY29udGludWl0eSBpcyBtYWludGFpbmVkLCBpLmUuXG4gIHRoZSBvcmRlciBvZiBpdGVtcyBpbiB0aGUgTGlzdGluZyB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFwcGVhciBvbiByZWRkaXQuXG4gICogQGV4YW1wbGVcbiAgKiByLmdldEhvdCh7bGltaXQ6IDI1fSkudGhlbihteUxpc3RpbmcgPT4ge1xuICAqICAgY29uc29sZS5sb2cobXlMaXN0aW5nLmxlbmd0aCk7IC8vID0+IDI1XG4gICogICBteUxpc3RpbmcuZmV0Y2hNb3JlKHthbW91bnQ6IDEwfSkudGhlbihleHRlbmRlZExpc3RpbmcgPT4ge1xuICAqICAgICBjb25zb2xlLmxvZyhleHRlbmRlZExpc3RpbmcubGVuZ3RoKTsgLy8gPT4gMzVcbiAgKiAgIH0pXG4gICogfSk7XG4gICovXG5cblxuICBmZXRjaE1vcmUob3B0aW9ucykge1xuICAgIHZhciBwYXJzZWRPcHRpb25zID0gKDAsIF9sb2Rhc2guZGVmYXVsdHMpKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJyA/IHtcbiAgICAgIGFtb3VudDogb3B0aW9uc1xuICAgIH0gOiAoMCwgX2xvZGFzaC5jbG9uZSkob3B0aW9ucyksIC8vIEFjY2VwdCBlaXRoZXIgYHNraXBfcmVwbGllc2Agb3IgYHNraXBSZXBsaWVzYCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAge1xuICAgICAgYXBwZW5kOiB0cnVlLFxuICAgICAgc2tpcFJlcGxpZXM6IG9wdGlvbnMuc2tpcF9yZXBsaWVzXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIHBhcnNlZE9wdGlvbnMuYW1vdW50ICE9PSAnbnVtYmVyJyB8fCBOdW1iZXIuaXNOYU4ocGFyc2VkT3B0aW9ucy5hbW91bnQpKSB7XG4gICAgICB0aHJvdyBuZXcgX2Vycm9ycy5JbnZhbGlkTWV0aG9kQ2FsbEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggTGlzdGluZy4gKGBhbW91bnRgIHBhcmFtZXRlciB3YXMgbWlzc2luZyBvciBpbnZhbGlkKScpO1xuICAgIH1cblxuICAgIGlmIChwYXJzZWRPcHRpb25zLmFtb3VudCA8PSAwIHx8IHRoaXMuaXNGaW5pc2hlZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3IuX3Byb21pc2VXcmFwKF9Qcm9taXNlLmRlZmF1bHQucmVzb2x2ZShwYXJzZWRPcHRpb25zLmFwcGVuZCA/IHRoaXMuX2Nsb25lKCkgOiB0aGlzLl9jbG9uZSgpLl9lbXB0eSgpKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NhY2hlZExvb2thaGVhZCkge1xuICAgICAgdmFyIGNsb25lZCA9IHRoaXMuX2Nsb25lKCk7XG5cbiAgICAgIGNsb25lZC5wdXNoLmFwcGx5KGNsb25lZCwgX3RvQ29uc3VtYWJsZUFycmF5KGNsb25lZC5fY2FjaGVkTG9va2FoZWFkLnNwbGljZSgwLCBwYXJzZWRPcHRpb25zLmFtb3VudCkpKTtcbiAgICAgIHJldHVybiBjbG9uZWQuZmV0Y2hNb3JlKHBhcnNlZE9wdGlvbnMuYW1vdW50IC0gY2xvbmVkLmxlbmd0aCArIHRoaXMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fci5fcHJvbWlzZVdyYXAodGhpcy5fbW9yZSA/IHRoaXMuX2ZldGNoTW9yZUNvbW1lbnRzKHBhcnNlZE9wdGlvbnMpIDogdGhpcy5fZmV0Y2hNb3JlUmVndWxhcihwYXJzZWRPcHRpb25zKSk7XG4gIH1cblxuICBfZmV0Y2hNb3JlUmVndWxhcihvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBxdWVyeSA9ICgwLCBfbG9kYXNoLm9taXRCeSkoKDAsIF9sb2Rhc2guY2xvbmUpKHRoaXMuX3F1ZXJ5KSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIGlmICghdGhpcy5faXNDb21tZW50TGlzdCkge1xuICAgICAgLyogUmVkZGl0IHJldHVybnMgYSBkaWZmZXJlbnQgbnVtYmVyIG9mIGl0ZW1zIHBlciByZXF1ZXN0IGRlcGVuZGluZyBvbiB0aGUgYGxpbWl0YCBxdWVyeXN0cmluZyBwcm9wZXJ0eSBzcGVjaWZpZWQgaW4gdGhlXG4gICAgICByZXF1ZXN0LiBJZiBubyBgbGltaXRgIHByb3BlcnR5IGlzIHNwZWNpZmllZCwgcmVkZGl0IHJldHVybnMgc29tZSBudW1iZXIgb2YgaXRlbXMgZGVwZW5kaW5nIG9uIHRoZSB1c2VyJ3MgcHJlZmVyZW5jZXNcbiAgICAgIChjdXJyZW50bHkgMjUgaXRlbXMgd2l0aCBkZWZhdWx0IHByZWZlcmVuY2VzKS4gSWYgYSBgbGltaXRgIHByb3BlcnR5IGlzIHNwZWNpZmllZCwgdGhlbiByZWRkaXQgcmV0dXJucyBgbGltaXRgIGl0ZW1zIHBlclxuICAgICAgYmF0Y2guIEhvd2V2ZXIsIHRoaXMgaXMgY2FwcGVkIGF0IDEwMCwgc28gaWYgYSBgbGltaXRgIGxhcmdlciB0aGFuIDEwMCBpdGVtcyBpcyBzcGVjaWZpZWQsIHJlZGRpdCB3aWxsIG9ubHkgcmV0dXJuIDEwMFxuICAgICAgaXRlbXMgaW4gdGhlIGJhdGNoLiAoVGhlIGNhcCBvZiAxMDAgY291bGQgcGxhdXNpYmx5IGNoYW5nZSB0byBhIGRpZmZlcmVudCBhbW91bnQgaW4gdGhlIGZ1dHVyZS4pXG4gICAgICAgSG93ZXZlciwgb25lIGNhdmVhdCBpcyB0aGF0IHJlZGRpdCdzIHBhcnNlciBkb2Vzbid0IHVuZGVyc3RhbmQgdGhlIGphdmFzY3JpcHQgYEluZmluaXR5YCBnbG9iYWwuIElmIGBsaW1pdD1JbmZpbml0eWAgaXNcbiAgICAgIHByb3ZpZGVkIGluIHRoZSBxdWVyeXN0cmluZywgcmVkZGl0IHdvbid0IHVuZGVyc3RhbmQgdGhlIHBhcmFtZXRlciBzbyBpdCdsbCBqdXN0IGFjdCBhcyBpZiBubyBwYXJhbWV0ZXIgd2FzIHByb3ZpZGVkLCBhbmRcbiAgICAgIHdpbGwgcmV0dXJuIDI1IGl0ZW1zIGluIHRoZSBiYXRjaC4gVGhpcyBpcyBzdWJvcHRpbWFsIGJlaGF2aW9yIGFzIGZhciBhcyBzbm9vd3JhcCBpcyBjb25jZXJuZWQsIGJlY2F1c2UgaXQgbWVhbnMgdGhhdCA0XG4gICAgICB0aW1lcyBhcyBtYW55IHJlcXVlc3RzIGFyZSBuZWVkZWQgdG8gZmV0Y2ggdGhlIGVudGlyZSBsaXN0aW5nLlxuICAgICAgIFRvIGdldCBhcm91bmQgdGhlIGlzc3VlLCBzbm9vd3JhcCBjYXBzIHRoZSBgbGltaXRgIHByb3BlcnR5IGF0IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHdoZW4gc2VuZGluZyByZXF1ZXN0cy4gVGhpcyBlbnN1cmVzXG4gICAgICB0aGF0IGBJbmZpbml0eWAgd2lsbCBuZXZlciBiZSBzZW50IGFzIHBhcnQgb2YgdGhlIHF1ZXJ5c3RyaW5nLCBzbyByZWRkaXQgd2lsbCBhbHdheXMgcmV0dXJuIHRoZSBtYXhpbWFsIDEwMCBpdGVtcyBwZXJcbiAgICAgIHJlcXVlc3QgaWYgdGhlIGRlc2lyZWQgYW1vdW50IG9mIGl0ZW1zIGlzIGxhcmdlLiAqL1xuICAgICAgcXVlcnkubGltaXQgPSBNYXRoLm1pbihvcHRpb25zLmFtb3VudCwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yLm9hdXRoUmVxdWVzdCh7XG4gICAgICB1cmk6IHRoaXMuX3VyaSxcbiAgICAgIHFzOiBxdWVyeSxcbiAgICAgIG1ldGhvZDogdGhpcy5fbWV0aG9kXG4gICAgfSkudGhlbih0aGlzLl90cmFuc2Zvcm0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICB2YXIgY2xvbmVkID0gX3RoaXMuX2Nsb25lKCk7XG5cbiAgICAgIGlmICghb3B0aW9ucy5hcHBlbmQpIHtcbiAgICAgICAgY2xvbmVkLl9lbXB0eSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2xvbmVkLl9xdWVyeS5iZWZvcmUpIHtcbiAgICAgICAgY2xvbmVkLnVuc2hpZnQuYXBwbHkoY2xvbmVkLCBfdG9Db25zdW1hYmxlQXJyYXkocmVzcG9uc2UpKTtcbiAgICAgICAgY2xvbmVkLl9xdWVyeS5iZWZvcmUgPSByZXNwb25zZS5fcXVlcnkuYmVmb3JlO1xuICAgICAgICBjbG9uZWQuX3F1ZXJ5LmFmdGVyID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb25lZC5wdXNoLmFwcGx5KGNsb25lZCwgX3RvQ29uc3VtYWJsZUFycmF5KHJlc3BvbnNlKSk7XG4gICAgICAgIGNsb25lZC5fcXVlcnkuYmVmb3JlID0gbnVsbDtcbiAgICAgICAgY2xvbmVkLl9xdWVyeS5hZnRlciA9IHJlc3BvbnNlLl9xdWVyeS5hZnRlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLl9pc0NvbW1lbnRMaXN0KSB7XG4gICAgICAgIGNsb25lZC5fbW9yZSA9IGNsb25lZC5fbW9yZSB8fCByZXNwb25zZS5fbW9yZSB8fCBfTW9yZS5lbXB0eUNoaWxkcmVuO1xuXG4gICAgICAgIGlmIChyZXNwb25zZS5sZW5ndGggPiBvcHRpb25zLmFtb3VudCkge1xuICAgICAgICAgIGNsb25lZC5fY2FjaGVkTG9va2FoZWFkID0gQXJyYXkuZnJvbShjbG9uZWQuc3BsaWNlKG9wdGlvbnMuYW1vdW50KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb25lZC5mZXRjaE1vcmUoX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucywge1xuICAgICAgICBhcHBlbmQ6IHRydWUsXG4gICAgICAgIGFtb3VudDogb3B0aW9ucy5hbW91bnQgLSByZXNwb25zZS5sZW5ndGhcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfVxuICAvKiBQYWdpbmF0aW9uIGZvciBjb21tZW50cyB3b3JrcyBkaWZmZXJlbnRseSB0aGFuIGl0IGRvZXMgZm9yIG1vc3Qgb3RoZXIgdGhpbmdzOyByYXRoZXIgdGhhbiBzZW5kaW5nIGEgbGluayB0byB0aGUgbmV4dCBwYWdlXG4gIHdpdGhpbiBhIExpc3RpbmcsIHJlZGRpdCBzZW5kcyB0aGUgbGFzdCBjb21tZW50IGluIHRoZSBsaXN0IGFzIGFzIGEgYG1vcmVgIG9iamVjdCwgd2l0aCBsaW5rcyB0byBhbGwgdGhlIHJlbWFpbmluZyBjb21tZW50c1xuICBpbiB0aGUgdGhyZWFkLiAqL1xuXG5cbiAgX2ZldGNoTW9yZUNvbW1lbnRzKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLl9tb3JlLmZldGNoTW9yZShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChtb3JlQ29tbWVudHMpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBfdGhpczIuX2Nsb25lKCk7XG5cbiAgICAgIGlmICghb3B0aW9ucy5hcHBlbmQpIHtcbiAgICAgICAgY2xvbmVkLl9lbXB0eSgpO1xuICAgICAgfVxuXG4gICAgICBjbG9uZWQucHVzaC5hcHBseShjbG9uZWQsIF90b0NvbnN1bWFibGVBcnJheShtb3JlQ29tbWVudHMpKTtcbiAgICAgIGNsb25lZC5fbW9yZS5jaGlsZHJlbiA9IGNsb25lZC5fbW9yZS5jaGlsZHJlbi5zbGljZShvcHRpb25zLmFtb3VudCk7XG4gICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAqIEBzdW1tYXJ5IEZldGNoZXMgYWxsIG9mIHRoZSBpdGVtcyBpbiB0aGlzIExpc3RpbmcsIG9ubHkgc3RvcHBpbmcgd2hlbiB0aGVyZSBhcmUgbm9uZSBsZWZ0LlxuICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gRmV0Y2hpbmcgb3B0aW9ucyAtLSBzZWUge0BsaW5rIExpc3RpbmcjZmV0Y2hNb3JlfVxuICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIG5ldyBmdWxseS1mZXRjaGVkIExpc3RpbmcuIEtlZXAgaW4gbWluZCB0aGF0IHRoaXMgbWV0aG9kIGhhcyB0aGUgcG90ZW50aWFsIHRvIGV4aGF1c3QgeW91clxuICByYXRlbGltaXQgcXVpY2tseSBpZiB0aGUgTGlzdGluZyBkb2Vzbid0IGhhdmUgYSBjbGVhciBlbmQgKGUuZy4gd2l0aCBwb3N0cyBvbiB0aGUgZnJvbnQgcGFnZSksIHNvIHVzZSBpdCB3aXRoIGRpc2NyZXRpb24uXG4gICogQGV4YW1wbGVcbiAgKlxuICAqIHIuZ2V0TWUoKS5nZXRVcHZvdGVkQ29udGVudCgpLmZldGNoQWxsKCkudGhlbihjb25zb2xlLmxvZylcbiAgKiAvLyA9PiBMaXN0aW5nIFsgU3VibWlzc2lvbiB7IC4uLiB9LCBTdWJtaXNzaW9uIHsgLi4uIH0sIC4uLiBdXG4gICovXG5cblxuICBmZXRjaEFsbChvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hNb3JlKF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFtb3VudDogSW5maW5pdHlcbiAgICB9KSk7XG4gIH1cblxuICBmZXRjaFVudGlsKG9wdGlvbnMpIHtcbiAgICB0aGlzLl9yLl93YXJuKCdMaXN0aW5nI2ZldGNoVW50aWwgaXMgZGVwcmVjYXRlZCAtLSB1c2UgTGlzdGluZyNmZXRjaE1vcmUgaW5zdGVhZC4nKTtcblxuICAgIHJldHVybiB0aGlzLmZldGNoTW9yZShfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zLCB7XG4gICAgICBhcHBlbmQ6IHRydWUsXG4gICAgICBhbW91bnQ6IG9wdGlvbnMubGVuZ3RoIC0gdGhpcy5sZW5ndGhcbiAgICB9KSk7XG4gIH1cblxuICBfY2xvbmUoKSB7XG4gICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgICBfcmVmJGRlZXAgPSBfcmVmLmRlZXAsXG4gICAgICAgIGRlZXAgPSBfcmVmJGRlZXAgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRkZWVwO1xuXG4gICAgdmFyIHByb3BlcnRpZXMgPSAoMCwgX2xvZGFzaC5waWNrKSh0aGlzLCBPYmplY3Qua2V5cyhJTlRFUk5BTF9ERUZBVUxUUykpO1xuICAgIHByb3BlcnRpZXMuX3F1ZXJ5ID0gKDAsIF9sb2Rhc2guY2xvbmUpKHByb3BlcnRpZXMuX3F1ZXJ5KTtcbiAgICBwcm9wZXJ0aWVzLl9jYWNoZWRMb29rYWhlYWQgPSAoMCwgX2xvZGFzaC5jbG9uZSkocHJvcGVydGllcy5fY2FjaGVkTG9va2FoZWFkKTtcbiAgICBwcm9wZXJ0aWVzLl9tb3JlID0gdGhpcy5fbW9yZSAmJiB0aGlzLl9tb3JlLl9jbG9uZSgpO1xuICAgIHZhciBzaGFsbG93Q2hpbGRyZW4gPSBBcnJheS5mcm9tKHRoaXMpO1xuICAgIHByb3BlcnRpZXMuY2hpbGRyZW4gPSBkZWVwID8gc2hhbGxvd0NoaWxkcmVuLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuICdfY2xvbmUnIGluIGl0ZW0gJiYgdHlwZW9mIGl0ZW0uX2Nsb25lID09PSAnZnVuY3Rpb24nID8gaXRlbS5fY2xvbmUoe1xuICAgICAgICBkZWVwXG4gICAgICB9KSA6IGl0ZW07XG4gICAgfSkgOiBzaGFsbG93Q2hpbGRyZW47XG4gICAgcmV0dXJuIG5ldyBMaXN0aW5nKHByb3BlcnRpZXMsIHRoaXMuX3IpO1xuICB9XG5cbiAgX3NldE1vcmUobW9yZU9iaikge1xuICAgIHRoaXMuX21vcmUgPSBtb3JlT2JqO1xuICAgIHRoaXMuX2lzQ29tbWVudExpc3QgPSB0cnVlO1xuICB9XG5cbiAgX2VtcHR5KCkge1xuICAgIHRoaXMuc3BsaWNlKDAsIHRoaXMubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtICYmIGl0ZW0udG9KU09OID8gaXRlbS50b0pTT04oKSA6IGl0ZW07XG4gICAgfSk7XG4gIH1cblxufTtcbigwLCBfaGVscGVycy5kZWZpbmVJbnNwZWN0RnVuYykoTGlzdGluZy5wcm90b3R5cGUsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFwiTGlzdGluZyBcIi5jb25jYXQoX3V0aWwuZGVmYXVsdC5pbnNwZWN0KEFycmF5LmZyb20odGhpcykpKTtcbn0pO1xudmFyIF9kZWZhdWx0ID0gTGlzdGluZztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfbG9kYXNoIiwicmVxdWlyZSIsIl9Qcm9taXNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl91dGlsIiwiX3VybCIsIl9oZWxwZXJzIiwiX2Vycm9ycyIsIl9Nb3JlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJvYmoiLCJfX2VzTW9kdWxlIiwibmV3T2JqIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldCIsInNldCIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiVHlwZUVycm9yIiwiaXRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwidG9TdHJpbmciLCJBcnJheSIsImZyb20iLCJpc0FycmF5IiwiYXJyMiIsIklOVEVSTkFMX0RFRkFVTFRTIiwiX3F1ZXJ5IiwiX3RyYW5zZm9ybSIsIl9tZXRob2QiLCJfaXNDb21tZW50TGlzdCIsIl9saW5rX2lkIiwiX3VyaSIsIl9tb3JlIiwiX2NhY2hlZExvb2thaGVhZCIsIkxpc3RpbmciLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJfciIsInNldFByb3RvdHlwZU9mIiwiY2hpbGRyZW4iLCJkZWZhdWx0c0RlZXAiLCJwaWNrIiwiYXNzaWduIiwiX3NldE1vcmUiLCJwb3AiLCJfc2V0VXJpIiwicGFyc2VkVXJpIiwicGFyc2UiLCJwYXRobmFtZSIsInF1ZXJ5IiwiYmVmb3JlIiwiYWZ0ZXIiLCJpc0ZpbmlzaGVkIiwiaXNFbXB0eSIsImlzX2ZpbmlzaGVkIiwiZmV0Y2hNb3JlIiwicGFyc2VkT3B0aW9ucyIsImRlZmF1bHRzIiwiYW1vdW50IiwiY2xvbmUiLCJhcHBlbmQiLCJza2lwUmVwbGllcyIsInNraXBfcmVwbGllcyIsIk51bWJlciIsImlzTmFOIiwiSW52YWxpZE1ldGhvZENhbGxFcnJvciIsIl9wcm9taXNlV3JhcCIsInJlc29sdmUiLCJfY2xvbmUiLCJfZW1wdHkiLCJjbG9uZWQiLCJzcGxpY2UiLCJfZmV0Y2hNb3JlQ29tbWVudHMiLCJfZmV0Y2hNb3JlUmVndWxhciIsIl90aGlzIiwib21pdEJ5IiwibGltaXQiLCJNYXRoIiwibWluIiwiTUFYX1NBRkVfSU5URUdFUiIsIm9hdXRoUmVxdWVzdCIsInVyaSIsInFzIiwibWV0aG9kIiwidGhlbiIsInJlc3BvbnNlIiwidW5zaGlmdCIsImVtcHR5Q2hpbGRyZW4iLCJfdGhpczIiLCJtb3JlQ29tbWVudHMiLCJzbGljZSIsImZldGNoQWxsIiwiSW5maW5pdHkiLCJmZXRjaFVudGlsIiwiX3dhcm4iLCJfcmVmIiwiX3JlZiRkZWVwIiwiZGVlcCIsInByb3BlcnRpZXMiLCJzaGFsbG93Q2hpbGRyZW4iLCJtYXAiLCJpdGVtIiwibW9yZU9iaiIsInRvSlNPTiIsImRlZmluZUluc3BlY3RGdW5jIiwiY29uY2F0IiwiaW5zcGVjdCIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/Listing.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/LiveThread.js":
/*!**********************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/LiveThread.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _events = __webpack_require__(/*! events */ \"events\");\nvar _helpers = __webpack_require__(/*! ../helpers.js */ \"(rsc)/./node_modules/snoowrap/dist/helpers.js\");\nvar _RedditContent = _interopRequireDefault(__webpack_require__(/*! ./RedditContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/RedditContent.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar WebSocket = _helpers.isBrowser ? global.WebSocket : __webpack_require__(/*! ws */ \"(rsc)/./node_modules/ws/index.js\");\nvar api_type = \"json\";\n/**\n* A class representing a live reddit thread\n* <style> #LiveThread {display: none} </style>\n* @example\n*\n* // Get a livethread with the given ID\n* r.getLivethread('whrdxo8dg9n0')\n* @desc For the most part, reddit distributes the content of live threads via websocket, rather than through the REST API.\nAs such, snoowrap assigns each fetched LiveThread object a `stream` property, which takes the form of an\n[EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter). To listen for new thread updates, simply\nadd listeners to that emitter.\n\nThe following events can be emitted:\n- `update`: Occurs when a new update has been posted in this thread. Emits a `LiveUpdate` object containing information\nabout the new update.\n- `activity`: Occurs periodically when the viewer count for this thread changes.\n- `settings`: Occurs when the thread's settings change. Emits an object containing the new settings.\n- `delete`: Occurs when an update has been deleted. Emits the ID of the deleted update.\n- `strike`: Occurs when an update has been striken (marked incorrect and crossed out). Emits the ID of the striken update.\n- `embeds_ready`: Occurs when embedded media is now available for a previously-posted update.\n- `complete`: Occurs when this LiveThread has been marked as complete, and no more updates will be sent.\n\n(Note: These event types are mapped directly from reddit's categorization of the updates. The descriptions above are\nparaphrased from reddit's descriptions [here](https://www.reddit.com/dev/api#section_live).)\n\nAs an example, this would log all new livethread updates to the console:\n\n```javascript\nsomeLivethread.stream.on('update', data => {\n  console.log(data.body);\n});\n```\n\n* @extends RedditContent\n*/ var LiveThread = class LiveThread extends _RedditContent.default {\n    constructor(options, _r, _hasFetched){\n        var _this;\n        super(options, _r, _hasFetched);\n        _this = this;\n        this._rawStream = null;\n        this._populatedStream = null;\n        if (_hasFetched) {\n            Object.defineProperty(this, \"stream\", {\n                get: function() {\n                    if (!_this._populatedStream && _this.websocket_url) {\n                        _this._setupWebSocket();\n                    }\n                    return _this._populatedStream;\n                }\n            });\n        }\n    }\n    get _uri() {\n        return \"live/\".concat(this.id, \"/about\");\n    }\n    _setupWebSocket() {\n        var _this2 = this;\n        this._rawStream = new WebSocket(this.websocket_url);\n        this._populatedStream = new _events.EventEmitter();\n        var handler = function(data) {\n            var parsed = _this2._r._populate(JSON.parse(data));\n            _this2._populatedStream.emit(parsed.type, parsed.payload);\n        };\n        if (typeof this._rawStream.on === \"function\") {\n            this._rawStream.on(\"message\", handler);\n        } else {\n            this._rawStream.onmessage = function(messageEvent) {\n                return handler(messageEvent.data);\n            };\n        }\n    }\n    /**\n  * @summary Adds a new update to this thread.\n  * @param {string} body The body of the new update\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').addUpdate('Breaking: Someone is reading the snoowrap documentation \\\\o/')\n  */ addUpdate(body) {\n        return this._post({\n            uri: \"api/live/\".concat(this.id, \"/update\"),\n            form: {\n                api_type,\n                body\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Strikes (marks incorrect and crosses out) the given update.\n  * @param {object} options\n  * @param {string} options.id The ID of the update that should be striked.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').strikeUpdate({id: 'LiveUpdate_edc34446-faf0-11e5-a1b4-0e858bca33cd'})\n  */ strikeUpdate(_ref) {\n        var id = _ref.id;\n        return this._post({\n            uri: \"api/live/\".concat(this.id, \"/strike_update\"),\n            form: {\n                api_type,\n                id: \"\".concat(id.startsWith(\"LiveUpdate_\") ? \"\" : \"LiveUpdate_\").concat(id)\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Deletes an update from this LiveThread.\n  * @param {object} options\n  * @param {string} options.id The ID of the LiveUpdate that should be deleted\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').deleteUpdate({id: 'LiveUpdate_edc34446-faf0-11e5-a1b4-0e858bca33cd'})\n  */ deleteUpdate(_ref2) {\n        var id = _ref2.id;\n        return this._post({\n            uri: \"api/live/\".concat(this.id, \"/delete_update\"),\n            form: {\n                api_type,\n                id: \"\".concat(id.startsWith(\"LiveUpdate_\") ? \"\" : \"LiveUpdate_\").concat(id)\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Gets a list of this LiveThread's contributors\n  * @returns {Promise} An Array containing RedditUsers\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getContributors().then(console.log)\n  * // => [\n  * //  RedditUser { permissions: ['edit'], name: 'not_an_aardvark', id: 't2_k83md' },\n  * //  RedditUser { permissions: ['all'], id: 't2_u3l80', name: 'snoowrap_testing' }\n  * // ]\n  */ getContributors() {\n        return this._get({\n            uri: \"live/\".concat(this.id, \"/contributors\")\n        }).then(function(contributors) {\n            return Array.isArray(contributors[0]) ? contributors[0] : contributors;\n        });\n    }\n    /**\n  * @summary Invites a contributor to this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The name of the user who should be invited\n  * @param {Array} options.permissions The permissions that the invited user should receive. This should be an Array containing\n  some combination of `'update', 'edit', 'manage'`. To invite a contributor with full permissions, omit this property.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').inviteContributor({name: 'actually_an_aardvark', permissions: ['update']})\n  */ inviteContributor(_ref3) {\n        var name = _ref3.name, permissions = _ref3.permissions;\n        return this._post({\n            uri: \"api/live/\".concat(this.id, \"/invite_contributor\"),\n            form: {\n                api_type,\n                name,\n                permissions: (0, _helpers.formatLivethreadPermissions)(permissions),\n                type: \"liveupdate_contributor_invite\"\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Revokes an invitation for the given user to become a contributor on this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The username of the account whose invitation should be revoked\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').revokeContributorInvite({name: 'actually_an_aardvark'});\n  */ revokeContributorInvite(_ref4) {\n        var _this3 = this;\n        var name = _ref4.name;\n        return this._r.getUser(name).fetch().get(\"id\").then(function(userId) {\n            return _this3._post({\n                uri: \"api/live/\".concat(_this3.id, \"/rm_contributor_invite\"),\n                form: {\n                    api_type,\n                    id: \"t2_\".concat(userId)\n                }\n            });\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Accepts a pending contributor invitation on this LiveThread.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').acceptContributorInvite()\n  */ acceptContributorInvite() {\n        return this._post({\n            uri: \"api/live/\".concat(this.id, \"/accept_contributor_invite\"),\n            form: {\n                api_type\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Abdicates contributor status on this LiveThread.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').leaveContributor()\n  */ leaveContributor() {\n        return this._post({\n            uri: \"api/live/\".concat(this.id, \"/leave_contributor\"),\n            form: {\n                api_type\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Removes the given user from contributor status on this LiveThread.\n  * @param {object} options\n  * @param {string} options.name The username of the account who should be removed\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').removeContributor({name: 'actually_an_aardvark'})\n  */ removeContributor(_ref5) {\n        var _this4 = this;\n        var name = _ref5.name;\n        return this._r.getUser(name).fetch().get(\"id\").then(function(userId) {\n            return _this4._post({\n                uri: \"api/live/\".concat(_this4.id, \"/rm_contributor\"),\n                form: {\n                    api_type,\n                    id: \"t2_\".concat(userId)\n                }\n            });\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Sets the permissions of the given contributor.\n  * @param {object} options\n  * @param {string} options.name The name of the user whose permissions should be changed\n  * @param {Array} options.permissions The updated permissions that the user should have. This should be an Array containing\n  some combination of `'update', 'edit', 'manage'`. To give the contributor with full permissions, omit this property.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').setContributorPermissions({name: 'actually_an_aardvark', permissions: ['edit']})\n  */ setContributorPermissions(_ref6) {\n        var name = _ref6.name, permissions = _ref6.permissions;\n        return this._post({\n            uri: \"api/live/\".concat(this.id, \"/set_contributor_permissions\"),\n            form: {\n                api_type,\n                name,\n                permissions: (0, _helpers.formatLivethreadPermissions)(permissions),\n                type: \"liveupdate_contributor\"\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Edits the settings on this LiveThread.\n  * @param {object} options\n  * @param {string} options.title The title of the thread\n  * @param {string} [options.description] A descriptions of the thread. 120 characters max\n  * @param {string} [options.resources] Information and useful links related to the thread.\n  * @param {boolean} options.nsfw Determines whether the thread is Not Safe For Work\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').editSettings({title: 'My livethread', description: 'an updated description'})\n  */ editSettings(_ref7) {\n        var title = _ref7.title, description = _ref7.description, resources = _ref7.resources, nsfw = _ref7.nsfw;\n        return this._post({\n            uri: \"api/live/\".concat(this.id, \"/edit\"),\n            form: {\n                api_type,\n                description,\n                nsfw,\n                resources,\n                title\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Permanently closes this thread, preventing any more updates from being added.\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').closeThread()\n  */ closeThread() {\n        return this._post({\n            uri: \"api/live/\".concat(this.id, \"/close_thread\"),\n            form: {\n                api_type\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Reports this LiveThread for breaking reddit's rules.\n  * @param {object} options\n  * @param {string} options.reason The reason for the report. One of `spam`, `vote-manipulation`, `personal-information`,\n  `sexualizing-minors`, `site-breaking`\n  * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n  * @example r.getLivethread('whrdxo8dg9n0').report({reason: 'Breaking a rule blah blah blah'})\n  */ report(_ref8) {\n        var reason = _ref8.reason;\n        return this._post({\n            uri: \"api/live/\".concat(this.id, \"/report\"),\n            form: {\n                api_type,\n                type: reason\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Gets a Listing containing past updates to this LiveThread.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing LiveUpdates\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getRecentUpdates().then(console.log)\n  * // => Listing [\n  * //  LiveUpdate { ... },\n  * //  LiveUpdate { ... },\n  * //  ...\n  * // ]\n  */ getRecentUpdates(options) {\n        return this._getListing({\n            uri: \"live/\".concat(this.id),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a list of reddit submissions linking to this LiveThread.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getLivethread('whrdxo8dg9n0').getDiscussions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getDiscussions(options) {\n        return this._getListing({\n            uri: \"live/\".concat(this.id, \"/discussions\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Stops listening for new updates on this LiveThread.\n  * @desc To avoid memory leaks that can result from open sockets, it's recommended that you call this method when you're\n  finished listening for updates on this LiveThread.\n  *\n  * This should not be confused with {@link LiveThread#closeThread}, which marks the thread as \"closed\" on reddit.\n  * @returns undefined\n  * @example\n  *\n  * var myThread = r.getLivethread('whrdxo8dg9n0');\n  * myThread.stream.on('update', content => {\n  *   console.log(content);\n  *   myThread.closeStream();\n  * })\n  *\n  */ closeStream() {\n        if (this._rawStream) {\n            this._rawStream.close();\n        }\n    }\n};\nvar _default = LiveThread;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/LiveThread.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/ModmailConversation.js":
/*!*******************************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/ModmailConversation.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.modActionStates = exports.conversationStates = void 0;\nvar _RedditContent = _interopRequireDefault(__webpack_require__(/*! ./RedditContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/RedditContent.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(source, true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(source).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * @global\n * @enum {number}\n * @readonly\n * @summary Represents the current status of a given Modmail conversation.\n * @type {Readonly<{New: number, InProgress: number, Archived: number}>}\n */ var conversationStates = Object.freeze({\n    New: 0,\n    InProgress: 1,\n    Archived: 2\n});\n/**\n * @global\n * @enum {number}\n * @readonly\n * @summary Represents all the possible states that is used within a Modmail conversations.\n * @type {Readonly<{UnArchive: number, Highlight: number, Archive: number, ReportedToAdmins: number, Mute: number, UnHighlight: number, Unmute: number}>}\n */ exports.conversationStates = conversationStates;\nvar modActionStates = Object.freeze({\n    Highlight: 0,\n    UnHighlight: 1,\n    Archive: 2,\n    UnArchive: 3,\n    ReportedToAdmins: 4,\n    Mute: 5,\n    Unmute: 6\n});\n/**\n * @class\n * A class representing a conversation from new modmail\n * <style> #ModmailConversation {display: none} </style>\n * @name ModmailConversation\n * @example\n *\n * // Get a Modmail Conversation with a given ID\n * r.getNewModmailConversation('75hxt')\n * @extends RedditContent\n */ exports.modActionStates = modActionStates;\nvar ModmailConversation = class ModmailConversation extends _RedditContent.default {\n    static get conversationStates() {\n        return conversationStates;\n    }\n    static get modActionStates() {\n        return modActionStates;\n    }\n    get _uri() {\n        return \"api/mod/conversations/\".concat(this.id, \"?markRead=false\");\n    }\n    /**\n   * @summary Converts relevant fields in the ModmailConversation to snoowrap models.\n   * @param response API Response\n   * @return {ModmailConversation}\n   * @private\n   */ _transformApiResponse(response) {\n        response.conversation.owner = this._r._newObject(\"Subreddit\", {\n            id: response.conversation.owner.id,\n            display_name: response.conversation.owner.displayName\n        });\n        response.conversation.participant = this._r._newObject(\"ModmailConversationAuthor\", response.user.name, true);\n        for (var author of response.conversation.authors){\n            author = this._r._newObject(\"ModmailConversationAuthor\", author, true);\n        }\n        var conversationObjects = ModmailConversation._getConversationObjects(response.conversation, response);\n        return this._r._newObject(\"ModmailConversation\", _objectSpread({}, conversationObjects, {}, response.conversation), true);\n    }\n    /**\n   * @summary Maps objects to the ModmailConversation\n   * @param conversation The conversation to map objects to\n   * @param response API Response\n   * @return {object}\n   * @private\n   */ static _getConversationObjects(conversation, response) {\n        var conversationObjects = {};\n        for (var objId of conversation.objIds){\n            if (!conversationObjects[objId.key]) {\n                conversationObjects[objId.key] = [];\n            }\n            conversationObjects[objId.key].push(response[objId.key][objId.id]);\n        }\n        return conversationObjects;\n    }\n    /**\n   * @summary Reply to current ModmailConversation\n   * @param {string} body Markdown text\n   * @param {boolean} isAuthorHidden Subreddit-name reply if true, user's name if false\n   * @param {boolean} isInternal If reply should be to internal moderators only\n   * @return {Promise}\n   */ reply(body) {\n        var isAuthorHidden = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        return this._post({\n            uri: \"api/mod/conversations/\".concat(this.id),\n            form: {\n                body,\n                isAuthorHidden,\n                isInternal\n            }\n        });\n    }\n    /**\n   * @summary Archives the ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').archive()\n   */ archive() {\n        return this._post({\n            uri: \"api/mod/conversations/\".concat(this.id, \"/archive\")\n        });\n    }\n    /**\n   * @summary Unarchives the ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').unarchive()\n   */ unarchive() {\n        return this._post({\n            uri: \"api/mod/conversations/\".concat(this.id, \"/unarchive\")\n        });\n    }\n    /**\n   * @summary Marks a ModmailConversation as highlighted\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').highlight()\n   */ highlight() {\n        return this._post({\n            uri: \"api/mod/conversations/\".concat(this.id, \"/highlight\")\n        });\n    }\n    /**\n   * @summary Removed highlighted from a ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').unhighlight()\n   */ unhighlight() {\n        return this._delete({\n            uri: \"api/mod/conversations/\".concat(this.id, \"/highlight\")\n        });\n    }\n    /**\n   * @summary Mute the participant of the ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').mute()\n   */ mute() {\n        return this._post({\n            uri: \"api/mod/conversations/\".concat(this.id, \"/mute\")\n        });\n    }\n    /**\n   * @summary Unmute the participant of the ModmailConversation\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').unmute()\n   */ unmute() {\n        return this._post({\n            uri: \"api/mod/conversations/\".concat(this.id, \"/unmute\")\n        });\n    }\n    /**\n   * @summary Marks the ModmailConversation as read\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').read()\n   */ read() {\n        return this._r.markNewModmailConversationsAsRead([\n            this.id\n        ]);\n    }\n    /**\n   * @summary Marks the ModmailConversation as unread\n   * @return {Promise}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').unread()\n   */ unread() {\n        return this._r.markNewModmailConversationsAsUnread([\n            this.id\n        ]);\n    }\n    /**\n   * @summary Fetches the participant of the conversation\n   * @return {Promise<ModmailConversationAuthor>}\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').getParticipant().then(console.log)\n   * // ModmailConversationAuthor { muteStatus: {...}, name: \"SpyTec13\", created: '2015-11-22T14:30:38.821292+00:00', ...}\n   */ getParticipant() {\n        var _this = this;\n        return this._get({\n            uri: \"api/mod/conversations/\".concat(this.id, \"/user\")\n        }).then(function(res) {\n            return _this._r._newObject(\"ModmailConversationAuthor\", res, true);\n        });\n    }\n    /**\n   * @summary Returns whether the ModmailConversation is read.\n   * @return {boolean} true, if read. false otherwise\n   */ isRead() {\n        return this.lastUnread === null;\n    }\n    get name() {\n        return this.id;\n    }\n};\nvar _default = ModmailConversation;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/ModmailConversation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/More.js":
/*!****************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/More.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.emptyChildren = void 0;\nvar _lodash = __webpack_require__(/*! lodash */ \"lodash\");\nvar _Promise = _interopRequireDefault(__webpack_require__(/*! ../Promise.js */ \"(rsc)/./node_modules/snoowrap/dist/Promise.js\"));\nvar _helpers = __webpack_require__(/*! ../helpers.js */ \"(rsc)/./node_modules/snoowrap/dist/helpers.js\");\nvar _constants = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/snoowrap/dist/constants.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(source, true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(source).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar api_type = \"json\";\n/**\n* The `More` class is a helper representing reddit's exposed `more` type in comment threads, used to fetch additional comments\non a thread.\n* No instances of the `More` class are exposed externally by snoowrap; instead, comment lists are exposed as Listings.\nAdditional replies on an item can be fetched by calling `fetchMore` on a Listing, in the same manner as what would be done\nwith a Listing of posts. snoowrap should handle the differences internally, and expose a nearly-identical interface for the\ntwo use-cases.\n\nCombining reddit's `Listing` and `more` objects has the advantage of having a more consistent exposed interface; for example,\nif a consumer iterates over the comments on a Submission, all of the iterated items will actually be Comment objects, so the\nconsumer won't encounter an unexpected `more` object at the end. However, there are a few disadvantages, namely that (a) this\nleads to an increase in internal complexity, and (b) there are a few cases where reddit's `more` objects have different amounts\nof available information (e.g. all the child IDs of a `more` object are known on creation), which leads to different optimal\nbehavior.\n*/ var More = class More {\n    constructor(options, _r){\n        Object.assign(this, options);\n        this._r = _r;\n    }\n    /* Requests to /api/morechildren are capped at 20 comments at a time, but requests to /api/info are capped at 100, so\n  it's easier to send to the latter. The disadvantage is that comment replies are not automatically sent from requests\n  to /api/info. */ fetchMore(options) {\n        var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        if (options.amount <= 0 || startIndex >= this.children.length) {\n            return _Promise.default.resolve([]);\n        }\n        if (!options.skipReplies) {\n            return this.fetchTree(options, startIndex);\n        }\n        var ids = getNextIdSlice(this.children, startIndex, options.amount, _constants.MAX_API_INFO_AMOUNT).map(function(id) {\n            return \"t1_\".concat(id);\n        }); // Requests are capped at 100 comments. Send lots of requests recursively to get the comments, then concatenate them.\n        // (This speed-requesting is only possible with comment Listings since the entire list of ids is present initially.)\n        var promiseForThisBatch = this._r._getListing({\n            uri: \"api/info\",\n            qs: {\n                id: ids.join(\",\")\n            }\n        });\n        var nextRequestOptions = _objectSpread({}, options, {\n            amount: options.amount - ids.length\n        });\n        var promiseForRemainingItems = this.fetchMore(nextRequestOptions, startIndex + ids.length);\n        return _Promise.default.all([\n            promiseForThisBatch,\n            promiseForRemainingItems\n        ]).then(_lodash.flatten);\n    }\n    fetchTree(options, startIndex) {\n        var _this = this;\n        if (options.amount <= 0 || startIndex >= this.children.length) {\n            return _Promise.default.resolve([]);\n        }\n        var ids = getNextIdSlice(this.children, startIndex, options.amount, _constants.MAX_API_MORECHILDREN_AMOUNT);\n        return this._r._get({\n            uri: \"api/morechildren\",\n            qs: {\n                api_type,\n                children: ids.join(\",\"),\n                link_id: this.link_id || this.parent_id\n            }\n        }).tap(_helpers.handleJsonErrors).then(function(res) {\n            return res.json.data.things;\n        }).map(_helpers.addEmptyRepliesListing).then(_helpers.buildRepliesTree).then(function(resultTrees) {\n            /* Sometimes, when sending a request to reddit to get multiple comments from a `more` object, reddit decides to only\n      send some of the requested comments, and then stub out the remaining ones in a smaller `more` object. ( ¯\\_(ツ)_/¯ )\n      In these cases, recursively fetch the smaller `more` objects as well. */ var childMores = (0, _lodash.remove)(resultTrees, function(c) {\n                return c instanceof More;\n            });\n            (0, _lodash.forEach)(childMores, function(c) {\n                c.link_id = _this.link_id || _this.parent_id;\n            });\n            return _Promise.default.mapSeries(childMores, function(c) {\n                return c.fetchTree(_objectSpread({}, options, {\n                    amount: Infinity\n                }), 0);\n            }).then(function(expandedTrees) {\n                return _this.fetchMore(_objectSpread({}, options, {\n                    amount: options.amount - ids.length\n                }), startIndex + ids.length).then(function(nexts) {\n                    return (0, _lodash.concat)(resultTrees, (0, _lodash.flatten)(expandedTrees), nexts);\n                });\n            });\n        });\n    }\n    _clone() {\n        return new More((0, _lodash.pick)(this, Object.getOwnPropertyNames(this)), this._r);\n    }\n};\nfunction getNextIdSlice(children, startIndex, desiredAmount, limit) {\n    return children.slice(startIndex, startIndex + Math.min(desiredAmount, limit));\n}\nvar emptyChildren = new More({\n    children: []\n});\nexports.emptyChildren = emptyChildren;\nvar _default = More;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/More.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/MultiReddit.js":
/*!***********************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/MultiReddit.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _RedditContent = _interopRequireDefault(__webpack_require__(/*! ./RedditContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/RedditContent.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/**\n* @summary A class representing a multireddit.\n* <style> #MultiReddit {display: none} </style>\n* @example\n*\n* // Get a multireddit belonging to a specific user\n* r.getUser('multi-mod').getMultireddit('coding_languages')\n*/ var MultiReddit = class MultiReddit extends _RedditContent.default {\n    constructor(options, _r, _hasFetched){\n        var _this;\n        super(options, _r, _hasFetched);\n        _this = this;\n        if (_hasFetched) {\n            this.curator = _r.getUser(this.path.split(\"/\")[2]);\n            this.subreddits = this.subreddits.map(function(item) {\n                return _this._r._newObject(\"Subreddit\", item.data || {\n                    display_name: item.name\n                });\n            });\n        }\n    }\n    get _uri() {\n        return \"api/multi\".concat(this._path, \"?expand_srs=true\");\n    }\n    get _path() {\n        return \"/user/\".concat(this.curator.name, \"/m/\").concat(this.name);\n    }\n    /**\n  * @summary Copies this multireddit to the requester's own account.\n  * @param {object} options\n  * @param {string} options.newName The new name for the copied multireddit\n  * @returns {Promise} A Promise for the newly-copied multireddit\n  * @example r.getUser('multi-mod').getMultireddit('coding_languages').copy({newName: 'my_coding_languages_copy'})\n  */ copy(_ref) {\n        var _this2 = this;\n        var new_name = _ref.new_name, _ref$newName = _ref.newName, newName = _ref$newName === void 0 ? new_name : _ref$newName;\n        return this._r._getMyName().then(function(name) {\n            return _this2._post({\n                uri: \"api/multi/copy\",\n                form: {\n                    from: _this2._path,\n                    to: \"/user/\".concat(name, \"/m/\").concat(newName),\n                    display_name: newName\n                }\n            });\n        });\n    }\n    /**\n  * @summary Renames this multireddit.\n  * @desc **Note**: This method mutates this MultiReddit.\n  * @param {object} options\n  * @param {string} options.newName The new name for this multireddit.\n  * @returns {Promise} A Promise that fulfills with this multireddit\n  * @example r.getUser('multi-mod').getMultireddit('coding_languages').copy({newName: 'cookie_languages '})\n  * @deprecated Reddit no longer provides the corresponding API endpoint. Please use `edit()` with a new name.\n  */ rename(_ref2) {\n        var _this3 = this;\n        var new_name = _ref2.new_name, _ref2$newName = _ref2.newName, newName = _ref2$newName === void 0 ? new_name : _ref2$newName;\n        return this._r._getMyName().then(function(name) {\n            return _this3._post({\n                uri: \"api/multi/rename\",\n                form: {\n                    from: _this3._path,\n                    to: \"/user/\".concat(name, \"/m/\").concat(newName),\n                    display_name: newName\n                }\n            });\n        }).then(function(res) {\n            _this3.name = res.name;\n        }).return(this);\n    }\n    /**\n  * @summary Edits the properties of this multireddit.\n  * @desc **Note**: Any omitted properties here will simply retain their previous values.\n  * @param {object} options\n  * @param {string} [options.name] The name of the new multireddit. 50 characters max.\n  * @param {string} [options.description] A description for the new multireddit, in markdown.\n  * @param {string} [options.visibility] The multireddit's visibility setting. One of `private`, `public`, `hidden`.\n  * @param {string} [options.icon_name] One of `art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`,\n  `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, `life advice`, `military`, `models pinup`,\n  `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`,\n  `unusual stories`, `video`, `None`\n  * @param {string} [options.key_color] A six-digit RGB hex color, preceded by '#'\n  * @param {string} [options.weighting_scheme] One of 'classic', 'fresh'\n  * @returns {Promise} The updated version of this multireddit\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').edit({visibility: 'hidden'})\n  */ edit(_ref3) {\n        var _ref3$name = _ref3.name, name = _ref3$name === void 0 ? \"\" : _ref3$name, description = _ref3.description, icon_name = _ref3.icon_name, key_color = _ref3.key_color, visibility = _ref3.visibility, weighting_scheme = _ref3.weighting_scheme;\n        var display_name = name.length ? name : this.name;\n        return this._put({\n            uri: \"api/multi\".concat(this._path),\n            form: {\n                model: JSON.stringify({\n                    description_md: description,\n                    display_name,\n                    icon_name,\n                    key_color,\n                    visibility,\n                    weighting_scheme\n                })\n            }\n        });\n    }\n    /**\n  * @summary Adds a subreddit to this multireddit.\n  * @param {Subreddit} sub The Subreddit object to add (or a string representing a subreddit name)\n  * @returns {Promise} A Promise that fulfills with this multireddit when the reuqest is complete\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').addSubreddit('cookies')\n  */ addSubreddit(sub) {\n        sub = typeof sub === \"string\" ? sub : sub.display_name;\n        return this._put({\n            uri: \"api/multi\".concat(this._path, \"/r/\").concat(sub),\n            form: {\n                model: JSON.stringify({\n                    name: sub\n                })\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Removes a subreddit from this multireddit.\n  * @param {Subreddit} sub The Subreddit object to remove (or a string representing a subreddit name)\n  * @returns {Promise} A Promise that fulfills with this multireddit when the request is complete\n  * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').removeSubreddit('cookies')\n  */ removeSubreddit(sub) {\n        return this._delete({\n            uri: \"api/multi\".concat(this._path, \"/r/\").concat(typeof sub === \"string\" ? sub : sub.display_name)\n        }).return(this);\n    }\n}; // MultiReddit#delete is not in the class body since Safari 9 can't parse the `delete` function name in class bodies.\n/**\n* @function\n* @name delete\n* @summary Deletes this multireddit.\n* @returns {Promise} A Promise that fulfills when this request is complete\n* @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').delete()\n* @memberof MultiReddit\n* @instance\n*/ Object.defineProperty(MultiReddit.prototype, \"delete\", {\n    value () {\n        return this._delete({\n            uri: \"api/multi\".concat(this._path)\n        });\n    },\n    configurable: true,\n    writable: true\n});\nvar _default = MultiReddit;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/MultiReddit.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/PrivateMessage.js":
/*!**************************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/PrivateMessage.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _helpers = __webpack_require__(/*! ../helpers.js */ \"(rsc)/./node_modules/snoowrap/dist/helpers.js\");\nvar _ReplyableContent = _interopRequireDefault(__webpack_require__(/*! ./ReplyableContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/ReplyableContent.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/**\n* A class representing a private message or a modmail.\n* <style> #PrivateMessage {display: none} </style>\n* @example\n*\n* // Get a Private Message with a given ID\n* r.getMessage('51shnw')\n* @extends ReplyableContent\n*/ var PrivateMessage = class PrivateMessage extends _ReplyableContent.default {\n    get _uri() {\n        return \"message/messages/\".concat(this.name.slice(3));\n    }\n    _transformApiResponse(response) {\n        response[0].replies = (0, _helpers.buildRepliesTree)(response[0].replies || []);\n        return (0, _helpers.findMessageInTree)(this.name, response[0]);\n    }\n    /**\n  * @summary Marks this message as read.\n  * @returns {Promise} A Promise that fulfills with this message after the request is complete\n  * @example r.getMessage('51shxv').markAsRead()\n  */ markAsRead() {\n        return this._r.markMessagesAsRead([\n            this\n        ]).return(this);\n    }\n    /**\n  * @summary Marks this message as unread.\n  * @returns {Promise} A Promise that fulfills with this message after the request is complete\n  * @example r.getMessage('51shxv').markAsUnread()\n  */ markAsUnread() {\n        return this._r.markMessagesAsUnread([\n            this\n        ]).return(this);\n    }\n    /**\n  * @summary Mutes the author of this message for 72 hours. This can only be used on moderator mail.\n  * @returns {Promise} A Promise that fulfills with this message after the request is complete\n  * @example r.getMessage('51shxv').muteAuthor()\n  */ muteAuthor() {\n        return this._post({\n            uri: \"api/mute_message_author\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Unmutes the author of this message.\n  * @returns {Promise} A Promise that fulfills with this message after the request is complete\n  * @example r.getMessage('51shxv').unmuteAuthor()\n  */ unmuteAuthor() {\n        return this._post({\n            uri: \"api/unmute_message_author\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Deletes this message from the authenticated user's inbox.\n  * @desc This only removes the item from the authenticated user's inbox. It has no effect on how the item looks to the sender.\n  * @returns {Promise} A Promise that fulfills with this message when the request is complete.\n  * @example\n  *\n  * const firstMessage = r.getInbox().get(0);\n  * firstMessage.deleteFromInbox();\n  */ deleteFromInbox() {\n        return this._post({\n            uri: \"api/del_msg\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n};\nvar _default = PrivateMessage;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9vYmplY3RzL1ByaXZhdGVNZXNzYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsV0FBV0MsbUJBQU9BLENBQUMsb0VBQWU7QUFFdEMsSUFBSUMsb0JBQW9CQyx1QkFBdUJGLG1CQUFPQSxDQUFDLDZGQUF1QjtBQUU5RSxTQUFTRSx1QkFBdUJDLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUwsU0FBU0s7SUFBSTtBQUFHO0FBRTlGOzs7Ozs7OztBQVFBLEdBQ0EsSUFBSUUsaUJBQWlCLE1BQU1BLHVCQUF1Qkosa0JBQWtCSCxPQUFPO0lBQ3pFLElBQUlRLE9BQU87UUFDVCxPQUFPLG9CQUFvQkMsTUFBTSxDQUFDLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUM7SUFDcEQ7SUFFQUMsc0JBQXNCQyxRQUFRLEVBQUU7UUFDOUJBLFFBQVEsQ0FBQyxFQUFFLENBQUNDLE9BQU8sR0FBRyxDQUFDLEdBQUdiLFNBQVNjLGdCQUFnQixFQUFFRixRQUFRLENBQUMsRUFBRSxDQUFDQyxPQUFPLElBQUksRUFBRTtRQUM5RSxPQUFPLENBQUMsR0FBR2IsU0FBU2UsaUJBQWlCLEVBQUUsSUFBSSxDQUFDTixJQUFJLEVBQUVHLFFBQVEsQ0FBQyxFQUFFO0lBQy9EO0lBRUE7Ozs7RUFJQSxHQUdBSSxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUNDLEVBQUUsQ0FBQ0Msa0JBQWtCLENBQUM7WUFBQyxJQUFJO1NBQUMsRUFBRUMsTUFBTSxDQUFDLElBQUk7SUFDdkQ7SUFDQTs7OztFQUlBLEdBR0FDLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQ0gsRUFBRSxDQUFDSSxvQkFBb0IsQ0FBQztZQUFDLElBQUk7U0FBQyxFQUFFRixNQUFNLENBQUMsSUFBSTtJQUN6RDtJQUNBOzs7O0VBSUEsR0FHQUcsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDQyxLQUFLLENBQUM7WUFDaEJDLEtBQUs7WUFDTEMsTUFBTTtnQkFDSkMsSUFBSSxJQUFJLENBQUNqQixJQUFJO1lBQ2Y7UUFDRixHQUFHVSxNQUFNLENBQUMsSUFBSTtJQUNoQjtJQUNBOzs7O0VBSUEsR0FHQVEsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDSixLQUFLLENBQUM7WUFDaEJDLEtBQUs7WUFDTEMsTUFBTTtnQkFDSkMsSUFBSSxJQUFJLENBQUNqQixJQUFJO1lBQ2Y7UUFDRixHQUFHVSxNQUFNLENBQUMsSUFBSTtJQUNoQjtJQUNBOzs7Ozs7OztFQVFBLEdBR0FTLGtCQUFrQjtRQUNoQixPQUFPLElBQUksQ0FBQ0wsS0FBSyxDQUFDO1lBQ2hCQyxLQUFLO1lBQ0xDLE1BQU07Z0JBQ0pDLElBQUksSUFBSSxDQUFDakIsSUFBSTtZQUNmO1FBQ0YsR0FBR1UsTUFBTSxDQUFDLElBQUk7SUFDaEI7QUFFRjtBQUNBLElBQUlVLFdBQVd2QjtBQUNmVCxrQkFBZSxHQUFHZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3Nub293cmFwL2Rpc3Qvb2JqZWN0cy9Qcml2YXRlTWVzc2FnZS5qcz9mYjdlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vaGVscGVycy5qc1wiKTtcblxudmFyIF9SZXBseWFibGVDb250ZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SZXBseWFibGVDb250ZW50LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4qIEEgY2xhc3MgcmVwcmVzZW50aW5nIGEgcHJpdmF0ZSBtZXNzYWdlIG9yIGEgbW9kbWFpbC5cbiogPHN0eWxlPiAjUHJpdmF0ZU1lc3NhZ2Uge2Rpc3BsYXk6IG5vbmV9IDwvc3R5bGU+XG4qIEBleGFtcGxlXG4qXG4qIC8vIEdldCBhIFByaXZhdGUgTWVzc2FnZSB3aXRoIGEgZ2l2ZW4gSURcbiogci5nZXRNZXNzYWdlKCc1MXNobncnKVxuKiBAZXh0ZW5kcyBSZXBseWFibGVDb250ZW50XG4qL1xudmFyIFByaXZhdGVNZXNzYWdlID0gY2xhc3MgUHJpdmF0ZU1lc3NhZ2UgZXh0ZW5kcyBfUmVwbHlhYmxlQ29udGVudC5kZWZhdWx0IHtcbiAgZ2V0IF91cmkoKSB7XG4gICAgcmV0dXJuIFwibWVzc2FnZS9tZXNzYWdlcy9cIi5jb25jYXQodGhpcy5uYW1lLnNsaWNlKDMpKTtcbiAgfVxuXG4gIF90cmFuc2Zvcm1BcGlSZXNwb25zZShyZXNwb25zZSkge1xuICAgIHJlc3BvbnNlWzBdLnJlcGxpZXMgPSAoMCwgX2hlbHBlcnMuYnVpbGRSZXBsaWVzVHJlZSkocmVzcG9uc2VbMF0ucmVwbGllcyB8fCBbXSk7XG4gICAgcmV0dXJuICgwLCBfaGVscGVycy5maW5kTWVzc2FnZUluVHJlZSkodGhpcy5uYW1lLCByZXNwb25zZVswXSk7XG4gIH0gLy8gVE9ETzogR2V0IHJpZCBvZiB0aGUgcmVwZWF0ZWQgY29kZSBoZXJlLCBtb3N0IG9mIHRoZXNlIG1ldGhvZHMgYXJlIGV4YWN0bHkgdGhlIHNhbWUgd2l0aCB0aGUgZXhjZXB0aW9uIG9mIHRoZSBVUklzXG5cbiAgLyoqXG4gICogQHN1bW1hcnkgTWFya3MgdGhpcyBtZXNzYWdlIGFzIHJlYWQuXG4gICogQHJldHVybnMge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdpdGggdGhpcyBtZXNzYWdlIGFmdGVyIHRoZSByZXF1ZXN0IGlzIGNvbXBsZXRlXG4gICogQGV4YW1wbGUgci5nZXRNZXNzYWdlKCc1MXNoeHYnKS5tYXJrQXNSZWFkKClcbiAgKi9cblxuXG4gIG1hcmtBc1JlYWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3IubWFya01lc3NhZ2VzQXNSZWFkKFt0aGlzXSkucmV0dXJuKHRoaXMpO1xuICB9XG4gIC8qKlxuICAqIEBzdW1tYXJ5IE1hcmtzIHRoaXMgbWVzc2FnZSBhcyB1bnJlYWQuXG4gICogQHJldHVybnMge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdpdGggdGhpcyBtZXNzYWdlIGFmdGVyIHRoZSByZXF1ZXN0IGlzIGNvbXBsZXRlXG4gICogQGV4YW1wbGUgci5nZXRNZXNzYWdlKCc1MXNoeHYnKS5tYXJrQXNVbnJlYWQoKVxuICAqL1xuXG5cbiAgbWFya0FzVW5yZWFkKCkge1xuICAgIHJldHVybiB0aGlzLl9yLm1hcmtNZXNzYWdlc0FzVW5yZWFkKFt0aGlzXSkucmV0dXJuKHRoaXMpO1xuICB9XG4gIC8qKlxuICAqIEBzdW1tYXJ5IE11dGVzIHRoZSBhdXRob3Igb2YgdGhpcyBtZXNzYWdlIGZvciA3MiBob3Vycy4gVGhpcyBjYW4gb25seSBiZSB1c2VkIG9uIG1vZGVyYXRvciBtYWlsLlxuICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCBmdWxmaWxscyB3aXRoIHRoaXMgbWVzc2FnZSBhZnRlciB0aGUgcmVxdWVzdCBpcyBjb21wbGV0ZVxuICAqIEBleGFtcGxlIHIuZ2V0TWVzc2FnZSgnNTFzaHh2JykubXV0ZUF1dGhvcigpXG4gICovXG5cblxuICBtdXRlQXV0aG9yKCkge1xuICAgIHJldHVybiB0aGlzLl9wb3N0KHtcbiAgICAgIHVyaTogJ2FwaS9tdXRlX21lc3NhZ2VfYXV0aG9yJyxcbiAgICAgIGZvcm06IHtcbiAgICAgICAgaWQ6IHRoaXMubmFtZVxuICAgICAgfVxuICAgIH0pLnJldHVybih0aGlzKTtcbiAgfVxuICAvKipcbiAgKiBAc3VtbWFyeSBVbm11dGVzIHRoZSBhdXRob3Igb2YgdGhpcyBtZXNzYWdlLlxuICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCBmdWxmaWxscyB3aXRoIHRoaXMgbWVzc2FnZSBhZnRlciB0aGUgcmVxdWVzdCBpcyBjb21wbGV0ZVxuICAqIEBleGFtcGxlIHIuZ2V0TWVzc2FnZSgnNTFzaHh2JykudW5tdXRlQXV0aG9yKClcbiAgKi9cblxuXG4gIHVubXV0ZUF1dGhvcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zdCh7XG4gICAgICB1cmk6ICdhcGkvdW5tdXRlX21lc3NhZ2VfYXV0aG9yJyxcbiAgICAgIGZvcm06IHtcbiAgICAgICAgaWQ6IHRoaXMubmFtZVxuICAgICAgfVxuICAgIH0pLnJldHVybih0aGlzKTtcbiAgfVxuICAvKipcbiAgKiBAc3VtbWFyeSBEZWxldGVzIHRoaXMgbWVzc2FnZSBmcm9tIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIncyBpbmJveC5cbiAgKiBAZGVzYyBUaGlzIG9ubHkgcmVtb3ZlcyB0aGUgaXRlbSBmcm9tIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIncyBpbmJveC4gSXQgaGFzIG5vIGVmZmVjdCBvbiBob3cgdGhlIGl0ZW0gbG9va3MgdG8gdGhlIHNlbmRlci5cbiAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgZnVsZmlsbHMgd2l0aCB0aGlzIG1lc3NhZ2Ugd2hlbiB0aGUgcmVxdWVzdCBpcyBjb21wbGV0ZS5cbiAgKiBAZXhhbXBsZVxuICAqXG4gICogY29uc3QgZmlyc3RNZXNzYWdlID0gci5nZXRJbmJveCgpLmdldCgwKTtcbiAgKiBmaXJzdE1lc3NhZ2UuZGVsZXRlRnJvbUluYm94KCk7XG4gICovXG5cblxuICBkZWxldGVGcm9tSW5ib3goKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Bvc3Qoe1xuICAgICAgdXJpOiAnYXBpL2RlbF9tc2cnLFxuICAgICAgZm9ybToge1xuICAgICAgICBpZDogdGhpcy5uYW1lXG4gICAgICB9XG4gICAgfSkucmV0dXJuKHRoaXMpO1xuICB9XG5cbn07XG52YXIgX2RlZmF1bHQgPSBQcml2YXRlTWVzc2FnZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfaGVscGVycyIsInJlcXVpcmUiLCJfUmVwbHlhYmxlQ29udGVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiUHJpdmF0ZU1lc3NhZ2UiLCJfdXJpIiwiY29uY2F0IiwibmFtZSIsInNsaWNlIiwiX3RyYW5zZm9ybUFwaVJlc3BvbnNlIiwicmVzcG9uc2UiLCJyZXBsaWVzIiwiYnVpbGRSZXBsaWVzVHJlZSIsImZpbmRNZXNzYWdlSW5UcmVlIiwibWFya0FzUmVhZCIsIl9yIiwibWFya01lc3NhZ2VzQXNSZWFkIiwicmV0dXJuIiwibWFya0FzVW5yZWFkIiwibWFya01lc3NhZ2VzQXNVbnJlYWQiLCJtdXRlQXV0aG9yIiwiX3Bvc3QiLCJ1cmkiLCJmb3JtIiwiaWQiLCJ1bm11dGVBdXRob3IiLCJkZWxldGVGcm9tSW5ib3giLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/PrivateMessage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/RedditContent.js":
/*!*************************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/RedditContent.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _lodash = __webpack_require__(/*! lodash */ \"lodash\");\nvar _Promise = _interopRequireDefault(__webpack_require__(/*! ../Promise.js */ \"(rsc)/./node_modules/snoowrap/dist/Promise.js\"));\nvar _util = _interopRequireDefault(__webpack_require__(/*! util */ \"util\"));\nvar _helpers = __webpack_require__(/*! ../helpers.js */ \"(rsc)/./node_modules/snoowrap/dist/helpers.js\");\nvar _constants = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/snoowrap/dist/constants.js\");\nvar _Listing = _interopRequireDefault(__webpack_require__(/*! ./Listing.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/Listing.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/**\n* A base class for content from reddit. With the expection of Listings, all content types extend this class.\n* This class should be considered 'abstract', to the extend that JavaScript classes can be -- it should not be necessary to\n* instantiate it directly.\n* <style> #RedditContent {display: none} </style>\n*/ var RedditContent = class RedditContent {\n    constructor(options, _r, _hasFetched){\n        // _r refers to the snoowrap requester that is used to fetch this content.\n        this._r = _r;\n        this._fetch = null;\n        this._hasFetched = !!_hasFetched;\n        Object.assign(this, options);\n        if (typeof Proxy !== \"undefined\" && !this._hasFetched && _r._config.proxies) {\n            return new Proxy(this, {\n                get (target, key) {\n                    return key in target || key === \"length\" || key in _Promise.default.prototype ? target[key] : target.fetch()[key];\n                }\n            });\n        }\n    }\n    /**\n  * @summary Fetches this content from reddit.\n  * @desc This will not mutate the original content object; all Promise properties will remain as Promises after the content has\n  * been fetched. However, the information on this object will be cached, so it may become out-of-date with the content on\n  * reddit. To clear the cache and fetch this object from reddit again, use `refresh()`.\n  *\n  * If snoowrap is running in an environment that supports ES2015 Proxies (e.g. Chrome 49+), then `fetch()` will get\n  * automatically called when an unknown property is accessed on an unfetched content object.\n  * @returns {Promise} A version of this object with all of its fetched properties from reddit. This will not mutate the\n  object. Once an object has been fetched once, its properties will be cached, so they might end up out-of-date if this\n  function is called again. To refresh an object, use refresh().\n  * @example\n  *\n  * r.getUser('not_an_aardvark').fetch().then(userInfo => {\n  *   console.log(userInfo.name); // 'not_an_aardvark'\n  *   console.log(userInfo.created_utc); // 1419104352\n  * });\n  *\n  * r.getComment('d1xchqn').fetch().then(comment => comment.body).then(console.log)\n  * // => 'This is a little too interesting for my liking'\n  *\n  * // In environments that support ES2015 Proxies, the above line is equivalent to:\n  * r.getComment('d1xchqn').body.then(console.log);\n  * // => 'This is a little too interesting for my liking'\n  */ fetch() {\n        var _this = this;\n        if (!this._fetch) {\n            this._fetch = this._r._promiseWrap(this._r._get({\n                uri: this._uri\n            }).then(function(res) {\n                return _this._transformApiResponse(res);\n            }));\n        }\n        return this._fetch;\n    }\n    /**\n  * @summary Refreshes this content.\n  * @returns {Promise} A newly-fetched version of this content\n  * @example\n  *\n  * var someComment = r.getComment('cmfkyus');\n  * var initialCommentBody = some_comment.fetch().then(comment => comment.body);\n  *\n  * setTimeout(() => {\n  *   someComment.refresh().then(refreshedComment => {\n  *     if (initialCommentBody.value() !== refreshedComment.body) {\n  *       console.log('This comment has changed since 10 seconds ago.');\n  *     }\n  *   });\n  * }, 10000);\n  */ refresh() {\n        this._fetch = null;\n        return this.fetch();\n    }\n    /**\n  * @summary Returns a stringifyable version of this object.\n  * @desc It is usually not necessary to call this method directly; simply running JSON.stringify(some_object) will strip the\n  private properties anyway.\n  * @returns {object} A version of this object with all the private properties stripped\n  * @example\n  *\n  * var user = r.getUser('not_an_aardvark');\n  * JSON.stringify(user) // => '{\"name\":\"not_an_aardvark\"}'\n  */ toJSON() {\n        return (0, _lodash.mapValues)(this._stripPrivateProps(), function(value, key) {\n            if (value instanceof RedditContent && !value._hasFetched) {\n                if (value.constructor._name === \"RedditUser\" && _constants.USER_KEYS.has(key)) {\n                    return value.name;\n                }\n                if (value.constructor._name === \"Subreddit\" && _constants.SUBREDDIT_KEYS.has(key)) {\n                    return value.display_name;\n                }\n            }\n            return value && value.toJSON ? value.toJSON() : value;\n        });\n    }\n    _stripPrivateProps() {\n        return (0, _lodash.pick)(this, Object.keys(this).filter(function(key) {\n            return !key.startsWith(\"_\");\n        }));\n    }\n    _transformApiResponse(response) {\n        return response;\n    }\n    _clone() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$deep = _ref.deep, deep = _ref$deep === void 0 ? false : _ref$deep;\n        var clonedProps = (0, _lodash.mapValues)(this, function(value) {\n            if (deep) {\n                return value instanceof RedditContent || value instanceof _Listing.default ? value._clone({\n                    deep\n                }) : (0, _lodash.cloneDeep)(value);\n            }\n            return value;\n        });\n        return this._r._newObject(this.constructor._name, clonedProps, this._hasFetched);\n    }\n    _getListing() {\n        var _this$_r;\n        return (_this$_r = this._r)._getListing.apply(_this$_r, arguments);\n    }\n};\n(0, _helpers.defineInspectFunc)(RedditContent.prototype, function() {\n    return \"\".concat(this.constructor._name, \" \").concat(_util.default.inspect(this._stripPrivateProps()));\n});\n_constants.HTTP_VERBS.forEach(function(method) {\n    Object.defineProperty(RedditContent.prototype, \"_\".concat(method), {\n        value () {\n            var _this$_r2;\n            return (_this$_r2 = this._r)[\"_\".concat(method)].apply(_this$_r2, arguments);\n        },\n        configurable: true,\n        writable: true\n    });\n});\nvar _default = RedditContent;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/RedditContent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/RedditUser.js":
/*!**********************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/RedditUser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _constants = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/snoowrap/dist/constants.js\");\nvar _errors = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/snoowrap/dist/errors.js\");\nvar _RedditContent = _interopRequireDefault(__webpack_require__(/*! ./RedditContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/RedditContent.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(source, true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(source).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n* A class representing a reddit user\n* <style> #RedditUser {display: none} </style>\n* @extends ReplyableContent\n* @example\n*\n* // Get a user with the given username\n* r.getUser('spez')\n*/ var RedditUser = class RedditUser extends _RedditContent.default {\n    get _uri() {\n        if (typeof this.name !== \"string\" || !_constants.USERNAME_REGEX.test(this.name)) {\n            throw new _errors.InvalidUserError(this.name);\n        }\n        return \"user/\".concat(this.name, \"/about\");\n    }\n    /**\n  * @summary Gives reddit gold to a user\n  * @param {number} months The number of months of gold to give. This must be a number between 1 and 36.\n  * @returns {Promise} A Promise that fulfills when the request is complete\n  * @example r.getUser('not_an_aardvark').giveGold(12)\n  */ giveGold(months) {\n        /* Ideally this would allow for more than 36 months by sending multiple requests, but I don't have the resources to test\n    that code, and it's probably better that such a big investment be deliberate anyway. */ if (typeof months !== \"number\" || months < 1 || months > 36) {\n            throw new _errors.InvalidMethodCallError(\"Invalid argument to RedditUser#giveGold; `months` must be between 1 and 36.\");\n        }\n        return this._post({\n            uri: \"api/v1/gold/give/\".concat(this.name),\n            form: {\n                months\n            }\n        });\n    }\n    /**\n  * Assigns flair to this user on a given subreddit (as a moderator).\n  * @param {object} options\n  * @param {string} options.subredditName The subreddit that flair should be assigned on\n  * @param {string} [options.text=''] The text that the user's flair should have\n  * @param {string} [options.cssClass=''] The CSS class that the user's flair should have\n  * @returns {Promise} A Promise that fulfills with the current user after the request is complete\n  * @example r.getUser('not_an_aardvark').assignFlair({subredditName: 'snoowrap', text: \"Isn't an aardvark\"})\n  */ assignFlair(options) {\n        return this._r._assignFlair(_objectSpread({}, options, {\n            name: this.name\n        })).return(this);\n    }\n    /**\n  * @summary Adds this user as a friend, or modifies their friend note.\n  * @desc **Note:** reddit.com only permits \"notes\" to be added on friends if the authenticated account has a subscription to\n  reddit gold.\n  * @param {object} options\n  * @param {string} [options.note] An optional note to add on the user (300 characters max)\n  * @returns {Promise} A Promise that fulfills when this request is complete\n  * @example r.getUser('actually_an_aardvark').friend({note: 'Is an aardvark'})\n  */ friend() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, note = _ref.note;\n        return this._put({\n            uri: \"api/v1/me/friends/\".concat(this.name),\n            body: {\n                user: this.name,\n                note\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Removes this user from the requester's friend list.\n  * @returns {Promise} A Promise that fulfills with this user when the request is complete\n  * @example r.getUser('actually_an_aardvark').unfriend()\n  */ unfriend() {\n        return this._delete({\n            uri: \"api/v1/me/friends/\".concat(this.name)\n        });\n    }\n    /**\n  * @summary Gets information on this user related to their presence on the friend list.\n  * @returns {Promise} A Promise that fulfills with an object containing friend information\n  * @example\n  *\n  * r.getUser('not_an_aardvark').getFriendInformation().then(console.log)\n  * // => { date: 1460318190, note: 'Is an aardvark', name: 'actually_an_aardvark', id: 't2_q3519' }\n  */ getFriendInformation() {\n        return this._get({\n            uri: \"api/v1/me/friends/\".concat(this.name)\n        });\n    }\n    /**\n  * @summary Gets a list of this user's trophies.\n  * @returns {Promise} A TrophyList containing this user's trophies\n  * @example\n  *\n  * r.getUser('not_an_aardvark').getTrophies().then(console.log)\n  * // => TrophyList { trophies: [\n  * //  Trophy { ... },\n  * //  Trophy { ... },\n  * //  ...\n  * // ] }\n  */ getTrophies() {\n        return this._get({\n            uri: \"api/v1/user/\".concat(this.name, \"/trophies\")\n        });\n    }\n    /**\n  * @summary Gets a Listing of the content this user has submitted.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getUser('spez').getOverview().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getOverview(options) {\n        return this._getListing({\n            uri: \"user/\".concat(this.name, \"/overview\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a Listing of this user's submissions.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getUser('spez').getSubmissions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getSubmissions(options) {\n        return this._getListing({\n            uri: \"user/\".concat(this.name, \"/submitted\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a Listing of this user's comments.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Comments\n  * @example\n  *\n  * r.getUser('spez').getComments().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  ...\n  * // ]\n  */ getComments(options) {\n        return this._getListing({\n            uri: \"user/\".concat(this.name, \"/comments\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a Listing of the content that this user has upvoted.\n  * @desc **Note**: This can only be used to view one's own upvoted content, unless the user in question has chosen to\n  make this information public in their preferences.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getUpvotedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getUpvotedContent(options) {\n        return this._getListing({\n            uri: \"user/\".concat(this.name, \"/upvoted\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a Listing of the content that this user has downvoted.\n  * @desc **Note**: This can only be used to view one's own downvoted content, unless the user in question has chosen to\n  make this information public in their preferences.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getDownvotedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getDownvotedContent(options) {\n        return this._getListing({\n            uri: \"user/\".concat(this.name, \"/downvoted\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a Listing of the submissions that this user has hidden.\n  * @desc **Note**: This can only be used to view one's own set of hidden posts, as reddit will return a 403 error when\n  attempting to view another users' hidden posts.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions\n  * @example\n  *\n  * r.getMe().getHiddenContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getHiddenContent(options) {\n        return this._getListing({\n            uri: \"user/\".concat(this.name, \"/hidden\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a Listing of the content that this user has saved.\n  * @desc **Note**: This can only be used to view one's own set of saved content, as reddit will return a 403 error when\n  attempting to view other users' saved content.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments.\n  * @example\n  *\n  * r.getMe().getSavedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getSavedContent(options) {\n        return this._getListing({\n            uri: \"user/\".concat(this.name, \"/saved\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a Listing of this user's content which has been gilded.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing Submissions and Comments\n  * @example\n  *\n  * r.getMe().getGildedContent().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getGildedContent(options) {\n        return this._getListing({\n            uri: \"user/\".concat(this.name, \"/gilded\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a multireddit belonging to this user.\n  * @param {string} name The name of the multireddit\n  * @returns {MultiReddit} An unfetched MultiReddit object\n  * @example\n  *\n  * r.getUser('multi-mod').getMultireddit('coding_languages')\n  * // => MultiReddit {\n  * //  name: 'coding_languages',\n  * //  curator: RedditUser { name: 'multi-mod' },\n  * //  path: '/user/multi-mod/m/coding_languages'\n  * // }\n  */ getMultireddit(name) {\n        return this._r._newObject(\"MultiReddit\", {\n            name,\n            curator: this\n        });\n    }\n    /**\n  * @summary Gets an Array of all of this user's MultiReddits.\n  * @returns {Promise} A Promise that fulfills with an Array containing MultiReddits.\n  * @example\n  *\n  * r.getUser('multi-mod').getMultireddits().then(console.log)\n  *\n  * // => [\n  *   MultiReddit { ... },\n  *   MultiReddit { ... },\n  *   MultiReddit { ... },\n  *   ...\n  * ]\n  */ getMultireddits() {\n        return this._get({\n            uri: \"api/multi/user/\".concat(this.name),\n            qs: {\n                expand_srs: true\n            }\n        });\n    }\n};\nvar _default = RedditUser;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/RedditUser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/ReplyableContent.js":
/*!****************************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/ReplyableContent.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _helpers = __webpack_require__(/*! ../helpers.js */ \"(rsc)/./node_modules/snoowrap/dist/helpers.js\");\nvar _RedditContent = _interopRequireDefault(__webpack_require__(/*! ./RedditContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/RedditContent.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar api_type = \"json\";\n/**\n* A set of mixin functions that apply to Submissions, Comments, and PrivateMessages\n* <style> #ReplyableContent {display: none} </style>\n* @extends RedditContent\n*/ var ReplyableContent = class ReplyableContent extends _RedditContent.default {\n    /**\n  * @summary Removes this Comment, Submission or PrivateMessage from public listings.\n  * @desc This requires the authenticated user to be a moderator of the subreddit with the `posts` permission.\n  * @param {object} options\n  * @param {boolean} [options.spam=false] Determines whether this should be marked as spam\n  * @returns {Promise} A Promise that fulfills with this content when the request is complete\n  * @example r.getComment('c08pp5z').remove({spam: true})\n  */ remove() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$spam = _ref.spam, spam = _ref$spam === void 0 ? false : _ref$spam;\n        return this._post({\n            uri: \"api/remove\",\n            form: {\n                spam,\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Approves this Comment, Submission, or PrivateMessage, re-adding it to public listings if it had been removed\n  * @returns {Promise} A Promise that fulfills with this content when the request is complete\n  * @example r.getComment('c08pp5z').approve()\n  */ approve() {\n        return this._post({\n            uri: \"api/approve\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Reports this content anonymously to subreddit moderators (for Comments and Submissions)\n  or to the reddit admins (for PrivateMessages)\n  * @param {object} [options]\n  * @param {string} [options.reason] The reason for the report\n  * @returns {Promise} A Promise that fulfills with this content when the request is complete\n  * @example r.getComment('c08pp5z').report({reason: 'Breaking the subreddit rules'})\n  */ report() {\n        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, reason = _ref2.reason;\n        return this._post({\n            uri: \"api/report\",\n            form: {\n                api_type,\n                reason: \"other\",\n                other_reason: reason,\n                thing_id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Ignores reports on this Comment, Submission, or PrivateMessage\n  * @returns {Promise} A Promise that fulfills with this content when the request is complete\n  * @example r.getComment('c08pp5z').ignoreReports()\n  */ ignoreReports() {\n        return this._post({\n            uri: \"api/ignore_reports\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Unignores reports on this Comment, Submission, or PrivateMessages\n  * @returns {Promise} A Promise that fulfills with this content when the request is complete\n  * @example r.getComment('c08pp5z').unignoreReports()\n  */ unignoreReports() {\n        return this._post({\n            uri: \"api/unignore_reports\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Submits a new reply to this object. (This takes the form of a new Comment if this object is a Submission/Comment,\n  or a new PrivateMessage if this object is a PrivateMessage.)\n  * @param {string} text The content of the reply, in raw markdown text\n  * @returns {Promise} A Promise that fulfills with the newly-created reply\n  * @example r.getSubmission('4e60m3').reply('This was an interesting post. Thanks.');\n  */ reply(text) {\n        return this._post({\n            uri: \"api/comment\",\n            form: {\n                api_type,\n                text,\n                thing_id: this.name\n            }\n        }).tap((0, _helpers.handleJsonErrors)(this)).then(function(res) {\n            return res.json.data.things[0];\n        });\n    }\n    /**\n  * @summary Blocks the author of this content.\n  * @desc **Note:** In order for this function to have an effect, this item **must** be in the authenticated account's inbox or\n  modmail somewhere. The reddit API gives no outward indication of whether this condition is satisfied, so the returned Promise\n  will fulfill even if this is not the case.\n  * @returns {Promise} A Promise that fulfills with this message after the request is complete\n  * @example\n  *\n  * r.getInbox({limit: 1}).then(messages =>\n  *   messages[0].blockAuthor();\n  * );\n  */ blockAuthor() {\n        return this._post({\n            uri: \"api/block\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n};\nvar _default = ReplyableContent;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/ReplyableContent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/Submission.js":
/*!**********************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/Submission.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _helpers = __webpack_require__(/*! ../helpers.js */ \"(rsc)/./node_modules/snoowrap/dist/helpers.js\");\nvar _VoteableContent = _interopRequireDefault(__webpack_require__(/*! ./VoteableContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/VoteableContent.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(source, true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(source).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar api_type = \"json\";\n/**\n* A class representing a reddit submission\n* <style> #Submission {display: none} </style>\n* @extends VoteableContent\n* @example\n*\n* // Get a submission by ID\n* r.getSubmission('2np694')\n*/ var Submission = class Submission extends _VoteableContent.default {\n    constructor(data, _r, _hasFetched){\n        super(data, _r, _hasFetched);\n        if (_hasFetched) {\n            this.comments = this.comments || (0, _helpers.getEmptyRepliesListing)(this);\n        }\n    }\n    get _uri() {\n        return \"comments/\".concat(this.name.slice(3));\n    }\n    /**\n  * @summary Hides this Submission, preventing it from appearing on most Listings.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').hide()\n  */ hide() {\n        return this._post({\n            uri: \"api/hide\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Unhides this Submission, allowing it to reappear on most Listings.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unhide()\n  */ unhide() {\n        return this._post({\n            uri: \"api/unhide\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Locks this Submission, preventing new comments from being posted on it.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').lock()\n  */ lock() {\n        return this._post({\n            uri: \"api/lock\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Unlocks this Submission, allowing comments to be posted on it again.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unlock()\n  */ unlock() {\n        return this._post({\n            uri: \"api/unlock\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Marks this Submission as NSFW (Not Safe For Work).\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').markNsfw()\n  */ markNsfw() {\n        return this._post({\n            uri: \"api/marknsfw\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Unmarks this Submission as NSFW (Not Safe For Work).\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unmarkNsfw()\n  */ unmarkNsfw() {\n        return this._post({\n            uri: \"api/unmarknsfw\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Mark a submission as a spoiler\n  * @desc **Note:** This will silently fail if the subreddit has disabled spoilers.\n  * @returns {Promise} A Promise that fulfills with this Submission when the request is complete\n  * @example r.getSubmission('2np694').markSpoiler()\n  */ markSpoiler() {\n        return this._post({\n            uri: \"api/spoiler\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Unmark a submission as a spoiler\n  * @returns {Promise} A Promise that fulfills with this Submission when the request is complete\n  * @example r.getSubmission('2np694').unmarkSpoiler()\n  */ unmarkSpoiler() {\n        return this._post({\n            uri: \"api/unspoiler\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Sets the contest mode status of this submission.\n  * @private\n  * @param {boolean} state The desired contest mode status\n  * @returns {Promise} The updated version of this Submission\n  */ _setContestModeEnabled(state) {\n        return this._post({\n            uri: \"api/set_contest_mode\",\n            form: {\n                api_type,\n                state,\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Enables contest mode for this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').enableContestMode()\n  */ enableContestMode() {\n        return this._setContestModeEnabled(true);\n    }\n    /**\n  * @summary Disables contest mode for this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').disableContestMode()\n  */ disableContestMode() {\n        return this._setContestModeEnabled(false);\n    }\n    _setStickied(_ref) {\n        var state = _ref.state, num = _ref.num;\n        return this._post({\n            uri: \"api/set_subreddit_sticky\",\n            form: {\n                api_type,\n                state,\n                num,\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Stickies this Submission.\n  * @param {object} [options]\n  * @param {number} [options.num=1] The sticky slot to put this submission in; this should be either 1 or 2.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').sticky({num: 2})\n  */ sticky() {\n        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref2$num = _ref2.num, num = _ref2$num === void 0 ? 1 : _ref2$num;\n        return this._setStickied({\n            state: true,\n            num\n        });\n    }\n    /**\n  * @summary Unstickies this Submission.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').unsticky()\n  */ unsticky() {\n        return this._setStickied({\n            state: false\n        });\n    }\n    /**\n  * @summary Sets the suggested comment sort method on this Submission\n  * @desc **Note**: To enable contest mode, use {@link Submission#enableContestMode} instead.\n  * @param {string} sort The suggested sort method. This should be one of\n  `confidence, top, new, controversial, old, random, qa, blank`\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').setSuggestedSort('new')\n  */ setSuggestedSort(sort) {\n        return this._post({\n            uri: \"api/set_suggested_sort\",\n            form: {\n                api_type,\n                id: this.name,\n                sort\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Marks this submission as 'visited'.\n  * @desc **Note**: This function only works if the authenticated account has a subscription to reddit gold.\n  * @returns {Promise} The updated version of this Submission\n  * @example r.getSubmission('2np694').markAsRead()\n  */ markAsRead() {\n        return this._post({\n            uri: \"api/store_visits\",\n            form: {\n                links: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Gets a Listing of other submissions on reddit that had the same link as this one.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @returns {Promise} A Listing of other Submission objects\n  * @example r.getSubmission('2np694').getDuplicates()\n  */ getDuplicates() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._getListing({\n            uri: \"duplicates/\".concat(this.name.slice(3)),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a Listing of Submissions that are related to this one.\n  * @deprecated This function uses the <code>/related/submission_id</code> endpoint, which was recently changed on reddit.com;\n  instead of returning a Listing containing related posts, the reddit API now simply returns the post itself. As such, this\n  function only exists for backwards compatability and should not be used in practice.\n  * @param {object} [options={}] ~~Options for the resulting Listing~~\n  * @returns {Promise} ~~A Listing of other Submission objects~~ The submission in question.\n  * @example r.getSubmission('2np694').getRelated()\n  */ getRelated() {\n        var _this = this;\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._getListing({\n            uri: \"related/\".concat(this.name.slice(3)),\n            qs: options\n        }).tap(function(result) {\n            if (result.constructor._name === \"Submission\") {\n                _this._r._warn(\"Submission#getRelated has been deprecated upstream, and will not work as expected.\");\n            }\n        });\n    }\n    /**\n  * @summary Gets a list of flair template options for this post.\n  * @returns {Promise} An Array of flair templates\n  * @example\n  *\n  * r.getSubmission('2np694').getLinkFlairTemplates().then(console.log)\n  *\n  * // => [\n  * //   { flair_text: 'Text 1', flair_css_class: '', flair_text_editable: false, flair_template_id: '(UUID not shown)' ... },\n  * //   { flair_text: 'Text 2', flair_css_class: 'aa', flair_text_editable: false, flair_template_id: '(UUID not shown)' ... },\n  * //   ...\n  * // ]\n  */ getLinkFlairTemplates() {\n        var _this2 = this;\n        return this.fetch().get(\"subreddit\").then(function(sub) {\n            return sub.getLinkFlairTemplates(_this2.name);\n        });\n    }\n    /**\n  * @summary Assigns flair on this Submission (as a moderator; also see [selectFlair]{@link Submission#selectFlair})\n  * @param {object} options\n  * @param {string} options.text The text that this link's flair should have\n  * @param {string} options.cssClass The CSS class that the link's flair should have\n  * @returns {Promise} A Promise that fulfills with an updated version of this Submission\n  * @example r.getSubmission('2np694').assignFlair({text: 'this is a flair text', cssClass: 'these are css classes'})\n  */ assignFlair(options) {\n        return this._r._assignFlair(_objectSpread({}, options, {\n            link: this.name,\n            subredditName: this.subreddit.display_name\n        })).return(this);\n    }\n    /**\n  * @summary Selects a flair for this Submission (as the OP; also see [assignFlair]{@link Submission#assignFlair})\n  * @param {object} options\n  * @param {string} options.flair_template_id A flair template ID to use for this Submission. (This should be obtained\n  beforehand using {@link getLinkFlairTemplates}.)\n  * @param {string} [options.text] The flair text to use for the submission. (This is only necessary/useful if the given flair\n  template has the `text_editable` property set to `true`.)\n  * @returns {Promise} A Promise that fulfills with this objects after the request is complete\n  * @example r.getSubmission('2np694').selectFlair({flair_template_id: 'e3340d80-8152-11e4-a76a-22000bc1096c'})\n  */ selectFlair(options) {\n        return this._r._selectFlair(_objectSpread({}, options, {\n            link: this.name,\n            subredditName: this.subreddit.display_name\n        })).return(this);\n    }\n    /**\n   * @summary Crossposts this submission to a different subreddit\n   * @desc **NOTE**: To create a crosspost, the authenticated account must be subscribed to the subreddit where\n   * the crosspost is being submitted, and that subreddit be configured to allow crossposts.\n   * @param {object} options An object containing details about the submission\n   * @param {string} options.subredditName The name of the subreddit that the crosspost should be submitted to\n   * @param {string} options.title The title of the crosspost\n   * @param {boolean} [options.sendReplies=true] Determines whether inbox replies should be enabled for this submission\n   * @param {boolean} [options.resubmit=true] If this is false and same link has already been submitted to this subreddit in\n   the past, reddit will return an error. This could be used to avoid accidental reposts.\n   * @returns {Promise} The newly-created Submission object\n   * @example\n   *\n   * await r.getSubmission('6vths0').submitCrosspost({ title: 'I found an interesting post', subredditName: 'snoowrap' })\n   */ submitCrosspost(options) {\n        return this._r.submitCrosspost(_objectSpread({}, options, {\n            originalPost: this\n        }));\n    }\n};\nvar _default = Submission;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/Submission.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/Subreddit.js":
/*!*********************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/Subreddit.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _lodash = __webpack_require__(/*! lodash */ \"lodash\");\nvar _Promise = _interopRequireDefault(__webpack_require__(/*! ../Promise.js */ \"(rsc)/./node_modules/snoowrap/dist/Promise.js\"));\nvar _stream = __webpack_require__(/*! stream */ \"stream\");\nvar _fs = __webpack_require__(/*! fs */ \"fs\");\nvar _helpers = __webpack_require__(/*! ../helpers.js */ \"(rsc)/./node_modules/snoowrap/dist/helpers.js\");\nvar _errors = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/snoowrap/dist/errors.js\");\nvar _RedditContent = _interopRequireDefault(__webpack_require__(/*! ./RedditContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/RedditContent.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(source, true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(source).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar api_type = \"json\";\n/**\n* A class representing a subreddit\n* <style> #Subreddit {display: none} </style>\n* @extends RedditContent\n* @example\n*\n* // Get a subreddit by name\n* r.getSubreddit('AskReddit')\n*/ var Subreddit = class Subreddit extends _RedditContent.default {\n    get _uri() {\n        return \"r/\".concat(this.display_name, \"/about\");\n    }\n    _transformApiResponse(response) {\n        if (!(response instanceof Subreddit)) {\n            throw new TypeError(\"The subreddit /r/\".concat(this.display_name, \" does not exist.\"));\n        }\n        return response;\n    }\n    _deleteFlairTemplates(_ref) {\n        var flair_type = _ref.flair_type;\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/clearflairtemplates\"),\n            form: {\n                api_type,\n                flair_type\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Deletes all of this subreddit's user flair templates\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').deleteAllUserFlairTemplates()\n  */ deleteAllUserFlairTemplates() {\n        return this._deleteFlairTemplates({\n            flair_type: \"USER_FLAIR\"\n        });\n    }\n    /**\n  * @summary Deletes all of this subreddit's link flair templates\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').deleteAllLinkFlairTemplates()\n  */ deleteAllLinkFlairTemplates() {\n        return this._deleteFlairTemplates({\n            flair_type: \"LINK_FLAIR\"\n        });\n    }\n    /**\n  * @summary Deletes one of this subreddit's flair templates\n  * @param {object} options\n  * @param {string} options.flair_template_id The ID of the template that should be deleted\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').deleteFlairTemplate({flair_template_id: 'fdfd8532-c91e-11e5-b4d4-0e082084d721'})\n  */ deleteFlairTemplate(_ref2) {\n        var flair_template_id = _ref2.flair_template_id;\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/deleteflairtemplate\"),\n            form: {\n                api_type,\n                flair_template_id\n            }\n        }).return(this);\n    }\n    _createFlairTemplate(_ref3) {\n        var text = _ref3.text, css_class = _ref3.css_class, _ref3$cssClass = _ref3.cssClass, cssClass = _ref3$cssClass === void 0 ? css_class : _ref3$cssClass, flair_type = _ref3.flair_type, _ref3$text_editable = _ref3.text_editable, text_editable = _ref3$text_editable === void 0 ? false : _ref3$text_editable, _ref3$textEditable = _ref3.textEditable, textEditable = _ref3$textEditable === void 0 ? text_editable : _ref3$textEditable;\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/flairtemplate\"),\n            form: {\n                api_type,\n                text,\n                css_class: cssClass,\n                flair_type,\n                text_editable: textEditable\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Creates a new user flair template for this subreddit\n  * @param {object} options\n  * @param {string} options.text The flair text for this template\n  * @param {string} [options.cssClass=''] The CSS class for this template\n  * @param {boolean} [options.textEditable=false] Determines whether users should be able to edit their flair text\n  when it has this template\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete.\n  * @example r.getSubreddit('snoowrap').createUserFlairTemplate({text: 'Some Flair Text', cssClass: 'some-css-class'})\n  */ createUserFlairTemplate(options) {\n        return this._createFlairTemplate(_objectSpread({}, options, {\n            flair_type: \"USER_FLAIR\"\n        }));\n    }\n    /**\n  * @summary Creates a new link flair template for this subreddit\n  * @param {object} options\n  * @param {string} options.text The flair text for this template\n  * @param {string} [options.cssClass=''] The CSS class for this template\n  * @param {boolean} [options.textEditable=false] Determines whether users should be able to edit the flair text of their\n  links when it has this template\n  * @returns {Promise} A Promise that fulfills with this Subredit when the request is complete.\n  * @example r.getSubreddit('snoowrap').createLinkFlairTemplate({text: 'Some Flair Text', cssClass: 'some-css-class'})\n  */ createLinkFlairTemplate(options) {\n        return this._createFlairTemplate(_objectSpread({}, options, {\n            flair_type: \"LINK_FLAIR\"\n        }));\n    }\n    _getFlairOptions() {\n        var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, name = _ref4.name, link = _ref4.link, is_newlink = _ref4.is_newlink;\n        // TODO: Add shortcuts for this on RedditUser and Submission\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/flairselector\"),\n            form: {\n                name,\n                link,\n                is_newlink\n            }\n        });\n    }\n    /**\n  * @summary Gets the flair templates for the subreddit or a given link.\n  * @param {string} [linkId] The link's base36 ID\n  * @returns {Promise} An Array of flair template options\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getLinkFlairTemplates('4fp36y').then(console.log)\n  // => [ { flair_css_class: '',\n  //  flair_template_id: 'fdfd8532-c91e-11e5-b4d4-0e082084d721',\n  //  flair_text_editable: true,\n  //  flair_position: 'right',\n  //  flair_text: '' },\n  //  { flair_css_class: '',\n  //  flair_template_id: '03821f62-c920-11e5-b608-0e309fbcf863',\n  //  flair_text_editable: true,\n  //  flair_position: 'right',\n  //  flair_text: '' },\n  //  ...\n  // ]\n  */ getLinkFlairTemplates() {\n        var linkId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var options = linkId ? {\n            link: linkId\n        } : {\n            is_newlink: true\n        };\n        return this._getFlairOptions(options).get(\"choices\");\n    }\n    /**\n  * @summary Gets the list of user flair templates on this subreddit.\n  * @returns {Promise} An Array of user flair templates\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getUserFlairTemplates().then(console.log)\n  // => [ { flair_css_class: '',\n  //  flair_template_id: 'fdfd8532-c91e-11e5-b4d4-0e082084d721',\n  //  flair_text_editable: true,\n  //  flair_position: 'right',\n  //  flair_text: '' },\n  //  { flair_css_class: '',\n  //  flair_template_id: '03821f62-c920-11e5-b608-0e309fbcf863',\n  //  flair_text_editable: true,\n  //  flair_position: 'right',\n  //  flair_text: '' },\n  //  ...\n  // ]\n  */ getUserFlairTemplates() {\n        return this._getFlairOptions().get(\"choices\");\n    }\n    /**\n  * @summary Clears a user's flair on this subreddit.\n  * @param {string} name The user's name\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').deleteUserFlair('actually_an_aardvark')\n  */ deleteUserFlair(name) {\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/deleteflair\"),\n            form: {\n                api_type,\n                name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Gets a user's flair on this subreddit.\n  * @param {string} name The user's name\n  * @returns {Promise} An object representing the user's flair\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getUserFlair('actually_an_aardvark').then(console.log)\n  // => { flair_css_class: '',\n  //  flair_template_id: 'fdfd8532-c91e-11e5-b4d4-0e082084d721',\n  //  flair_text: '',\n  //  flair_position: 'right'\n  // }\n  */ getUserFlair(name) {\n        return this._getFlairOptions({\n            name\n        }).get(\"current\");\n    }\n    /**\n  * @summary Sets multiple user flairs at the same time\n  * @desc Due to the behavior of the reddit API endpoint that this function uses, if any of the provided user flairs are\n  invalid, reddit will make note of this in its response, but it will still attempt to set the remaining user flairs. If this\n  occurs, the Promise returned by snoowrap will be rejected, and the rejection reason will be an array containing the 'error'\n  responses from reddit.\n  * @param {object[]} flairArray\n  * @param {string} flairArray[].name A user's name\n  * @param {string} flairArray[].text The flair text to assign to this user\n  * @param {string} flairArray[].cssClass The flair CSS class to assign to this user\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example\n  * r.getSubreddit('snoowrap').setMultipleUserFlairs([\n  *   {name: 'actually_an_aardvark', text: \"this is /u/actually_an_aardvark's flair text\", cssClass: 'some-css-class'},\n  *   {name: 'snoowrap_testing', text: \"this is /u/snoowrap_testing's flair text\", cssClass: 'some-css-class'}\n  * ]);\n  * // the above request gets completed successfully\n  *\n  * r.getSubreddit('snoowrap').setMultipleUserFlairs([\n  *   {name: 'actually_an_aardvark', text: 'foo', cssClass: 'valid-css-class'},\n  *   {name: 'snoowrap_testing', text: 'bar', cssClass: \"this isn't a valid css class\"},\n  *   {name: 'not_an_aardvark', text: 'baz', cssClass: \"this also isn't a valid css class\"}\n  * ])\n  * // the Promise from the above request gets rejected, with the following rejection reason:\n  * [\n  *   {\n  *     status: 'skipped',\n  *     errors: { css: 'invalid css class `this isn\\'t a valid css class\\', ignoring' },\n  *     ok: false,\n  *     warnings: {}\n  *   },\n  *   {\n  *     status: 'skipped',\n  *     errors: { css: 'invalid css class `this also isn\\'t a valid css class\\', ignoring' },\n  *     ok: false,\n  *     warnings: {}\n  *   }\n  * ]\n  * // note that /u/actually_an_aardvark's flair still got set by the request, even though the other two flairs caused errors.\n  */ setMultipleUserFlairs(flairArray) {\n        var _this = this;\n        var csvLines = flairArray.map(function(item) {\n            // reddit expects to receive valid CSV data, which each line having the form `username,flair_text,css_class`.\n            return [\n                item.name,\n                item.text || item.flairText || item.flair_text || \"\",\n                item.cssClass || item.css_class || item.flairCssClass || item.flair_css_class || \"\"\n            ].map(function(str) {\n                /* To escape special characters in the lines (e.g. if the flair text itself contains a comma), surround each\n        part of the line with double quotes before joining the parts together with commas (in accordance with how special\n        characters are usually escaped in CSV). If double quotes are themselves part of the flair text, replace them with a\n        pair of consecutive double quotes. */ return '\"'.concat(str.replace(/\"/g, '\"\"'), '\"');\n            }).join(\",\");\n        });\n        /* Due to an API limitation, this endpoint can only set the flair of 100 users at a time.\n    Send multiple requests if necessary to ensure that all users in the array are accounted for. */ return _Promise.default.map((0, _lodash.chunk)(csvLines, 100), function(flairChunk) {\n            return _this._post({\n                uri: \"r/\".concat(_this.display_name, \"/api/flaircsv\"),\n                form: {\n                    flair_csv: flairChunk.join(\"\\n\")\n                }\n            });\n        }).then(_lodash.flatten).tap(function(results) {\n            var errorRows = results.filter(function(row) {\n                return !row.ok;\n            });\n            if (errorRows.length) {\n                throw errorRows;\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Gets a list of all user flairs on this subreddit.\n  * @param {object} options\n  * @param {string} [options.name] A specific username to jump to\n  * @returns {Promise} A Listing containing user flairs\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getUserFlairList().then(console.log)\n  // => Listing [\n  //  { flair_css_class: null,\n  //  user: 'not_an_aardvark',\n  //  flair_text: 'Isn\\'t an aardvark' },\n  //  { flair_css_class: 'some-css-class',\n  //    user: 'actually_an_aardvark',\n  //    flair_text: 'this is /u/actually_an_aardvark\\'s flair text' },\n  //  { flair_css_class: 'some-css-class',\n  //    user: 'snoowrap_testing',\n  //    flair_text: 'this is /u/snoowrap_testing\\'s flair text' }\n  // ]\n  */ getUserFlairList() {\n        var _this2 = this;\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/api/flairlist\"),\n            qs: options,\n            _transform: function(response) {\n                /* For unknown reasons, responses from the api/flairlist endpoint are formatted differently than responses from all other\n        Listing endpoints. Most Listing endpoints return an object with a `children` property containing the Listing's children,\n        and `after` and `before` properties corresponding to the `after` and `before` querystring parameters that a client should\n        use in the next request. However, the api/flairlist endpoint returns an objecti with a `users` property containing the\n        Listing's children, and `next` and `prev` properties corresponding to the `after` and `before` querystring parameters. As\n        far as I can tell, there's no actual reason for this difference. >_> */ response.after = response.next || null;\n                response.before = response.prev || null;\n                response.children = response.users;\n                return _this2._r._newObject(\"Listing\", response);\n            }\n        });\n    }\n    /**\n  * @summary Configures the flair settings for this subreddit.\n  * @param {object} options\n  * @param {boolean} options.userFlairEnabled Determines whether user flair should be enabled\n  * @param {string} options.userFlairPosition Determines the orientation of user flair relative to a given username. This\n  should be either the string 'left' or the string 'right'.\n  * @param {boolean} options.userFlairSelfAssignEnabled Determines whether users should be able to edit their own flair\n  * @param {string} options.linkFlairPosition Determines the orientation of link flair relative to a link title. This should\n  be either 'left' or 'right'.\n  * @param {boolean} options.linkFlairSelfAssignEnabled Determines whether users should be able to edit the flair of their\n  submissions.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').configure_flair({\n    userFlairEnabled: true,\n    userFlairPosition: 'left',\n    userFlairSelfAssignEnabled: false,\n    linkFlairPosition: 'right',\n    linkFlairSelfAssignEnabled: false\n  * })\n  */ configureFlair(_ref5) {\n        var user_flair_enabled = _ref5.user_flair_enabled, _ref5$userFlairEnable = _ref5.userFlairEnabled, userFlairEnabled = _ref5$userFlairEnable === void 0 ? user_flair_enabled : _ref5$userFlairEnable, user_flair_position = _ref5.user_flair_position, _ref5$userFlairPositi = _ref5.userFlairPosition, userFlairPosition = _ref5$userFlairPositi === void 0 ? user_flair_position : _ref5$userFlairPositi, user_flair_self_assign_enabled = _ref5.user_flair_self_assign_enabled, _ref5$userFlairSelfAs = _ref5.userFlairSelfAssignEnabled, userFlairSelfAssignEnabled = _ref5$userFlairSelfAs === void 0 ? user_flair_self_assign_enabled : _ref5$userFlairSelfAs, link_flair_position = _ref5.link_flair_position, _ref5$linkFlairPositi = _ref5.linkFlairPosition, linkFlairPosition = _ref5$linkFlairPositi === void 0 ? link_flair_position : _ref5$linkFlairPositi, link_flair_self_assign_enabled = _ref5.link_flair_self_assign_enabled, _ref5$linkFlairSelfAs = _ref5.linkFlairSelfAssignEnabled, linkFlairSelfAssignEnabled = _ref5$linkFlairSelfAs === void 0 ? link_flair_self_assign_enabled : _ref5$linkFlairSelfAs;\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/flairconfig\"),\n            form: {\n                api_type,\n                flair_enabled: userFlairEnabled,\n                flair_position: userFlairPosition,\n                flair_self_assign_enabled: userFlairSelfAssignEnabled,\n                link_flair_position: linkFlairPosition,\n                link_flair_self_assign_enabled: linkFlairSelfAssignEnabled\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Gets the requester's flair on this subreddit.\n  * @returns {Promise} An object representing the requester's current flair\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getMyFlair().then(console.log)\n  // => { flair_css_class: 'some-css-class',\n  //  flair_template_id: null,\n  //  flair_text: 'this is /u/snoowrap_testing\\'s flair text',\n  //  flair_position: 'right'\n  // }\n  */ getMyFlair() {\n        return this._getFlairOptions().get(\"current\");\n    }\n    /**\n  * @summary Sets the requester's flair on this subreddit.\n  * @param {object} options\n  * @param {string} options.flair_template_id A flair template ID to use. (This should be obtained beforehand using\n  {@link getUserFlairTemplates}.)\n  * @param {string} [options.text] The flair text to use. (This is only necessary/useful if the given flair\n  template has the `text_editable` property set to `true`.)\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').selectMyFlair({flair_template_id: 'fdfd8532-c91e-11e5-b4d4-0e082084d721'})\n  */ selectMyFlair(options) {\n        var _this3 = this;\n        /* NOTE: This requires `identity` scope in addition to `flair` scope, since the reddit api needs to be passed a username.\n    I'm not sure if there's a way to do this without requiring additional scope. */ return this._r._getMyName().then(function(name) {\n            return _this3._r._selectFlair(_objectSpread({}, options, {\n                subredditName: _this3.display_name,\n                name\n            }));\n        }).return(this);\n    }\n    _setMyFlairVisibility(flair_enabled) {\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/setflairenabled\"),\n            form: {\n                api_type,\n                flair_enabled\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Makes the requester's flair visible on this subreddit.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').showMyFlair()\n  */ showMyFlair() {\n        return this._setMyFlairVisibility(true);\n    }\n    /**\n  * @summary Makes the requester's flair invisible on this subreddit.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').hideMyFlair()\n  */ hideMyFlair() {\n        return this._setMyFlairVisibility(false);\n    }\n    /**\n  * @summary Creates a new selfpost on this subreddit.\n  * @param {object} options An object containing details about the submission\n  * @param {string} options.title The title of the submission\n  * @param {string} [options.text] The selftext of the submission\n  * @param {boolean} [options.sendReplies=true] Determines whether inbox replies should be enabled for this submission\n  * @param {string} [options.captchaIden] A captcha identifier. This is only necessary if the authenticated account\n  requires a captcha to submit posts and comments.\n  * @param {string} [options.captchaResponse] The response to the captcha with the given identifier\n  * @returns {Promise} The newly-created Submission object\n  * @example\n  *\n  * r.getSubreddit('snoowrap').submitSelfpost({title: 'this is a selfpost', text: \"hi, how's it going?\"}).then(console.log)\n  * // => Submission { name: 't3_4abmsz' }\n  */ submitSelfpost(options) {\n        return this._r.submitSelfpost(_objectSpread({}, options, {\n            subredditName: this.display_name\n        }));\n    }\n    /**\n  * @summary Creates a new link submission on this subreddit.\n  * @param {object} options An object containing details about the submission\n  * @param {string} options.title The title of the submission\n  * @param {string} options.url The url that the link submission should point to\n  * @param {boolean} [options.sendReplies=true] Determines whether inbox replies should be enabled for this submission\n  * @param {boolean} [options.resubmit=true] If this is false and same link has already been submitted to this subreddit in\n  the past, reddit will return an error. This could be used to avoid accidental reposts.\n  * @param {string} [options.captchaIden] A captcha identifier. This is only necessary if the authenticated account\n  requires a captcha to submit posts and comments.\n  * @param {string} [options.captchaResponse] The response to the captcha with the given identifier\n  * @returns {Promise} The newly-created Submission object\n  * @example\n  *\n  * r.getSubreddit('snoowrap').submitLink({title: 'I found a cool website', url: 'https://google.com'}).then(console.log)\n  * // => Submission { name: 't3_4abmsz' }\n  */ submitLink(options) {\n        return this._r.submitLink(_objectSpread({}, options, {\n            subredditName: this.display_name\n        }));\n    }\n    /**\n   * @summary Creates a new crosspost submission on this subreddit\n   * @desc **NOTE**: To create a crosspost, the authenticated account must be subscribed to the subreddit where\n   * the crosspost is being submitted, and that subreddit be configured to allow crossposts.\n   * @param {object} options An object containing details about the submission\n   * @param {string} options.title The title of the crosspost\n   * @param {string|Submission} options.originalPost A Submission object or a post ID for the original post which\n   is being crossposted\n   * @param {boolean} [options.sendReplies=true] Determines whether inbox replies should be enabled for this submission\n   * @param {boolean} [options.resubmit=true] If this is false and same link has already been submitted to this subreddit in\n   the past, reddit will return an error. This could be used to avoid accidental reposts.\n   * @returns {Promise} The newly-created Submission object\n   * @example\n   *\n   * await r.getSubreddit('snoowrap').submitCrosspost({ title: 'I found an interesting post', originalPost: '6vths0' })\n   * // => Submission { name: 't3_4abmsz' }\n   */ submitCrosspost(options) {\n        return this._r.submitCrosspost(_objectSpread({}, options, {\n            subredditName: this.display_name\n        }));\n    }\n    /**\n  * @summary Gets a Listing of hot posts on this subreddit.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @returns {Promise} A Listing containing the retrieved submissions\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getHot().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getHot(options) {\n        return this._r.getHot(this.display_name, options);\n    }\n    /**\n  * @summary Gets a Listing of new posts on this subreddit.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @returns {Promise} A Listing containing the retrieved submissions\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getNew().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  *\n  */ getNew(options) {\n        return this._r.getNew(this.display_name, options);\n    }\n    /**\n  * @summary Gets a Listing of new comments on this subreddit.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @returns {Promise} A Listing containing the retrieved comments\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getNewComments().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  ...\n  * // ]\n  */ getNewComments(options) {\n        return this._r.getNewComments(this.display_name, options);\n    }\n    /**\n  * @summary Gets a single random Submission from this subreddit.\n  * @desc **Note**: This function will not work when snoowrap is running in a browser, because the reddit server sends a\n  redirect which cannot be followed by a CORS request.\n  * @returns {Promise} The retrieved Submission object\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getRandomSubmission().then(console.log)\n  * // => Submission { ... }\n  */ getRandomSubmission() {\n        return this._r.getRandomSubmission(this.display_name);\n    }\n    /**\n  * @summary Gets a Listing of top posts on this subreddit.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @param {string} [options.time] Describes the timespan that posts should be retrieved from. Should be one of\n  `hour, day, week, month, year, all`\n  * @returns {Promise} A Listing containing the retrieved submissions\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getTop({time: 'all'}).then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  ...\n  * // ]\n  */ getTop(options) {\n        return this._r.getTop(this.display_name, options);\n    }\n    /**\n  * @summary Gets a Listing of controversial posts on this subreddit.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @param {string} [options.time] Describes the timespan that posts should be retrieved from. Should be one of\n  `hour, day, week, month, year, all`\n  * @returns {Promise} A Listing containing the retrieved submissions\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getControversial({time: 'week'}).then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  ...\n  * // ]\n  */ getControversial(options) {\n        return this._r.getControversial(this.display_name, options);\n    }\n    /**\n  * @summary Gets a Listing of top posts on this subreddit.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing the retrieved submissions\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getRising().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getRising(options) {\n        return this._r.getRising(this.display_name, options);\n    }\n    /**\n  * @summary Gets the moderator mail for this subreddit.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing PrivateMessage objects\n  * @example r.getSubreddit('snoowrap').getModmail().then(console.log)\n  */ getModmail(options) {\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/about/message/moderator\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a list of ModmailConversations from the subreddit.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @returns {Promise<Listing<ModmailConversation>>} A Listing containing Subreddits\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getNewModmailConversations({limit: 2}).then(console.log)\n  * // => Listing [\n  * //  ModmailConversation { messages: [...], objIds: [...], subject: 'test subject', ... },\n  * //  ModmailConversation { messages: [...], objIds: [...], subject: 'test subject', ... }\n  * // ]\n  */ getNewModmailConversations() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._r.getNewModmailConversations(_objectSpread({}, options, {\n            entity: this.display_name\n        }));\n    }\n    /**\n  * @summary Gets the moderation log for this subreddit.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @param {string[]} [options.mods] An array of moderator names that the results should be restricted to\n  * @param {string} [options.type] Restricts the results to the specified type. This should be one of `banuser, unbanuser,\n  removelink, approvelink, removecomment, approvecomment, addmoderator, invitemoderator, uninvitemoderator,\n  acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings, editflair, distinguish, marknsfw,\n  wikibanned, wikicontributor, wikiunbanned, wikipagelisted, removewikicontributor, wikirevise, wikipermlevel,\n  ignorereports, unignorereports, setpermissions, setsuggestedsort, sticky, unsticky, setcontestmode, unsetcontestmode,\n  lock, unlock, muteuser, unmuteuser, createrule, editrule, deleterule, spoiler, unspoiler`\n  * @returns {Promise} A Listing containing moderation actions\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getModerationLog().then(console.log)\n  *\n  * // => Listing [\n  * //  ModAction { description: null, mod: 'snoowrap_testing', action: 'editflair', ... }\n  * //  ModAction { description: null, mod: 'snoowrap_testing', action: 'approvecomment', ... }\n  * //  ModAction { description: null, mod: 'snoowrap_testing', action: 'createrule', ... }\n  * // ]\n  */ getModerationLog() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var parsedOptions = (0, _lodash.omit)(_objectSpread({}, options, {\n            mod: options.mods && options.mods.join(\",\")\n        }), \"mods\");\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/about/log\"),\n            qs: parsedOptions\n        });\n    }\n    /**\n  * @summary Gets a list of reported items on this subreddit.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @param {string} [options.only] Restricts the Listing to the specified type of item. One of `links, comments`\n  * @returns {Promise} A Listing containing reported items\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getReports().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getReports() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/about/reports\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a list of removed items on this subreddit.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @param {string} [options.only] Restricts the Listing to the specified type of item. One of `links, comments`\n  * @returns {Promise} A Listing containing removed items\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getSpam().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getSpam() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/about/spam\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a list of items on the modqueue on this subreddit.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @param {string} [options.only] Restricts the Listing to the specified type of item. One of `links, comments`\n  * @returns {Promise} A Listing containing items on the modqueue\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getModqueue().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getModqueue() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/about/modqueue\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a list of unmoderated items on this subreddit.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @param {string} [options.only] Restricts the Listing to the specified type of item. One of `links, comments`\n  * @returns {Promise} A Listing containing unmoderated items\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getUnmoderated().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getUnmoderated() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/about/unmoderated\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Gets a list of edited items on this subreddit.\n  * @param {object} [options={}] Options for the resulting Listing\n  * @param {string} [options.only] Restricts the Listing to the specified type of item. One of `links, comments`\n  * @returns {Promise} A Listing containing edited items\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getEdited().then(console.log)\n  * // => Listing [\n  * //  Comment { ... },\n  * //  Comment { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getEdited() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/about/edited\"),\n            qs: options\n        });\n    }\n    /**\n  * @summary Accepts an invite to become a moderator of this subreddit.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').acceptModeratorInvite()\n  */ acceptModeratorInvite() {\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/accept_moderator_invite\"),\n            form: {\n                api_type\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Abdicates moderator status on this subreddit.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete.\n  * @example r.getSubreddit('snoowrap').leaveModerator()\n  */ leaveModerator() {\n        var _this4 = this;\n        return this.fetch().get(\"name\").then(function(name) {\n            return _this4._post({\n                uri: \"api/leavemoderator\",\n                form: {\n                    id: name\n                }\n            }).then((0, _helpers.handleJsonErrors)(_this4));\n        });\n    }\n    /**\n  * @summary Abdicates approved submitter status on this subreddit.\n  * @returns {Promise} A Promise that resolves with this Subreddit when the request is complete.\n  * @example r.getSubreddit('snoowrap').leaveContributor()\n  */ leaveContributor() {\n        var _this5 = this;\n        return this.fetch().get(\"name\").then(function(name) {\n            return _this5._post({\n                uri: \"api/leavecontributor\",\n                form: {\n                    id: name\n                }\n            }).return(_this5);\n        });\n    }\n    /**\n  * @summary Gets a subreddit's CSS stylesheet.\n  * @desc **Note**: This function will not work when snoowrap is running in a browser, because the reddit server sends a\n  redirect which cannot be followed by a CORS request.\n  * @desc **Note**: This method will return a 404 error if the subreddit in question does not have a custom stylesheet.\n  * @returns {Promise} A Promise for a string containing the subreddit's CSS.\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getStylesheet().then(console.log)\n  * // => '.md blockquote,.md del,body{color:#121212}.usertext-body ... '\n  */ getStylesheet() {\n        return this._get({\n            uri: \"r/\".concat(this.display_name, \"/stylesheet\"),\n            json: false\n        });\n    }\n    /**\n  * @summary Conducts a search of reddit submissions, restricted to this subreddit.\n  * @param {object} options Search options. Can also contain options for the resulting Listing.\n  * @param {string} options.query The search query\n  * @param {string} [options.time] Describes the timespan that posts should be retrieved frome. One of\n  `hour, day, week, month, year, all`\n  * @param {string} [options.sort] Determines how the results should be sorted. One of `relevance, hot, top, new, comments`\n  * @param {string} [options.syntax='plain'] Specifies a syntax for the search. One of `cloudsearch, lucene, plain`\n  * @returns {Promise} A Listing containing the search results.\n  * @example\n  *\n  * r.getSubreddit('snoowrap').search({query: 'blah', sort: 'year'}).then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ search(options) {\n        return this._r.search(_objectSpread({}, options, {\n            subreddit: this,\n            restrictSr: true\n        }));\n    }\n    /**\n  * @summary Gets the list of banned users on this subreddit.\n  * @param {object} options Filtering options. Can also contain options for the resulting Listing.\n  * @param {string} options.name A username on the list to jump to.\n  * @returns {Promise} A Listing of users\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getBannedUsers().then(console.log)\n  * // => Listing [\n  * //  { date: 1461720936, note: '', name: 'actually_an_aardvark', id: 't2_q3519' }\n  * //  ...\n  * // ]\n  *\n  */ getBannedUsers(options) {\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/about/banned\"),\n            qs: (0, _helpers.renameKey)(options, \"name\", \"user\")\n        });\n    }\n    /**\n  * @summary Gets the list of muted users on this subreddit.\n  * @param {object} options Filtering options. Can also contain options for the resulting Listing.\n  * @param {string} options.name A username on the list to jump to.\n  * @returns {Promise} A Listing of users\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getBannedUsers().then(console.log)\n  * // => Listing [\n  * //  { date: 1461720936, name: 'actually_an_aardvark', id: 't2_q3519' }\n  * //  ...\n  * // ]\n  */ getMutedUsers(options) {\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/about/muted\"),\n            qs: (0, _helpers.renameKey)(options, \"name\", \"user\")\n        });\n    }\n    /**\n  * @summary Gets the list of users banned from this subreddit's wiki.\n  * @param {object} options Filtering options. Can also contain options for the resulting Listing.\n  * @param {string} options.name A username on the list to jump to.\n  * @returns {Promise} A Listing of users\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getWikibannedUsers().then(console.log)\n  * // => Listing [\n  * //  { date: 1461720936, note: '', name: 'actually_an_aardvark', id: 't2_q3519' }\n  * //  ...\n  * // ]\n  */ getWikibannedUsers(options) {\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/about/wikibanned\"),\n            qs: (0, _helpers.renameKey)(options, \"name\", \"user\")\n        });\n    }\n    /**\n  * @summary Gets the list of approved submitters on this subreddit.\n  * @param {object} options Filtering options. Can also contain options for the resulting Listing.\n  * @param {string} options.name A username on the list to jump to.\n  * @returns {Promise} A Listing of users\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getContributors().then(console.log)\n  * // => Listing [\n  * //  { date: 1461720936, name: 'actually_an_aardvark', id: 't2_q3519' }\n  * //  ...\n  * // ]\n  */ getContributors(options) {\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/about/contributors\"),\n            qs: (0, _helpers.renameKey)(options, \"name\", \"user\")\n        });\n    }\n    /**\n  * @summary Gets the list of approved wiki submitters on this subreddit .\n  * @param {object} options Filtering options. Can also contain options for the resulting Listing.\n  * @param {string} options.name A username on the list to jump to.\n  * @returns {Promise} A Listing of users\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getWikiContributors().then(console.log)\n  * // => Listing [\n  * //  { date: 1461720936, name: 'actually_an_aardvark', id: 't2_q3519' }\n  * //  ...\n  * // ]\n  */ getWikiContributors(options) {\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/about/wikicontributors\"),\n            qs: (0, _helpers.renameKey)(options, \"name\", \"user\")\n        });\n    }\n    /**\n  * @summary Gets the list of moderators on this subreddit.\n  * @param {object} options\n  * @param {string} [options.name] The name of a user to find in the list\n  * @returns {Promise} An Array of RedditUsers representing the moderators of this subreddit\n  * @example\n  *\n  * r.getSubreddit('AskReddit').getModerators().then(console.log)\n  * // => [\n  * //  RedditUser { date: 1453862639, mod_permissions: [ 'all' ], name: 'not_an_aardvark', id: 't2_k83md' },\n  * //  ...\n  * // ]\n  *\n  */ getModerators() {\n        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, name = _ref6.name;\n        return this._get({\n            uri: \"r/\".concat(this.display_name, \"/about/moderators\"),\n            qs: {\n                user: name\n            }\n        });\n    }\n    /**\n  * @summary Deletes the banner for this Subreddit.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').deleteBanner()\n  */ deleteBanner() {\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/delete_sr_banner\"),\n            form: {\n                api_type\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Deletes the header image for this Subreddit.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').deleteHeader()\n  */ deleteHeader() {\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/delete_sr_header\"),\n            form: {\n                api_type\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Deletes this subreddit's icon.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').deleteIcon()\n  */ deleteIcon() {\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/delete_sr_icon\"),\n            form: {\n                api_type\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Deletes an image from this subreddit.\n  * @param {object} options\n  * @param {string} options.imageName The name of the image.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').deleteImage()\n  */ deleteImage(_ref7) {\n        var image_name = _ref7.image_name, _ref7$imageName = _ref7.imageName, imageName = _ref7$imageName === void 0 ? image_name : _ref7$imageName;\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/delete_sr_img\"),\n            form: {\n                api_type,\n                img_name: imageName\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Gets this subreddit's current settings.\n  * @returns {Promise} An Object containing this subreddit's current settings.\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getSettings().then(console.log)\n  * // => SubredditSettings { default_set: true, submit_text: '', subreddit_type: 'private', ... }\n  */ getSettings() {\n        return this._get({\n            uri: \"r/\".concat(this.display_name, \"/about/edit\")\n        });\n    }\n    /**\n  * @summary Edits this subreddit's settings.\n  * @param {object} options An Object containing {[option name]: new value} mappings of the options that should be modified.\n  Any omitted option names will simply retain their previous values.\n  * @param {string} options.title The text that should appear in the header of the subreddit\n  * @param {string} options.public_description The text that appears with this Subreddit on the search page, or on the\n  blocked-access page if this subreddit is private. (500 characters max)\n  * @param {string} options.description The sidebar text for the subreddit. (5120 characters max)\n  * @param {string} [options.submit_text=''] The text to show below the submission page (1024 characters max)\n  * @param {boolean} [options.hide_ads=false] Determines whether ads should be hidden on this subreddit. (This is only\n  allowed for gold-only subreddits.)\n  * @param {string} [options.lang='en'] The language of the subreddit (represented as an IETF language tag)\n  * @param {string} [options.type='public'] Determines who should be able to access the subreddit. This should be one of\n  `public, private, restricted, gold_restricted, gold_only, archived, employees_only`.\n  * @param {string} [options.link_type='any'] Determines what types of submissions are allowed on the subreddit. This should\n  be one of `any, link, self`.\n  * @param {string} [options.submit_link_label=undefined] Custom text to display on the button that submits a link. If\n  this is omitted, the default text will be displayed.\n  * @param {string} [options.submit_text_label=undefined] Custom text to display on the button that submits a selfpost. If\n  this is omitted, the default text will be displayed.\n  * @param {string} [options.wikimode='modonly'] Determines who can edit wiki pages on the subreddit. This should be one of\n  `modonly, anyone, disabled`.\n  * @param {number} [options.wiki_edit_karma=0] The minimum amount of subreddit karma needed for someone to edit this\n  subreddit's wiki. (This is only relevant if `options.wikimode` is set to `anyone`.)\n  * @param {number} [options.wiki_edit_age=0] The minimum account age (in days) needed for someone to edit this subreddit's\n  wiki. (This is only relevant if `options.wikimode` is set to `anyone`.)\n  * @param {string} [options.spam_links='high'] The spam filter strength for links on this subreddit. This should be one of\n  `low, high, all`.\n  * @param {string} [options.spam_selfposts='high'] The spam filter strength for selfposts on this subreddit. This should be\n  one of `low, high, all`.\n  * @param {string} [options.spam_comments='high'] The spam filter strength for comments on this subreddit. This should be one\n  of `low, high, all`.\n  * @param {boolean} [options.over_18=false] Determines whether this subreddit should be classified as NSFW\n  * @param {boolean} [options.allow_top=true] Determines whether the new subreddit should be able to appear in /r/all and\n  trending subreddits\n  * @param {boolean} [options.show_media=false] Determines whether image thumbnails should be enabled on this subreddit\n  * @param {boolean} [options.show_media_preview=true] Determines whether media previews should be expanded by default on this\n  subreddit\n  * @param {boolean} [options.allow_images=true] Determines whether image uploads and links to image hosting sites should be\n  enabled on this subreddit\n  * @param {boolean} [options.exclude_banned_modqueue=false] Determines whether posts by site-wide banned users should be\n  excluded from the modqueue.\n  * @param {boolean} [options.public_traffic=false] Determines whether the /about/traffic page for this subreddit should be\n  viewable by anyone.\n  * @param {boolean} [options.collapse_deleted_comments=false] Determines whether deleted and removed comments should be\n  collapsed by default\n  * @param {string} [options.suggested_comment_sort=undefined] The suggested comment sort for the subreddit. This should be\n  one of `confidence, top, new, controversial, old, random, qa`.If left blank, there will be no suggested sort,\n  which means that users will see the sort method that is set in their own preferences (usually `confidence`.)\n  * @param {boolean} [options.spoilers_enabled=false] Determines whether users can mark their posts as spoilers\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete.\n  * @example r.getSubreddit('snoowrap').editSettings({submit_text: 'Welcome! Please be sure to read the rules.'})\n  */ editSettings(options) {\n        var _this6 = this;\n        return _Promise.default.join(this.getSettings(), this.fetch().get(\"name\"), function(currentValues, name) {\n            return _this6._r._createOrEditSubreddit(_objectSpread({}, (0, _helpers.renameKey)(currentValues, \"subreddit_type\", \"type\"), {}, options, {\n                sr: name\n            }));\n        }).return(this);\n    }\n    /**\n  * @summary Gets a list of recommended other subreddits given this one.\n  * @param {object} [options]\n  * @param {Array} [options.omit=[]] An Array of subreddit names that should be excluded from the listing.\n  * @returns {Promise} An Array of subreddit names\n  * @example\n  *\n  * r.getSubreddit('AskReddit').getRecommendedSubreddits().then(console.log);\n  * // [ 'TheChurchOfRogers', 'Sleepycabin', ... ]\n  */ getRecommendedSubreddits(options) {\n        var toOmit = options.omit && options.omit.join(\",\");\n        return this._get({\n            uri: \"api/recommend/sr/\".concat(this.display_name),\n            qs: {\n                omit: toOmit\n            }\n        }).then(function(names) {\n            return (0, _lodash.map)(names, \"sr_name\");\n        });\n    }\n    /**\n  * @summary Gets the submit text (which displays on the submission form) for this subreddit.\n  * @returns {Promise} The submit text, represented as a string.\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getSubmitText().then(console.log)\n  * // => 'Welcome! Please be sure to read the rules.'\n  */ getSubmitText() {\n        return this._get({\n            uri: \"r/\".concat(this.display_name, \"/api/submit_text\")\n        }).get(\"submit_text\");\n    }\n    /**\n  * @summary Updates this subreddit's stylesheet.\n  * @param {object} options\n  * @param {string} options.css The new contents of the stylesheet\n  * @param {string} [options.reason] The reason for the change (256 characters max)\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').updateStylesheet({css: 'body {color:#00ff00;}', reason: 'yay green'})\n  */ updateStylesheet(_ref8) {\n        var css = _ref8.css, reason = _ref8.reason;\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/subreddit_stylesheet\"),\n            form: {\n                api_type,\n                op: \"save\",\n                reason,\n                stylesheet_contents: css\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    _setSubscribed(status) {\n        return this._post({\n            uri: \"api/subscribe\",\n            form: {\n                action: status ? \"sub\" : \"unsub\",\n                sr_name: this.display_name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Subscribes to this subreddit.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').subscribe()\n  */ subscribe() {\n        return this._setSubscribed(true);\n    }\n    /**\n  * @summary Unsubscribes from this subreddit.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').unsubscribe()\n  */ unsubscribe() {\n        var _this7 = this;\n        /* Reddit returns a 404 error if the user attempts to unsubscribe to a subreddit that they weren't subscribed to in the\n    first place. It also (as one would expect) returns a 404 error if the subreddit in question does not exist. snoowrap\n    should swallow the first type of error internally, but it should raise the second type of error. Unfortunately, the errors\n    themselves are indistinguishable. So if a 404 error gets thrown, fetch the current subreddit to check if it exists. If it\n    does exist, then the 404 error was of the first type, so swallow it and return the current Subreddit object as usual. If\n    the subreddit doesn't exist, then the original error was of the second type, so throw it. */ return this._setSubscribed(false).catch({\n            statusCode: 404\n        }, function(err) {\n            return _this7.fetch().return(_this7).catchThrow(err);\n        });\n    }\n    _uploadSrImg(_ref9) {\n        var _this8 = this;\n        var name = _ref9.name, file = _ref9.file, uploadType = _ref9.uploadType, imageType = _ref9.imageType;\n        if (typeof file !== \"string\" && !(file instanceof _stream.Readable)) {\n            throw new _errors.InvalidMethodCallError(\"Uploaded image filepath must be a string or a ReadableStream.\");\n        }\n        var parsedFile = typeof file === \"string\" ? (0, _fs.createReadStream)(file) : file;\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/upload_sr_img\"),\n            formData: {\n                name,\n                upload_type: uploadType,\n                img_type: imageType,\n                file: parsedFile\n            }\n        }).then(function(result) {\n            if (result.errors.length) {\n                throw result.errors[0];\n            }\n            return _this8;\n        });\n    }\n    /**\n  * @summary Uploads an image for use in this subreddit's stylesheet.\n  * @param {object} options\n  * @param {string} options.name The name that the new image should have in the stylesheet\n  * @param {string|stream.Readable} options.file The image file that should get uploaded. This should either be the path to an\n  image file, or a [ReadableStream](https://nodejs.org/api/stream.html#stream_class_stream_readable) in environments (e.g.\n  browsers) where the filesystem is unavailable.\n  * @param {string} [options.imageType='png'] Determines how the uploaded image should be stored. One of `png, jpg`\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete.\n  * @example r.getSubreddit('snoowrap').uploadSubredditImage({name: 'the cookie monster', file: './cookie_monster.png'})\n  */ uploadStylesheetImage(_ref10) {\n        var name = _ref10.name, file = _ref10.file, _ref10$image_type = _ref10.image_type, image_type = _ref10$image_type === void 0 ? \"png\" : _ref10$image_type, _ref10$imageType = _ref10.imageType, imageType = _ref10$imageType === void 0 ? image_type : _ref10$imageType;\n        return this._uploadSrImg({\n            name,\n            file,\n            imageType,\n            uploadType: \"img\"\n        });\n    }\n    /**\n  * @summary Uploads an image to use as this subreddit's header.\n  * @param {object} options\n  * @param {string|stream.Readable} options.file The image file that should get uploaded. This should either be the path to an\n  image file, or a [ReadableStream](https://nodejs.org/api/stream.html#stream_class_stream_readable) for environments (e.g.\n  browsers) where the filesystem is unavailable.\n  * @param {string} [options.imageType='png'] Determines how the uploaded image should be stored. One of `png, jpg`\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete.\n  * @example r.getSubreddit('snoowrap').uploadHeaderImage({name: 'the cookie monster', file: './cookie_monster.png'})\n  */ uploadHeaderImage(_ref11) {\n        var file = _ref11.file, _ref11$image_type = _ref11.image_type, image_type = _ref11$image_type === void 0 ? \"png\" : _ref11$image_type, _ref11$imageType = _ref11.imageType, imageType = _ref11$imageType === void 0 ? image_type : _ref11$imageType;\n        return this._uploadSrImg({\n            file,\n            imageType,\n            uploadType: \"header\"\n        });\n    }\n    /**\n  * @summary Uploads an image to use as this subreddit's mobile icon.\n  * @param {object} options\n  * @param {string|stream.Readable} options.file The image file that should get uploaded. This should either be the path to an\n  image file, or a [ReadableStream](https://nodejs.org/api/stream.html#stream_class_stream_readable) for environments (e.g.\n  browsers) where the filesystem is unavailable.\n  * @param {string} [options.imageType='png'] Determines how the uploaded image should be stored. One of `png, jpg`\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete.\n  * @example r.getSubreddit('snoowrap').uploadIcon({name: 'the cookie monster', file: './cookie_monster.png'})\n  */ uploadIcon(_ref12) {\n        var file = _ref12.file, _ref12$image_type = _ref12.image_type, image_type = _ref12$image_type === void 0 ? \"png\" : _ref12$image_type, _ref12$imageType = _ref12.imageType, imageType = _ref12$imageType === void 0 ? image_type : _ref12$imageType;\n        return this._uploadSrImg({\n            file,\n            imageType,\n            uploadType: \"icon\"\n        });\n    }\n    /**\n  * @summary Uploads an image to use as this subreddit's mobile banner.\n  * @param {object} options\n  * @param {string|stream.Readable} options.file The image file that should get uploaded. This should either be the path to an\n  image file, or a [ReadableStream](https://nodejs.org/api/stream.html#stream_class_stream_readable) for environments (e.g.\n  browsers) where the filesystem is unavailable.\n  * @param {string} [options.imageType='png'] Determines how the uploaded image should be stored. One of `png, jpg`\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete.\n  * @example r.getSubreddit('snoowrap').uploadBannerImage({name: 'the cookie monster', file: './cookie_monster.png'})\n  */ uploadBannerImage(_ref13) {\n        var file = _ref13.file, _ref13$image_type = _ref13.image_type, image_type = _ref13$image_type === void 0 ? \"png\" : _ref13$image_type, _ref13$imageType = _ref13.imageType, imageType = _ref13$imageType === void 0 ? image_type : _ref13$imageType;\n        return this._uploadSrImg({\n            file,\n            imageType,\n            upload_type: \"banner\"\n        });\n    }\n    /**\n  * @summary Gets information on this subreddit's rules.\n  * @returns {Promise} A Promise that fulfills with information on this subreddit's rules.\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getRules().then(console.log)\n  *\n  * // => {\n  *   rules: [\n  *     {\n  *       kind: 'all',\n  *       short_name: 'Rule 1: No violating rule 1',\n  *       description: 'Breaking this rule is not allowed.',\n  *       ...\n  *     },\n  *     ...\n  *   ],\n  *   site_rules: [\n  *     'Spam',\n  *     'Personal and confidential information'',\n  *     'Threatening, harassing, or inciting violence'\n  *   ]\n  * }\n  */ getRules() {\n        return this._get({\n            uri: \"r/\".concat(this.display_name, \"/about/rules\")\n        });\n    }\n    /**\n  * @summary Gets the stickied post on this subreddit, or throws a 404 error if none exists.\n  * @param {object} [options]\n  * @param {number} [options.num=1] The number of the sticky to get. Should be either `1` (first sticky) or `2` (second sticky).\n  * @returns {Promise} A Submission object representing this subreddit's stickied submission\n  * @example\n  * r.getSubreddit('snoowrap').getSticky({num: 2})\n  * // => Submission { ... }\n  */ getSticky() {\n        var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref14$num = _ref14.num, num = _ref14$num === void 0 ? 1 : _ref14$num;\n        return this._get({\n            uri: \"r/\".concat(this.display_name, \"/about/sticky\"),\n            qs: {\n                num\n            }\n        });\n    }\n    _friend(options) {\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/friend\"),\n            form: _objectSpread({}, options, {\n                api_type\n            })\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    _unfriend(options) {\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/unfriend\"),\n            form: _objectSpread({}, options, {\n                api_type\n            })\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Invites the given user to be a moderator of this subreddit.\n  * @param {object} options\n  * @param {string} options.name The username of the account that should be invited\n  * @param {Array} [options.permissions] The moderator permissions that this user should have. This should be an array\n  containing some combination of `\"wiki\", \"posts\", \"access\", \"mail\", \"config\", \"flair\"`. To add a moderator with full\n  permissions, omit this property entirely.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').inviteModerator({name: 'actually_an_aardvark', permissions: ['posts', 'wiki']})\n  */ inviteModerator(_ref15) {\n        var name = _ref15.name, permissions = _ref15.permissions;\n        return this._friend({\n            name,\n            permissions: (0, _helpers.formatModPermissions)(permissions),\n            type: \"moderator_invite\"\n        });\n    }\n    /**\n  * @summary Revokes an invitation for the given user to be a moderator.\n  * @param {object} options\n  * @param {string} options.name The username of the account whose invitation should be revoked\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').revokeModeratorInvite({name: 'actually_an_aardvark'})\n  */ revokeModeratorInvite(_ref16) {\n        var name = _ref16.name;\n        return this._unfriend({\n            name,\n            type: \"moderator_invite\"\n        });\n    }\n    /**\n  * @summary Removes the given user's moderator status on this subreddit.\n  * @param {object} options\n  * @param {string} options.name The username of the account whose moderator status should be removed\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').removeModerator({name: 'actually_an_aardvark'})\n  */ removeModerator(_ref17) {\n        var name = _ref17.name;\n        return this._unfriend({\n            name,\n            type: \"moderator\"\n        });\n    }\n    /**\n  * @summary Makes the given user an approved submitter of this subreddit.\n  * @param {object} options\n  * @param {string} options.name The username of the account that should be given this status\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').addContributor({name: 'actually_an_aardvark'})\n  */ addContributor(_ref18) {\n        var name = _ref18.name;\n        return this._friend({\n            name,\n            type: \"contributor\"\n        });\n    }\n    /**\n  * @summary Revokes this user's approved submitter status on this subreddit.\n  * @param {object} options\n  * @param {string} options.name The username of the account whose status should be revoked\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').removeContributor({name: 'actually_an_aardvark'})\n  */ removeContributor(_ref19) {\n        var name = _ref19.name;\n        return this._unfriend({\n            name,\n            type: \"contributor\"\n        });\n    }\n    /**\n  * @summary Bans the given user from this subreddit.\n  * @param {object} options\n  * @param {string} options.name The username of the account that should be banned\n  * @param {string} [options.banMessage] The ban message. This will get sent to the user in a private message, alerting them\n  that they have been banned.\n  * @param {string} [options.banReason] A string indicating which rule the banned user broke (100 characters max)\n  * @param {number} [options.duration] The duration of the ban, in days. For a permanent ban, omit this parameter.\n  * @param {string} [options.banNote] A note that appears on the moderation log, usually used to indicate the reason for the\n  ban. This is not visible to the banned user. (300 characters max)\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').banUser({name: 'actually_an_aardvark', banMessage: 'You are now banned LOL'})\n  */ banUser(_ref20) {\n        var name = _ref20.name, ban_message = _ref20.ban_message, _ref20$banMessage = _ref20.banMessage, banMessage = _ref20$banMessage === void 0 ? ban_message : _ref20$banMessage, ban_reason = _ref20.ban_reason, _ref20$banReason = _ref20.banReason, banReason = _ref20$banReason === void 0 ? ban_reason : _ref20$banReason, duration = _ref20.duration, ban_note = _ref20.ban_note, _ref20$banNote = _ref20.banNote, banNote = _ref20$banNote === void 0 ? ban_note : _ref20$banNote;\n        return this._friend({\n            name,\n            ban_message: banMessage,\n            ban_reason: banReason,\n            duration,\n            note: banNote,\n            type: \"banned\"\n        });\n    }\n    /**\n  * @summary Unbans the given user from this subreddit.\n  * @param {object} options\n  * @param {string} options.name The username of the account that should be unbanned\n  * @returns {Promise} A Promise that fulfills when the request is complete\n  * @example r.getSubreddit('snoowrap').unbanUser({name: 'actually_an_aardvark'})\n  */ unbanUser(_ref21) {\n        var name = _ref21.name;\n        return this._unfriend({\n            name,\n            type: \"banned\"\n        });\n    }\n    /**\n  * @summary Mutes the given user from messaging this subreddit for 72 hours.\n  * @param {object} options\n  * @param {string} options.name The username of the account that should be muted\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').muteUser({name: 'actually_an_aardvark'})\n  */ muteUser(_ref22) {\n        var name = _ref22.name;\n        return this._friend({\n            name,\n            type: \"muted\"\n        });\n    }\n    /**\n  * @summary Unmutes the given user from messaging this subreddit.\n  * @param {object} options\n  * @param {string} options.name The username of the account that should be muted\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').unmuteUser({name: 'actually_an_aardvark'})\n  */ unmuteUser(_ref23) {\n        var name = _ref23.name;\n        return this._unfriend({\n            name,\n            type: \"muted\"\n        });\n    }\n    /**\n  * @summary Bans the given user from editing this subreddit's wiki.\n  * @param {object} options\n  * @param {string} options.name The username of the account that should be wikibanned\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').wikibanUser({name: 'actually_an_aardvark'})\n  */ wikibanUser(_ref24) {\n        var name = _ref24.name;\n        return this._friend({\n            name,\n            type: \"wikibanned\"\n        });\n    }\n    /**\n  * @summary Unbans the given user from editing this subreddit's wiki.\n  * @param {object} options\n  * @param {string} options.name The username of the account that should be unwikibanned\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').unwikibanUser({name: 'actually_an_aardvark'})\n  */ unwikibanUser(_ref25) {\n        var name = _ref25.name;\n        return this._unfriend({\n            name,\n            type: \"wikibanned\"\n        });\n    }\n    /**\n  * @summary Adds the given user to this subreddit's list of approved wiki editors.\n  * @param {object} options\n  * @param {string} options.name The username of the account that should be given approved editor status\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').addWikiContributor({name: 'actually_an_aardvark'})\n  */ addWikiContributor(_ref26) {\n        var name = _ref26.name;\n        return this._friend({\n            name,\n            type: \"wikicontributor\"\n        });\n    }\n    /**\n  * @summary Removes the given user from this subreddit's list of approved wiki editors.\n  * @param {object} options\n  * @param {string} options.name The username of the account whose approved editor status should be revoked\n  * @returns {Promise} A Promise that fulfills with this Subreddit when the request is complete\n  * @example r.getSubreddit('snoowrap').removeWikiContributor({name: 'actually_an_aardvark'})\n  */ removeWikiContributor(_ref27) {\n        var name = _ref27.name;\n        return this._unfriend({\n            name,\n            type: \"wikicontributor\"\n        });\n    }\n    /**\n  * @summary Sets the permissions for a given moderator on this subreddit.\n  * @param {object} options\n  * @param {string} options.name The username of the moderator whose permissions are being changed\n  * @param {Array} [options.permissions] The new moderator permissions that this user should have. This should be an array\n  containing some combination of `\"wiki\", \"posts\", \"access\", \"mail\", \"config\", \"flair\"`. To add a moderator with full\n  permissions, omit this property entirely.\n  * @returns {Promise} A Promise that fulfills with this Subreddit when this request is complete\n  * @example r.getSubreddit('snoowrap').setModeratorPermissions({name: 'actually_an_aardvark', permissions: ['mail']})\n  */ setModeratorPermissions(_ref28) {\n        var name = _ref28.name, permissions = _ref28.permissions;\n        return this._post({\n            uri: \"r/\".concat(this.display_name, \"/api/setpermissions\"),\n            form: {\n                api_type,\n                name,\n                permissions: (0, _helpers.formatModPermissions)(permissions),\n                type: \"moderator\"\n            }\n        }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Gets a given wiki page on this subreddit.\n  * @param {string} title The title of the desired wiki page.\n  * @returns {WikiPage} An unfetched WikiPage object corresponding to the desired wiki page\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getWikiPage('index')\n  * // => WikiPage { title: 'index', subreddit: Subreddit { display_name: 'snoowrap' } }\n  */ getWikiPage(title) {\n        return this._r._newObject(\"WikiPage\", {\n            subreddit: this,\n            title\n        });\n    }\n    /**\n  * @summary Gets the list of wiki pages on this subreddit.\n  * @returns {Promise} An Array containing WikiPage objects\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getWikiPages().then(console.log)\n  * // => [\n  * //   WikiPage { title: 'index', subreddit: Subreddit { display_name: 'snoowrap'} }\n  * //   WikiPage { title: 'config/sidebar', subreddit: Subreddit { display_name: 'snoowrap'} }\n  * //   WikiPage { title: 'secret_things', subreddit: Subreddit { display_name: 'snoowrap'} }\n  * //   WikiPage { title: 'config/submit_text', subreddit: Subreddit { display_name: 'snoowrap'} }\n  * // ]\n  */ getWikiPages() {\n        var _this9 = this;\n        return this._get({\n            uri: \"r/\".concat(this.display_name, \"/wiki/pages\")\n        }).map(function(title) {\n            return _this9.getWikiPage(title);\n        });\n    }\n    /**\n  * @summary Gets a list of revisions on this subreddit's wiki.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing wiki revisions\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getWikiRevisions().then(console.log)\n  * // => Listing [\n  * //  { page: 'index', reason: 'added cookies', ... },\n  * //  ...\n  * // ]\n  */ getWikiRevisions(options) {\n        return this._getListing({\n            uri: \"r/\".concat(this.display_name, \"/wiki/revisions\"),\n            qs: options\n        });\n    }\n};\nvar _default = Subreddit;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/Subreddit.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/UserList.js":
/*!********************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/UserList.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nclass UserList {\n    constructor(options, _r){\n        return options.children.map(function(user) {\n            return _r._newObject(\"RedditUser\", user);\n        });\n    }\n}\nexports[\"default\"] = UserList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9vYmplY3RzL1VzZXJMaXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsTUFBTUc7SUFDSkMsWUFBWUMsT0FBTyxFQUFFQyxFQUFFLENBQUU7UUFDdkIsT0FBT0QsUUFBUUUsUUFBUSxDQUFDQyxHQUFHLENBQUMsU0FBVUMsSUFBSTtZQUN4QyxPQUFPSCxHQUFHSSxVQUFVLENBQUMsY0FBY0Q7UUFDckM7SUFDRjtBQUVGO0FBRUFULGtCQUFlLEdBQUdHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVkZGl0LWFuYWx5dGljcy8uL25vZGVfbW9kdWxlcy9zbm9vd3JhcC9kaXN0L29iamVjdHMvVXNlckxpc3QuanM/ZmQ2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuY2xhc3MgVXNlckxpc3Qge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zLCBfcikge1xuICAgIHJldHVybiBvcHRpb25zLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIF9yLl9uZXdPYmplY3QoJ1JlZGRpdFVzZXInLCB1c2VyKTtcbiAgICB9KTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFVzZXJMaXN0OyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJVc2VyTGlzdCIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIl9yIiwiY2hpbGRyZW4iLCJtYXAiLCJ1c2VyIiwiX25ld09iamVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/UserList.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/VoteableContent.js":
/*!***************************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/VoteableContent.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _Promise = _interopRequireDefault(__webpack_require__(/*! ../Promise.js */ \"(rsc)/./node_modules/snoowrap/dist/Promise.js\"));\nvar _helpers = __webpack_require__(/*! ../helpers.js */ \"(rsc)/./node_modules/snoowrap/dist/helpers.js\");\nvar _ReplyableContent = _interopRequireDefault(__webpack_require__(/*! ./ReplyableContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/ReplyableContent.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar api_type = \"json\";\n/**\n* A set of mixin functions that apply to Submissions and Comments.\n* <style> #VoteableContent {display: none} </style>\n* @extends ReplyableContent\n*/ var VoteableContent = class VoteableContent extends _ReplyableContent.default {\n    /**\n  * @summary Casts a vote on this Comment or Submission.\n  * @private\n  * @param {number} direction The direction of the vote. (1 for an upvote, -1 for a downvote, 0 to remove a vote)\n  * @returns {Promise} A Promise that fulfills when the request is complete.\n  */ _vote(direction) {\n        return this._post({\n            uri: \"api/vote\",\n            form: {\n                dir: direction,\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Upvotes this Comment or Submission.\n  * @returns {Promise} A Promise that fulfills with this Comment/Submission when the request is complete\n  * @desc **Note: votes must be cast by humans.** That is, API clients proxying a human's action one-for-one are OK,\n  but bots deciding how to vote on content or amplifying a human's vote are not. See the\n  [reddit rules](https://reddit.com/rules) for more details on what constitutes vote cheating. (This guideline is quoted from\n  [the official reddit API documentation page](https://www.reddit.com/dev/api#POST_api_vote).)\n  * @example r.getSubmission('4e62ml').upvote()\n  */ upvote() {\n        return this._vote(1);\n    }\n    /**\n  * @summary Downvotes this Comment or Submission.\n  * @returns {Promise} A Promise that fulfills with this Comment/Submission when the request is complete.\n  * @desc **Note: votes must be cast by humans.** That is, API clients proxying a human's action one-for-one are OK, but\n  bots deciding how to vote on content or amplifying a human's vote are not. See the [reddit rules](https://reddit.com/rules)\n  for more details on what constitutes vote cheating. (This guideline is quoted from\n  [the official reddit API documentation page](https://www.reddit.com/dev/api#POST_api_vote).)\n  * @example r.getSubmission('4e62ml').downvote()\n  */ downvote() {\n        return this._vote(-1);\n    }\n    /**\n  * @summary Removes any existing vote on this Comment or Submission.\n  * @returns {Promise} A Promise that fulfills with this Comment/Submission when the request is complete.\n  * @desc **Note: votes must be cast by humans.** That is, API clients proxying a human's action one-for-one are OK, but\n  bots deciding how to vote on content or amplifying a human's vote are not. See the [reddit rules](https://reddit.com/rules)\n  for more details on what constitutes vote cheating. (This guideline is quoted from\n  [the official reddit API documentation page](https://www.reddit.com/dev/api#POST_api_vote).)\n  * @example r.getSubmission('4e62ml').unvote()\n  */ unvote() {\n        return this._vote(0);\n    }\n    /**\n  * @summary Saves this Comment or Submission (i.e. adds it to the list at reddit.com/saved)\n  * @returns {Promise} A Promise that fulfills when the request is complete\n  * @example r.getSubmission('4e62ml').save()\n  */ save() {\n        return this._post({\n            uri: \"api/save\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Unsaves this item\n  * @returns {Promise} A Promise that fulfills when the request is complete\n  * @example r.getSubmission('4e62ml').unsave()\n  */ unsave() {\n        return this._post({\n            uri: \"api/unsave\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Distinguishes this Comment or Submission with a sigil.\n  * @desc **Note:** This function will only work if the requester is the author of this Comment/Submission.\n  * @param {object} options\n  * @param {boolean|string} [options.status=true] Determines how the item should be distinguished.\n  `true` (default) signifies that the item should be moderator-distinguished, and\n  `false` signifies that the item should not be distinguished. Passing a string (e.g.\n  `admin`) will cause the item to get distinguished with that string, if possible.\n  * @param {boolean} [options.sticky=false] Determines whether this item should be stickied in addition to being\n  distinguished. (This only applies to comments; to sticky a submission, use {@link Submission#sticky} instead.)\n  * @returns {Promise} A Promise that fulfills when the request is complete.\n  * @example r.getComment('d1xclfo').distinguish({status: true, sticky: true})\n  */ distinguish() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$status = _ref.status, status = _ref$status === void 0 ? true : _ref$status, _ref$sticky = _ref.sticky, sticky = _ref$sticky === void 0 ? false : _ref$sticky;\n        return this._post({\n            uri: \"api/distinguish\",\n            form: {\n                api_type,\n                how: status === true ? \"yes\" : status === false ? \"no\" : status,\n                sticky,\n                id: this.name\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Undistinguishes this Comment or Submission. Alias for distinguish({status: false})\n  * @returns {Promise} A Promise that fulfills when the request is complete.\n  * @example r.getSubmission('4e62ml').undistinguish()\n  */ undistinguish() {\n        return this.distinguish({\n            status: false,\n            sticky: false\n        }).return(this);\n    }\n    /**\n  * @summary Edits this Comment or Submission.\n  * @param {string} updatedText The updated markdown text to use\n  * @returns {Promise} A Promise that fulfills when this request is complete.\n  * @example r.getComment('coip909').edit('Blah blah blah this is new updated text')\n  */ edit(updatedText) {\n        return this._post({\n            uri: \"api/editusertext\",\n            form: {\n                api_type,\n                text: updatedText,\n                thing_id: this.name\n            }\n        }).tap((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n  * @summary Gives reddit gold to the author of this Comment or Submission.\n  * @returns {Promise} A Promise that fullfills with this Comment/Submission when this request is complete\n  * @example r.getComment('coip909').gild()\n  */ gild() {\n        return this._post({\n            uri: \"api/v1/gold/gild/\".concat(this.name)\n        }).return(this);\n    }\n    _setInboxRepliesEnabled(state) {\n        return this._post({\n            uri: \"api/sendreplies\",\n            form: {\n                state,\n                id: this.name\n            }\n        });\n    }\n    /**\n  * @summary Enables inbox replies on this Comment or Submission\n  * @returns {Promise} A Promise that fulfills with this content when the request is complete\n  * @example r.getComment('coip909').enableInboxReplies()\n  */ enableInboxReplies() {\n        return this._setInboxRepliesEnabled(true).return(this);\n    }\n    /**\n  * @summary Disables inbox replies on this Comment or Submission\n  * @returns {Promise} A Promise that fulfills with this content when the request is complete\n  * @example r.getComment('coip909').disableInboxReplies()\n  */ disableInboxReplies() {\n        return this._setInboxRepliesEnabled(false).return(this);\n    }\n    _mutateAndExpandReplies(_ref2) {\n        var _this = this;\n        var limit = _ref2.limit, depth = _ref2.depth;\n        if (depth <= 0) {\n            return _Promise.default.resolve(this);\n        }\n        var repliesKey = this.constructor._name === \"Submission\" ? \"comments\" : \"replies\";\n        return this[repliesKey].fetchMore({\n            amount: limit - this[repliesKey].length\n        }).tap(function(replies) {\n            _this[repliesKey] = replies;\n        }).then(function(replies) {\n            return replies.slice(0, limit);\n        }).map(function(reply) {\n            return reply._mutateAndExpandReplies({\n                limit,\n                depth: depth - 1\n            });\n        }).return(this);\n    }\n    /**\n  * @summary Expands the reply Listings on this Comment/Submission.\n  * @desc This is useful in cases where one wants to enumerate all comments on a\n  thread, even the ones that are initially hidden when viewing it (e.g. long comment chains).\n  *\n  * This function accepts two optional parameters `options.limit` and `options.depth`. `options.limit` sets an upper bound\n  for the branching factor of the resulting replies tree, i.e. the number of comments that are fetched in reply to any given\n  item. `options.depth` sets an upper bound for the depth of the resulting replies tree (where a depth of 0 signifies that no\n  replies should be fetched at all).\n  *\n  * Note that regardless of the `limit` and `depth` parameters used, any reply that appeared in the original reply tree will\n  appear in the expanded reply tree. In certain cases, the depth of the resulting tree may also be larger than `options.depth`,\n  if the reddit API returns more of a comment tree than needed.\n  *\n  * These parameters should primarily be used to keep the request count low; if a precise limit and depth are needed, it is\n  recommended to manually verify the comments in the tree afterwards.\n  *\n  * Both parameters default to `Infinity` if omitted, i.e. the resulting tree contains every single comment available. It should\n  be noted that depending on the size and depth of the thread, fetching every single comment can use up a significant number\n  of ratelimited requests. (To give an intuitive estimate, consider how many clicks would be needed to view all the\n  comments on the thread using the HTML site.)\n  * @param {object} [options={}]\n  * @param {number} [options.limit=Infinity] An upper-bound for the branching factor of the resulting tree of replies\n  * @param {number} [options.depth=Infinity] An upper-bound for the depth of the resulting tree of replies\n  * @returns {Promise} A Promise that fulfills with a new version of this object that has an expanded reply tree. The original\n  object is not modified\n  * @example r.getSubmission('4fuq26').expandReplies().then(console.log)\n  * // => (a very large comment tree containing every viewable comment on this thread)\n  */ expandReplies() {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref3$limit = _ref3.limit, limit = _ref3$limit === void 0 ? Infinity : _ref3$limit, _ref3$depth = _ref3.depth, depth = _ref3$depth === void 0 ? Infinity : _ref3$depth;\n        return this._r._promiseWrap(this.fetch().then(function(result) {\n            return result._clone({\n                deep: true\n            })._mutateAndExpandReplies({\n                limit,\n                depth\n            });\n        }));\n    }\n}; // VoteableContent#delete is not in the class body since Safari 9 can't parse the `delete` function name in class bodies.\n/**\n* @function\n* @name delete\n* @summary Deletes this Comment or Submission\n* @returns {Promise} A Promise that fulfills with this Comment/Submission when this request is complete\n* @example r.getComment('coip909').delete()\n* @memberof VoteableContent\n* @instance\n*/ Object.defineProperty(VoteableContent.prototype, \"delete\", {\n    value () {\n        return this._post({\n            uri: \"api/del\",\n            form: {\n                id: this.name\n            }\n        }).return(this);\n    },\n    configurable: true,\n    writable: true\n});\nvar _default = VoteableContent;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/VoteableContent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/WikiPage.js":
/*!********************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/WikiPage.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _RedditContent = _interopRequireDefault(__webpack_require__(/*! ./RedditContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/RedditContent.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/**\n* A class representing a wiki page on a subreddit.\n*\n* **Note:** Due to a bug in reddit's CORS settings, it is not possible to fetch the contents of a wiki page on a private\nsubreddit while running snoowrap in a browser. (This issue does not apply when running snoowrap in Node.js.)\n*\n* <style> #WikiPage {display: none} </style>\n* @extends RedditContent\n* @example\n*\n* // Get a wiki page on a given subreddit by name\n* r.getSubreddit('AskReddit').getWikiPage('rules')\n*/ var WikiPage = class WikiPage extends _RedditContent.default {\n    get _uri() {\n        return \"r/\".concat(this.subreddit.display_name, \"/wiki/\").concat(this.title);\n    }\n    /**\n  * @summary Gets the current settings for this wiki page.\n  * @returns {Promise} An Object representing the settings for this page\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getWikiPage('index').getSettings().then(console.log)\n  * // => WikiPageSettings { permlevel: 0, editors: [], listed: true }\n  */ getSettings() {\n        return this._get({\n            uri: \"r/\".concat(this.subreddit.display_name, \"/wiki/settings/\").concat(this.title)\n        });\n    }\n    /**\n  * @summary Edits the settings for this wiki page.\n  * @param {object} options\n  * @param {boolean} options.listed Determines whether this wiki page should appear on the public list of pages for this\n  subreddit.\n  * @param {number} options.permissionLevel Determines who should be allowed to access and edit this page `0` indicates that\n  this subreddit's default wiki settings should get used, `1` indicates that only approved wiki contributors on this subreddit\n  should be able to edit this page, and `2` indicates that only mods should be able to view and edit this page.\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').editSettings({listed: false, permission_level: 1})\n  */ editSettings(_ref) {\n        var listed = _ref.listed, permission_level = _ref.permission_level, _ref$permissionLevel = _ref.permissionLevel, permissionLevel = _ref$permissionLevel === void 0 ? permission_level : _ref$permissionLevel;\n        return this._post({\n            uri: \"r/\".concat(this.subreddit.display_name, \"/wiki/settings/\").concat(this.title),\n            form: {\n                listed,\n                permlevel: permissionLevel\n            }\n        }).return(this);\n    }\n    _modifyEditor(_ref2) {\n        var name = _ref2.name, action = _ref2.action;\n        return this._post({\n            uri: \"r/\".concat(this.subreddit.display_name, \"/api/wiki/alloweditor/\").concat(action),\n            form: {\n                page: this.title,\n                username: name\n            }\n        });\n    }\n    /**\n  * @summary Makes the given user an approved editor of this wiki page.\n  * @param {object} options\n  * @param {string} options.name The name of the user to be added\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').addEditor({name: 'actually_an_aardvark'})\n  */ addEditor(_ref3) {\n        var name = _ref3.name;\n        return this._modifyEditor({\n            name,\n            action: \"add\"\n        }).return(this);\n    }\n    /**\n  * @summary Revokes this user's approved editor status for this wiki page\n  * @param {object} options\n  * @param {string} options.name The name of the user to be removed\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').removeEditor({name: 'actually_an_aardvark'})\n  */ removeEditor(_ref4) {\n        var name = _ref4.name;\n        return this._modifyEditor({\n            name,\n            action: \"del\"\n        }).return(this);\n    }\n    /**\n  * @summary Edits this wiki page, or creates it if it does not exist yet.\n  * @param {object} options\n  * @param {string} options.text The new content of the page, in markdown.\n  * @param {string} [options.reason] The edit reason that will appear in this page's revision history. 256 characters max\n  * @param {string} [options.previousRevision] Determines which revision this edit should be added to. If this parameter is\n  omitted, this edit is simply added to the most recent revision.\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').edit({text: 'Welcome', reason: 'Added a welcome message'})\n  */ edit(_ref5) {\n        var text = _ref5.text, reason = _ref5.reason, previous_revision = _ref5.previous_revision, _ref5$previousRevisio = _ref5.previousRevision, previousRevision = _ref5$previousRevisio === void 0 ? previous_revision : _ref5$previousRevisio;\n        return this._post({\n            uri: \"r/\".concat(this.subreddit.display_name, \"/api/wiki/edit\"),\n            form: {\n                content: text,\n                page: this.title,\n                previous: previousRevision,\n                reason\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Gets a list of revisions for this wiki page.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing revisions of this page\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getRevisions({limit: 1}).then(console.log)\n  * // => Listing [\n  * //  {\n  * //    timestamp: 1460973194,\n  * //    reason: 'Added a welcome message',\n  * //    author: RedditUser { name: 'not_an_aardvark', id: 'k83md', ... },\n  * //    page: 'index',\n  * //    id: '506370b4-0508-11e6-b550-0e69f29e0c4d'\n  * //  }\n  * // ]\n  */ getRevisions(options) {\n        return this._getListing({\n            uri: \"r/\".concat(this.subreddit.display_name, \"/wiki/revisions/\").concat(this.title),\n            qs: options\n        });\n    }\n    /**\n  * @summary Hides the given revision from this page's public revision history.\n  * @param {object} options\n  * @param {string} options.id The revision's id\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').hideRevision({id: '506370b4-0508-11e6-b550-0e69f29e0c4d'})\n  */ hideRevision(_ref6) {\n        var id = _ref6.id;\n        return this._post({\n            uri: \"r/\".concat(this.subreddit.display_name, \"/api/wiki/hide\"),\n            qs: {\n                page: this.title,\n                revision: id\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Reverts this wiki page to the given point.\n  * @param {object} options\n  * @param {string} options.id The id of the revision that this page should be reverted to\n  * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n  * @example r.getSubreddit('snoowrap').getWikiPage('index').revert({id: '506370b4-0508-11e6-b550-0e69f29e0c4d'})\n  */ revert(_ref7) {\n        var id = _ref7.id;\n        return this._post({\n            uri: \"r/\".concat(this.subreddit.display_name, \"/api/wiki/revert\"),\n            qs: {\n                page: this.title,\n                revision: id\n            }\n        }).return(this);\n    }\n    /**\n  * @summary Gets a list of discussions about this wiki page.\n  * @param {object} [options] Options for the resulting Listing\n  * @returns {Promise} A Listing containing discussions about this page\n  * @example\n  *\n  * r.getSubreddit('snoowrap').getWikiPage('index').getDiscussions().then(console.log)\n  * // => Listing [\n  * //  Submission { ... },\n  * //  Submission { ... },\n  * //  ...\n  * // ]\n  */ getDiscussions(options) {\n        return this._getListing({\n            uri: \"r/\".concat(this.subreddit.display_name, \"/wiki/discussions/\").concat(this.title),\n            qs: options\n        });\n    }\n};\nvar _default = WikiPage;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/WikiPage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/objects/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/snoowrap/dist/objects/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RedditContent\", ({\n    enumerable: true,\n    get: function() {\n        return _RedditContent.default;\n    }\n}));\nObject.defineProperty(exports, \"ReplyableContent\", ({\n    enumerable: true,\n    get: function() {\n        return _ReplyableContent.default;\n    }\n}));\nObject.defineProperty(exports, \"VoteableContent\", ({\n    enumerable: true,\n    get: function() {\n        return _VoteableContent.default;\n    }\n}));\nObject.defineProperty(exports, \"Comment\", ({\n    enumerable: true,\n    get: function() {\n        return _Comment.default;\n    }\n}));\nObject.defineProperty(exports, \"RedditUser\", ({\n    enumerable: true,\n    get: function() {\n        return _RedditUser.default;\n    }\n}));\nObject.defineProperty(exports, \"Submission\", ({\n    enumerable: true,\n    get: function() {\n        return _Submission.default;\n    }\n}));\nObject.defineProperty(exports, \"LiveThread\", ({\n    enumerable: true,\n    get: function() {\n        return _LiveThread.default;\n    }\n}));\nObject.defineProperty(exports, \"PrivateMessage\", ({\n    enumerable: true,\n    get: function() {\n        return _PrivateMessage.default;\n    }\n}));\nObject.defineProperty(exports, \"Subreddit\", ({\n    enumerable: true,\n    get: function() {\n        return _Subreddit.default;\n    }\n}));\nObject.defineProperty(exports, \"MultiReddit\", ({\n    enumerable: true,\n    get: function() {\n        return _MultiReddit.default;\n    }\n}));\nObject.defineProperty(exports, \"WikiPage\", ({\n    enumerable: true,\n    get: function() {\n        return _WikiPage.default;\n    }\n}));\nObject.defineProperty(exports, \"Listing\", ({\n    enumerable: true,\n    get: function() {\n        return _Listing.default;\n    }\n}));\nObject.defineProperty(exports, \"More\", ({\n    enumerable: true,\n    get: function() {\n        return _More.default;\n    }\n}));\nObject.defineProperty(exports, \"UserList\", ({\n    enumerable: true,\n    get: function() {\n        return _UserList.default;\n    }\n}));\nObject.defineProperty(exports, \"ModmailConversation\", ({\n    enumerable: true,\n    get: function() {\n        return _ModmailConversation.default;\n    }\n}));\nvar _RedditContent = _interopRequireDefault(__webpack_require__(/*! ./RedditContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/RedditContent.js\"));\nvar _ReplyableContent = _interopRequireDefault(__webpack_require__(/*! ./ReplyableContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/ReplyableContent.js\"));\nvar _VoteableContent = _interopRequireDefault(__webpack_require__(/*! ./VoteableContent.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/VoteableContent.js\"));\nvar _Comment = _interopRequireDefault(__webpack_require__(/*! ./Comment.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/Comment.js\"));\nvar _RedditUser = _interopRequireDefault(__webpack_require__(/*! ./RedditUser.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/RedditUser.js\"));\nvar _Submission = _interopRequireDefault(__webpack_require__(/*! ./Submission.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/Submission.js\"));\nvar _LiveThread = _interopRequireDefault(__webpack_require__(/*! ./LiveThread.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/LiveThread.js\"));\nvar _PrivateMessage = _interopRequireDefault(__webpack_require__(/*! ./PrivateMessage.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/PrivateMessage.js\"));\nvar _Subreddit = _interopRequireDefault(__webpack_require__(/*! ./Subreddit.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/Subreddit.js\"));\nvar _MultiReddit = _interopRequireDefault(__webpack_require__(/*! ./MultiReddit.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/MultiReddit.js\"));\nvar _WikiPage = _interopRequireDefault(__webpack_require__(/*! ./WikiPage.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/WikiPage.js\"));\nvar _Listing = _interopRequireDefault(__webpack_require__(/*! ./Listing.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/Listing.js\"));\nvar _More = _interopRequireDefault(__webpack_require__(/*! ./More.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/More.js\"));\nvar _UserList = _interopRequireDefault(__webpack_require__(/*! ./UserList.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/UserList.js\"));\nvar _ModmailConversation = _interopRequireDefault(__webpack_require__(/*! ./ModmailConversation.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/ModmailConversation.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9vYmplY3RzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGSCxpREFBZ0Q7SUFDOUNJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9DLGVBQWVDLE9BQU87SUFDL0I7QUFDRixDQUFDLEVBQUM7QUFDRlAsb0RBQW1EO0lBQ2pESSxZQUFZO0lBQ1pDLEtBQUs7UUFDSCxPQUFPRyxrQkFBa0JELE9BQU87SUFDbEM7QUFDRixDQUFDLEVBQUM7QUFDRlAsbURBQWtEO0lBQ2hESSxZQUFZO0lBQ1pDLEtBQUs7UUFDSCxPQUFPSSxpQkFBaUJGLE9BQU87SUFDakM7QUFDRixDQUFDLEVBQUM7QUFDRlAsMkNBQTBDO0lBQ3hDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDSCxPQUFPSyxTQUFTSCxPQUFPO0lBQ3pCO0FBQ0YsQ0FBQyxFQUFDO0FBQ0ZQLDhDQUE2QztJQUMzQ0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0gsT0FBT00sWUFBWUosT0FBTztJQUM1QjtBQUNGLENBQUMsRUFBQztBQUNGUCw4Q0FBNkM7SUFDM0NJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9PLFlBQVlMLE9BQU87SUFDNUI7QUFDRixDQUFDLEVBQUM7QUFDRlAsOENBQTZDO0lBQzNDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDSCxPQUFPUSxZQUFZTixPQUFPO0lBQzVCO0FBQ0YsQ0FBQyxFQUFDO0FBQ0ZQLGtEQUFpRDtJQUMvQ0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0gsT0FBT1MsZ0JBQWdCUCxPQUFPO0lBQ2hDO0FBQ0YsQ0FBQyxFQUFDO0FBQ0ZQLDZDQUE0QztJQUMxQ0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0gsT0FBT1UsV0FBV1IsT0FBTztJQUMzQjtBQUNGLENBQUMsRUFBQztBQUNGUCwrQ0FBOEM7SUFDNUNJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9XLGFBQWFULE9BQU87SUFDN0I7QUFDRixDQUFDLEVBQUM7QUFDRlAsNENBQTJDO0lBQ3pDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDSCxPQUFPWSxVQUFVVixPQUFPO0lBQzFCO0FBQ0YsQ0FBQyxFQUFDO0FBQ0ZQLDJDQUEwQztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0gsT0FBT2EsU0FBU1gsT0FBTztJQUN6QjtBQUNGLENBQUMsRUFBQztBQUNGUCx3Q0FBdUM7SUFDckNJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9jLE1BQU1aLE9BQU87SUFDdEI7QUFDRixDQUFDLEVBQUM7QUFDRlAsNENBQTJDO0lBQ3pDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDSCxPQUFPZSxVQUFVYixPQUFPO0lBQzFCO0FBQ0YsQ0FBQyxFQUFDO0FBQ0ZQLHVEQUFzRDtJQUNwREksWUFBWTtJQUNaQyxLQUFLO1FBQ0gsT0FBT2dCLHFCQUFxQmQsT0FBTztJQUNyQztBQUNGLENBQUMsRUFBQztBQUVGLElBQUlELGlCQUFpQmdCLHVCQUF1QkMsbUJBQU9BLENBQUMsdUZBQW9CO0FBRXhFLElBQUlmLG9CQUFvQmMsdUJBQXVCQyxtQkFBT0EsQ0FBQyw2RkFBdUI7QUFFOUUsSUFBSWQsbUJBQW1CYSx1QkFBdUJDLG1CQUFPQSxDQUFDLDJGQUFzQjtBQUU1RSxJQUFJYixXQUFXWSx1QkFBdUJDLG1CQUFPQSxDQUFDLDJFQUFjO0FBRTVELElBQUlaLGNBQWNXLHVCQUF1QkMsbUJBQU9BLENBQUMsaUZBQWlCO0FBRWxFLElBQUlYLGNBQWNVLHVCQUF1QkMsbUJBQU9BLENBQUMsaUZBQWlCO0FBRWxFLElBQUlWLGNBQWNTLHVCQUF1QkMsbUJBQU9BLENBQUMsaUZBQWlCO0FBRWxFLElBQUlULGtCQUFrQlEsdUJBQXVCQyxtQkFBT0EsQ0FBQyx5RkFBcUI7QUFFMUUsSUFBSVIsYUFBYU8sdUJBQXVCQyxtQkFBT0EsQ0FBQywrRUFBZ0I7QUFFaEUsSUFBSVAsZUFBZU0sdUJBQXVCQyxtQkFBT0EsQ0FBQyxtRkFBa0I7QUFFcEUsSUFBSU4sWUFBWUssdUJBQXVCQyxtQkFBT0EsQ0FBQyw2RUFBZTtBQUU5RCxJQUFJTCxXQUFXSSx1QkFBdUJDLG1CQUFPQSxDQUFDLDJFQUFjO0FBRTVELElBQUlKLFFBQVFHLHVCQUF1QkMsbUJBQU9BLENBQUMscUVBQVc7QUFFdEQsSUFBSUgsWUFBWUUsdUJBQXVCQyxtQkFBT0EsQ0FBQyw2RUFBZTtBQUU5RCxJQUFJRix1QkFBdUJDLHVCQUF1QkMsbUJBQU9BLENBQUMsbUdBQTBCO0FBRXBGLFNBQVNELHVCQUF1QkUsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFakIsU0FBU2lCO0lBQUk7QUFBRyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZGRpdC1hbmFseXRpY3MvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9vYmplY3RzL2luZGV4LmpzP2UyMDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZWRkaXRDb250ZW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9SZWRkaXRDb250ZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVwbHlhYmxlQ29udGVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfUmVwbHlhYmxlQ29udGVudC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZvdGVhYmxlQ29udGVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVm90ZWFibGVDb250ZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29tbWVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfQ29tbWVudC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlZGRpdFVzZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1JlZGRpdFVzZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdWJtaXNzaW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9TdWJtaXNzaW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTGl2ZVRocmVhZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfTGl2ZVRocmVhZC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlByaXZhdGVNZXNzYWdlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9Qcml2YXRlTWVzc2FnZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN1YnJlZGRpdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfU3VicmVkZGl0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTXVsdGlSZWRkaXRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX011bHRpUmVkZGl0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV2lraVBhZ2VcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1dpa2lQYWdlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTGlzdGluZ1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfTGlzdGluZy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1vcmVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX01vcmUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVc2VyTGlzdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVXNlckxpc3QuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNb2RtYWlsQ29udmVyc2F0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9Nb2RtYWlsQ29udmVyc2F0aW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1JlZGRpdENvbnRlbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1JlZGRpdENvbnRlbnQuanNcIikpO1xuXG52YXIgX1JlcGx5YWJsZUNvbnRlbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1JlcGx5YWJsZUNvbnRlbnQuanNcIikpO1xuXG52YXIgX1ZvdGVhYmxlQ29udGVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVm90ZWFibGVDb250ZW50LmpzXCIpKTtcblxudmFyIF9Db21tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Db21tZW50LmpzXCIpKTtcblxudmFyIF9SZWRkaXRVc2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SZWRkaXRVc2VyLmpzXCIpKTtcblxudmFyIF9TdWJtaXNzaW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdWJtaXNzaW9uLmpzXCIpKTtcblxudmFyIF9MaXZlVGhyZWFkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MaXZlVGhyZWFkLmpzXCIpKTtcblxudmFyIF9Qcml2YXRlTWVzc2FnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUHJpdmF0ZU1lc3NhZ2UuanNcIikpO1xuXG52YXIgX1N1YnJlZGRpdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3VicmVkZGl0LmpzXCIpKTtcblxudmFyIF9NdWx0aVJlZGRpdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTXVsdGlSZWRkaXQuanNcIikpO1xuXG52YXIgX1dpa2lQYWdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9XaWtpUGFnZS5qc1wiKSk7XG5cbnZhciBfTGlzdGluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTGlzdGluZy5qc1wiKSk7XG5cbnZhciBfTW9yZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9yZS5qc1wiKSk7XG5cbnZhciBfVXNlckxpc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1VzZXJMaXN0LmpzXCIpKTtcblxudmFyIF9Nb2RtYWlsQ29udmVyc2F0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Nb2RtYWlsQ29udmVyc2F0aW9uLmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX1JlZGRpdENvbnRlbnQiLCJkZWZhdWx0IiwiX1JlcGx5YWJsZUNvbnRlbnQiLCJfVm90ZWFibGVDb250ZW50IiwiX0NvbW1lbnQiLCJfUmVkZGl0VXNlciIsIl9TdWJtaXNzaW9uIiwiX0xpdmVUaHJlYWQiLCJfUHJpdmF0ZU1lc3NhZ2UiLCJfU3VicmVkZGl0IiwiX011bHRpUmVkZGl0IiwiX1dpa2lQYWdlIiwiX0xpc3RpbmciLCJfTW9yZSIsIl9Vc2VyTGlzdCIsIl9Nb2RtYWlsQ29udmVyc2F0aW9uIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/objects/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/request_handler.js":
/*!*******************************************************!*\
  !*** ./node_modules/snoowrap/dist/request_handler.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.oauthRequest = oauthRequest;\nexports._awaitExponentialBackoff = _awaitExponentialBackoff;\nexports._awaitRatelimit = _awaitRatelimit;\nexports._awaitRequestDelay = _awaitRequestDelay;\nexports.credentialedClientRequest = credentialedClientRequest;\nexports.unauthenticatedRequest = unauthenticatedRequest;\nexports.updateAccessToken = updateAccessToken;\nexports.rawRequest = void 0;\nvar _lodash = __webpack_require__(/*! lodash */ \"lodash\");\nvar _Promise = _interopRequireDefault(__webpack_require__(/*! ./Promise.js */ \"(rsc)/./node_modules/snoowrap/dist/Promise.js\"));\nvar _constants = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/snoowrap/dist/constants.js\");\nvar _errors = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/snoowrap/dist/errors.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n        for(var i = 0, arr2 = new Array(arr.length); i < arr.length; i++){\n            arr2[i] = arr[i];\n        }\n        return arr2;\n    }\n}\n/**\n* @summary Sends an oauth-authenticated request to the reddit server, and returns the server's response.\n* @desc **Note**: While this function primarily exists for internal use, it is exposed and considered a stable feature.\nHowever, keep in mind that there are usually better alternatives to using this function. For instance, this\nfunction can be used to send a POST request to the 'api/vote' endpoint in order to upvote a comment, but it's generally\neasier to just use snoowrap's [upvote function]{@link VoteableContent#upvote}.\n*\n* If you're using this function to access an API feature/endpoint that is unsupported by snoowrap, please consider [creating an\nissue for it](https://github.com/not-an-aardvark/snoowrap/issues) so that the functionality can be added to snoowrap more\ndirectly.\n* @param {object} options Options for the request. For documentation on these options, see the\n[Request API](https://www.npmjs.com/package/request). Supported options include `uri`, `qs`, `form`, `headers`, `method`,\n`auth`, and `body`. A default `baseUrl` parameter of `this.config().endpoint_domain` is internally included by default, so it\nis recommended that a `uri` parameter be used, rather than a `url` parameter with a\ndomain name.\n* @returns {Promise} A Promise that fulfills with reddit's response.\n* @memberof snoowrap\n* @instance\n* @example\n*\n* r.oauthRequest({uri: '/user/spez/about', method: 'get'}).then(console.log)\n* // => RedditUser { name: 'spez', link_karma: 9567, ... }\n*\n* // Note that this is equivalent to:\n* r.getUser('spez').fetch().then(console.log)\n*\n* // ######\n*\n* r.oauthRequest({uri: '/api/vote', method: 'post', form: {dir: 1, id: 't3_4fzg2k'}})\n* // equivalent to:\n* r.getSubmission('4fzg2k').upvote()\n*\n* // ######\n*\n* r.oauthRequest({uri: '/top', method: 'get', qs: {t: 'all'}})\n* // equivalent to:\n* r.getTop({time: 'all'})\n*/ function oauthRequest(options) {\n    var _Promise$resolve$then, _this = this;\n    var attempts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return (_Promise$resolve$then = _Promise.default.resolve().then(function() {\n        return _this._awaitRatelimit();\n    }).then(function() {\n        return _this._awaitRequestDelay();\n    }).then(function() {\n        return _awaitExponentialBackoff(attempts);\n    }).then(function() {\n        return _this.updateAccessToken();\n    }).then(function(token) {\n        return _this.rawRequest((0, _lodash.merge)({\n            json: true,\n            headers: {\n                \"user-agent\": _this.userAgent\n            },\n            baseUrl: \"https://oauth.\".concat(_this._config.endpointDomain),\n            qs: {\n                raw_json: 1\n            },\n            auth: {\n                bearer: token\n            },\n            resolveWithFullResponse: true,\n            timeout: _this._config.requestTimeout,\n            transform: function(body, response) {\n                if (Object.prototype.hasOwnProperty.call(response.headers, \"x-ratelimit-remaining\")) {\n                    _this.ratelimitRemaining = +response.headers[\"x-ratelimit-remaining\"];\n                    _this.ratelimitExpiration = Date.now() + response.headers[\"x-ratelimit-reset\"] * 1000;\n                }\n                _this._debug(\"Received a \".concat(response.statusCode, \" status code from a `\").concat(response.request.method, \"` request\"), \"sent to \".concat(response.request.uri.href, \". ratelimitRemaining: \").concat(_this.ratelimitRemaining));\n                return response;\n            }\n        }, options));\n    }).then(function(response) {\n        var populated = _this._populate(response.body);\n        if (populated && populated.constructor._name === \"Listing\") {\n            populated._setUri(response.request.uri.href);\n        }\n        return populated;\n    })).catch.apply(_Promise$resolve$then, _toConsumableArray(this._config.retryErrorCodes.map(function(retryCode) {\n        return {\n            statusCode: retryCode\n        };\n    })).concat([\n        function(e) {\n            if (!(0, _lodash.includes)(_constants.IDEMPOTENT_HTTP_VERBS, e.response.request.method) || attempts >= _this._config.maxRetryAttempts) {\n                throw e;\n            }\n            /* If the error's status code is in the user's configured `retryStatusCodes` and this request still has attempts\n    remaining, retry this request and increment the `attempts` counter. */ _this._warn(\"Received status code \".concat(e.statusCode, \" from reddit.\"), \"Retrying request (attempt \".concat(attempts + 1, \"/\").concat(_this._config.maxRetryAttempts, \")...\"));\n            return _this.oauthRequest(options, attempts + 1);\n        }\n    ])).catch({\n        statusCode: 401\n    }, function(e) {\n        /* If the server returns a 401 error, it's possible that the access token expired during the latency period as this\n    request was being sent. In this scenario, snoowrap thought that the access token was valid for a few more seconds, so it\n    didn't refresh the token, but the token had expired by the time the request reached the server. To handle this issue,\n    invalidate the access token and call oauth_request again, automatically causing the token to be refreshed. */ if (_this.accessToken && _this.tokenExpiration - Date.now() < _constants.MAX_TOKEN_LATENCY) {\n            _this.accessToken = null;\n            _this.tokenExpiration = null;\n            return _this.oauthRequest(options, attempts);\n        }\n        throw e;\n    });\n}\nfunction _awaitExponentialBackoff(attempts) {\n    if (attempts === 1) {\n        return _Promise.default.resolve();\n    }\n    return _Promise.default.delay((Math.pow(2, attempts - 1) + (Math.random() - 0.3)) * 1000);\n}\nfunction _awaitRatelimit() {\n    if (this.ratelimitRemaining < 1 && Date.now() < this.ratelimitExpiration) {\n        // If the ratelimit has been exceeded, delay or abort the request depending on the user's config.\n        var timeUntilExpiry = this.ratelimitExpiration - Date.now();\n        if (this._config.continueAfterRatelimitError) {\n            /* If the `continue_after_ratelimit_error` setting is enabled, queue the request, wait until the next ratelimit\n      period, and then send it. */ this._warn((0, _errors.rateLimitWarning)(timeUntilExpiry));\n            return _Promise.default.delay(timeUntilExpiry);\n        } // Otherwise, throw an error.\n        throw new _errors.RateLimitError(timeUntilExpiry);\n    } // If the ratelimit hasn't been exceeded, no delay is necessary.\n    return _Promise.default.resolve();\n}\nfunction _awaitRequestDelay() {\n    var now = Date.now();\n    var waitTime = this._nextRequestTimestamp - now;\n    this._nextRequestTimestamp = Math.max(now, this._nextRequestTimestamp) + this._config.requestDelay;\n    return _Promise.default.delay(waitTime);\n}\n/**\n* @summary Sends a request to the reddit server, authenticated with the user's client ID and client secret.\n* @desc **Note**: This is used internally as part of the authentication process, but it cannot be used to actually fetch\ncontent from reddit. To do that, use {@link snoowrap#oauthRequest} or another of snoowrap's helper functions.\n*\n* This function can work with alternate `this`-bindings, provided that the binding has the `clientId`, `clientSecret`, and\n`userAgent` properties. This allows it be used if no snoowrap requester has been created yet.\n* @param {object|string} options Options for the request; these are passed directly to the\n[Request API](https://www.npmjs.com/package/request).\n* @returns {Promise} The response from the reddit server\n* @example\n*\n* // example: this function could be used to exchange a one-time authentication code for a refresh token.\nsnoowrap.prototype.credentialedClientRequest.call({\n  clientId: 'client id goes here',\n  clientSecret: 'client secret goes here',\n  userAgent: 'user agent goes here'\n}, {\n  method: 'post',\n  baseUrl: 'https://www.reddit.com',\n  uri: 'api/v1/access_token',\n  form: {grant_type: 'authorization_code', code: 'code goes here', redirect_uri: 'redirect uri goes here'}\n}).then(response => {\n  //handle response here\n})\n* @memberof snoowrap\n* @instance\n*/ function credentialedClientRequest(options) {\n    var requestFunc = this.rawRequest || rawRequest;\n    return _Promise.default.resolve(requestFunc.call(this, (0, _lodash.merge)({\n        json: true,\n        auth: {\n            user: this.clientId || this.client_id || \"\",\n            pass: this.clientSecret || this.client_secret || \"\"\n        },\n        headers: {\n            \"user-agent\": this.userAgent\n        },\n        baseUrl: this._config ? \"https://www.\".concat(this._config.endpointDomain) : undefined\n    }, options)));\n}\n/**\n* @summary Sends a request to the reddit server without authentication.\n* @param {object|string} options Options for the request; these are passed directly to the\n[Request API](https://www.npmjs.com/package/request).\n* @returns {Promise} The response from the reddit server\n* @memberof snoowrap\n* @instance\n*/ function unauthenticatedRequest(options) {\n    return _Promise.default.resolve(this.rawRequest((0, _lodash.merge)({\n        json: true,\n        headers: {\n            \"user-agent\": this.userAgent\n        },\n        baseUrl: \"https://www.\".concat(this._config.endpointDomain)\n    }, options)));\n}\n/**\n* @summary Updates this requester's access token if the current one is absent or expired.\n* @desc **Note**: This function is automatically called internally when making a request. While the function is exposed as\na stable feature, using it is rarely necessary unless an access token is needed for some external purpose.\n* @returns {Promise} A Promise that fulfills with the access token when this request is complete\n* @memberof snoowrap\n* @instance\n* @example r.updateAccessToken()\n*/ function updateAccessToken() {\n    var _this2 = this;\n    // If the current access token is missing or expired, and it is possible to get a new one, do so.\n    if ((!this.accessToken || Date.now() > this.tokenExpiration) && (this.refreshToken || this.username && this.password)) {\n        return this.credentialedClientRequest({\n            method: \"post\",\n            uri: \"api/v1/access_token\",\n            form: this.refreshToken ? {\n                grant_type: \"refresh_token\",\n                refresh_token: this.refreshToken\n            } : {\n                grant_type: \"password\",\n                username: this.username,\n                password: this.password\n            }\n        }).then(function(tokenInfo) {\n            _this2.accessToken = tokenInfo.access_token;\n            _this2.tokenExpiration = Date.now() + tokenInfo.expires_in * 1000;\n            if (tokenInfo.error === \"invalid_grant\") {\n                throw new Error('\"Invalid grant\" error returned from reddit. (You might have incorrect credentials.)');\n            } else if (tokenInfo.error_description !== undefined) {\n                throw new Error(\"Reddit returned an error: \".concat(tokenInfo.error, \": \").concat(tokenInfo.error_description));\n            } else if (tokenInfo.error !== undefined) {\n                throw new Error(\"Reddit returned an error: \".concat(tokenInfo.error));\n            }\n            _this2.scope = tokenInfo.scope.split(\" \");\n            return _this2.accessToken;\n        });\n    } // Otherwise, just return the existing token.\n    return _Promise.default.resolve(this.accessToken);\n}\n/**\n* @function\n* @name rawRequest\n* @summary Sends an HTTP request\n* @desc **Note**: This function is called internally whenever snoowrap makes a request. You generally should not call this\n* function directly; use {@link snoowrap#oauthRequest} or another snoowrap function instead.\n*\n* This method allows snoowrap's request behavior to be customized via subclassing. If you create a snoowrap subclass and shadow\n* this method, all requests from snoowrap will pass through it.\n*\n* To ensure that all other snoowrap methods work correctly, the API for a shadowed version of this method must match the API for\n* the original `makeRequest` method. This method is based on the API of the\n* [request-promise](https://www.npmjs.com/package/request-promise) library, so if you do create a subclass, it might be helpful\n* to use `request-promise` internally. This will ensure that the API works correctly, so that you don't have to reimplement this\n* function's API from scratch.\n*\n* @param {object} options Options for the request\n* @param {boolean} options.json If `true`, the `Content-Type: application/json` header is added, and the response body will be\n* parsed as JSON automatically.\n* @param {string} options.baseUrl The base URL that a request should be sent to\n* @param {string} options.uri The uri that a request should be sent to, using the provided `baseUrl`.\n* @param {string} options.method='GET' Method for the request\n* @param {object} options.headers Headers for the request\n* @param {object} [options.qs] Querystring parameters for the request\n* @param {object} [options.form] Form data for the request. If provided, the `Content-Type: application/x-www-form-urlencoded`\n* header is set, and the provided object is serialized into URL-encoded form data in the request body.\n* @param {object} [options.formData] Multipart form data for the request. If provided, the `Content-Type: multipart/form-data`\n* header is set, and the provided object is serialized as multipart form data.\n* @param {object} [options.body] The body of the request. Should be converted to a string with JSON.stringify(). This is ignored\n* for GET requests, or of `options.form` or `options.formData` are provided.\n* @param {Function} [options.transform] A function that is called before the response Promise fulfills. Accepts two parameters:\n* `response.body` and `response`. This function should be called regardless of the status code of the response, and the returned\n* Promise from `makeRequest` should fulfill with its return value.\n* @param {boolean} [options.resolveWithFullResponse=false] If `true`, a Promise for the entire response is returned. If `false`,\n* a Promise for only the response body is returned. This is ignored if an `options.transform` function is provided.\n* @returns {Promise} A Promise for a response object. Depending on `options.transform` and `options.resolveWithFullResponse`,\n* the Promise should settle with either the response object itself, the body of the response, or the value returned by\n* `options.transform`. The Promise should be fulfilled if the status code is between 200 and 299, inclusive, and reject\n* otherwise. (If a redirect is returned from the server, the function should follow the redirect if possible, otherwise reject\n* with an error.) A response object has 4 properties: `statusCode` (number) the status code of the response, `body` (object)\n* the body of the response, `headers` (object) the parsed response headers, and `request` (object) an object of the form\n* `{method: 'GET', uri: {href: 'https://oauth.reddit.com/full/url'}}` representing information about the original request.\n* @memberof snoowrap\n* @instance\n* @example\n*\n* const snoowrap = require('snoowrap');\n*\n* class SnoowrapSubclass extends snoowrap {\n*   rawRequest(options) {\n*     // do custom behavior with `options` if you want, then call the regular rawRequest function\n*     console.log(`made a request with options:`);\n*     console.log(options);\n*     return super.rawRequest(options)\n*   }\n* }\n*\n* const request = require('request-promise');\n*\n* class AnotherSnoowrapSubclass extends snoowrap {\n*   rawRequest(options) {\n*     // send all requests through a proxy\n*     return request(Object.assign(options, {proxy: 'https://example.com'}))\n*   }\n* }\n*/ var rawRequest = typeof XMLHttpRequest !== \"undefined\" ? __webpack_require__(/*! ./xhr */ \"(rsc)/./node_modules/snoowrap/dist/xhr.js\") : (__webpack_require__(/*! request-promise */ \"(rsc)/./node_modules/request-promise/lib/rp.js\").defaults)({\n    gzip: true\n});\nexports.rawRequest = rawRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/request_handler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/snoowrap.js":
/*!************************************************!*\
  !*** ./node_modules/snoowrap/dist/snoowrap.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar _lodash = __webpack_require__(/*! lodash */ \"lodash\");\nvar _Promise = _interopRequireDefault(__webpack_require__(/*! ./Promise.js */ \"(rsc)/./node_modules/snoowrap/dist/Promise.js\"));\nvar _promiseChains = _interopRequireDefault(__webpack_require__(/*! promise-chains */ \"(rsc)/./node_modules/promise-chains/index.js\"));\nvar _util = _interopRequireDefault(__webpack_require__(/*! util */ \"util\"));\nvar requestHandler = _interopRequireWildcard(__webpack_require__(/*! ./request_handler.js */ \"(rsc)/./node_modules/snoowrap/dist/request_handler.js\"));\nvar _constants = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/snoowrap/dist/constants.js\");\nvar errors = _interopRequireWildcard(__webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/snoowrap/dist/errors.js\"));\nvar _helpers = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/snoowrap/dist/helpers.js\");\nvar _create_config = _interopRequireDefault(__webpack_require__(/*! ./create_config.js */ \"(rsc)/./node_modules/snoowrap/dist/create_config.js\"));\nvar objects = _interopRequireWildcard(__webpack_require__(/*! ./objects/index.js */ \"(rsc)/./node_modules/snoowrap/dist/objects/index.js\"));\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for(var key in obj){\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n                    if (desc.get || desc.set) {\n                        Object.defineProperty(newObj, key, desc);\n                    } else {\n                        newObj[key] = obj[key];\n                    }\n                }\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(source, true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(source).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar api_type = \"json\";\n/** The class for a snoowrap requester.\n * A requester is the base object that is used to fetch content from reddit. Each requester contains a single set of OAuth\n tokens.\n\n If constructed with a refresh token, a requester will be able to repeatedly generate access tokens as necessary, without any\n further user intervention. After making at least one request, a requester will have the `access_token` property, which specifies\n the access token currently in use. It will also have a few additional properties such as `scope` (an array of scope strings)\n and `ratelimitRemaining` (the number of requests remaining for the current 10-minute interval, in compliance with reddit's\n [API rules](https://github.com/reddit/reddit/wiki/API).) These properties primarily exist for internal use, but they are\n exposed since they are useful externally as well.\n */ var snoowrap = class snoowrap {\n    /**\n   * @summary Constructs a new requester.\n   * @desc You should use the snoowrap constructor if you are able to authorize a reddit account in advance (e.g. for a Node.js\n   script that always uses the same account). If you aren't able to authorize in advance (e.g. acting through an arbitrary user's\n   account while running snoowrap in a browser), then you should use {@link snoowrap.getAuthUrl} and\n   {@link snoowrap.fromAuthCode} instead.\n   *\n   * To edit snoowrap specific settings, see {@link snoowrap#config}.\n   *\n   * snoowrap supports several different options for pre-existing authentication:\n   * 1. *Refresh token*: To authenticate with a refresh token, pass an object with the properties `userAgent`, `clientId`,\n   `clientSecret`, and `refreshToken` to the snoowrap constructor. You will need to get the refresh token from reddit\n   beforehand. A script to automatically generate refresh tokens for you can be found\n   [here](https://github.com/not-an-aardvark/reddit-oauth-helper).\n   * 1. *Username/password*: To authenticate with a username and password, pass an object with the properties `userAgent`,\n   `clientId`, `clientSecret`, `username`, and `password` to the snoowrap constructor. Note that username/password\n   authentication is only possible for `script`-type apps.\n   * 1. *Access token*: To authenticate with an access token, pass an object with the properties `userAgent` and `accessToken`\n   to the snoowrap constructor. Note that all access tokens expire one hour after being generated, so this method is\n   not recommended for long-term use.\n   * @param {object} options An object containing authentication options. This should always have the property `userAgent`. It\n   must also contain some combination of credentials (see above)\n   * @param {string} options.userAgent A unique description of what your app does. This argument is not necessary when snoowrap\n   is running in a browser.\n   * @param {string} [options.clientId] The client ID of your app (assigned by reddit)\n   * @param {string} [options.clientSecret] The client secret of your app (assigned by reddit). If you are using a refresh token\n   with an installed app (which does not have a client secret), pass an empty string as your `clientSecret`.\n   * @param {string} [options.username] The username of the account to access\n   * @param {string} [options.password] The password of the account to access\n   * @param {string} [options.refreshToken] A refresh token for your app\n   * @param {string} [options.accessToken] An access token for your app\n   */ constructor(){\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, user_agent = _ref.user_agent, _ref$userAgent = _ref.userAgent, userAgent = _ref$userAgent === void 0 ? user_agent : _ref$userAgent, client_id = _ref.client_id, _ref$clientId = _ref.clientId, clientId = _ref$clientId === void 0 ? client_id : _ref$clientId, client_secret = _ref.client_secret, _ref$clientSecret = _ref.clientSecret, clientSecret = _ref$clientSecret === void 0 ? client_secret : _ref$clientSecret, refresh_token = _ref.refresh_token, _ref$refreshToken = _ref.refreshToken, refreshToken = _ref$refreshToken === void 0 ? refresh_token : _ref$refreshToken, access_token = _ref.access_token, _ref$accessToken = _ref.accessToken, accessToken = _ref$accessToken === void 0 ? access_token : _ref$accessToken, username = _ref.username, password = _ref.password;\n        if (!userAgent && !_helpers.isBrowser) {\n            return (0, _helpers.requiredArg)(\"userAgent\");\n        }\n        if ((!accessToken || typeof accessToken !== \"string\") && (clientId === undefined || clientSecret === undefined || typeof refreshToken !== \"string\") && (clientId === undefined || clientSecret === undefined || username === undefined || password === undefined)) {\n            throw new errors.NoCredentialsError();\n        }\n        if (_helpers.isBrowser) {\n            this.userAgent = global.navigator.userAgent;\n        }\n        (0, _lodash.defaults)(this, {\n            userAgent,\n            clientId,\n            clientSecret,\n            refreshToken,\n            accessToken,\n            username,\n            password\n        }, {\n            clientId: null,\n            clientSecret: null,\n            refreshToken: null,\n            accessToken: null,\n            username: null,\n            password: null,\n            ratelimitRemaining: null,\n            ratelimitExpiration: null,\n            tokenExpiration: null,\n            scope: null,\n            _config: (0, _create_config.default)(),\n            _nextRequestTimestamp: -Infinity\n        });\n        (0, _helpers.addSnakeCaseShadowProps)(this);\n    }\n    /**\n   * @summary Gets an authorization URL, which allows a user to authorize access to their account\n   * @desc This create a URL where a user can authorize an app to act through their account. If the user visits the returned URL\n   in a web browser, they will see a page that looks like [this](https://i.gyazo.com/0325534f38b78c1dbd4c84d690dda6c2.png). If\n   the user clicks \"Allow\", they will be redirected to your `redirectUri`, with a `code` querystring parameter containing an\n   * *authorization code*. If this code is passed to {@link snoowrap.fromAuthCode}, you can create a requester to make\n   requests on behalf of the user.\n   *\n   * The main use-case here is for running snoowrap in a browser. You can generate a URL, send the user there, and then continue\n   after the user authenticates on reddit and is redirected back.\n   *\n   * @param {object} options\n   * @param {string} options.clientId The client ID of your app (assigned by reddit). If your code is running clientside in a\n   browser, using an \"Installed\" app type is recommended.\n   * @param {string[]} options.scope An array of scopes (permissions on the user's account) to request on the authentication\n   page. A list of possible scopes can be found [here](https://www.reddit.com/api/v1/scopes). You can also get them on-the-fly\n   with {@link snoowrap#getOauthScopeList}.\n   * @param {string} options.redirectUri The URL where the user should be redirected after authenticating. This **must** be the\n   same as the redirect URI that is configured for the reddit app. (If there is a mismatch, the returned URL will display an\n   error page instead of an authentication form.)\n   * @param {boolean} [options.permanent=true] If `true`, the app will have indefinite access to the user's account. If `false`,\n   access to the user's account will expire after 1 hour.\n   * @param {string} [options.state] A string that can be used to verify a user after they are redirected back to the site. When\n   the user is redirected from reddit, to the redirect URI after authenticating, the resulting URI will have this same `state`\n   value in the querystring. (See [here](http://www.twobotechnologies.com/blog/2014/02/importance-of-state-in-oauth2.html) for\n   more information on how to use the `state` value.)\n   * @param {string} [options.endpointDomain='reddit.com'] The endpoint domain for the URL. If the user is authenticating on\n   reddit.com (as opposed to some other site with a reddit-like API), you can omit this value.\n   * @returns {string} A URL where the user can authenticate with the given options\n   * @example\n   *\n   * var authenticationUrl = snoowrap.getAuthUrl({\n   *   clientId: 'foobarbazquuux',\n   *   scope: ['identity', 'wikiread', 'wikiedit'],\n   *   redirectUri: 'https://example.com/reddit_callback',\n   *   permanent: false,\n   *   state: 'fe211bebc52eb3da9bef8db6e63104d3' // a random string, this could be validated when the user is redirected back\n   * });\n   * // --> 'https://www.reddit.com/api/v1/authorize?client_id=foobarbaz&response_type=code&state= ...'\n   *\n   * window.location.href = authenticationUrl; // send the user to the authentication url\n   */ static getAuthUrl(_ref2) {\n        var _ref2$clientId = _ref2.clientId, clientId = _ref2$clientId === void 0 ? (0, _helpers.requiredArg)(\"clientId\") : _ref2$clientId, _ref2$scope = _ref2.scope, scope = _ref2$scope === void 0 ? (0, _helpers.requiredArg)(\"scope\") : _ref2$scope, _ref2$redirectUri = _ref2.redirectUri, redirectUri = _ref2$redirectUri === void 0 ? (0, _helpers.requiredArg)(\"redirectUri\") : _ref2$redirectUri, _ref2$permanent = _ref2.permanent, permanent = _ref2$permanent === void 0 ? true : _ref2$permanent, _ref2$state = _ref2.state, state = _ref2$state === void 0 ? \"_\" : _ref2$state, _ref2$endpointDomain = _ref2.endpointDomain, endpointDomain = _ref2$endpointDomain === void 0 ? \"reddit.com\" : _ref2$endpointDomain;\n        if (!(Array.isArray(scope) && scope.length && scope.every(function(scopeValue) {\n            return scopeValue && typeof scopeValue === \"string\";\n        }))) {\n            throw new TypeError(\"Missing `scope` argument; a non-empty list of OAuth scopes must be provided\");\n        }\n        return \"\\n      https://www.\".concat(endpointDomain, \"/api/v1/authorize?\\n      client_id=\").concat(encodeURIComponent(clientId), \"\\n      &response_type=code\\n      &state=\").concat(encodeURIComponent(state), \"\\n      &redirect_uri=\").concat(encodeURIComponent(redirectUri), \"\\n      &duration=\").concat(permanent ? \"permanent\" : \"temporary\", \"\\n      &scope=\").concat(encodeURIComponent(scope.join(\" \")), \"\\n    \").replace(/\\s/g, \"\");\n    }\n    /**\n   * @summary Creates a snoowrap requester from an authorization code.\n   * @desc An authorization code is the `code` value that appears in the querystring after a user authenticates with reddit and\n   is redirected. For more information, see {@link snoowrap.getAuthUrl}.\n   *\n   * The main use-case for this function is for running snoowrap in a browser. You can generate a URL with\n   {@link snoowrap.getAuthUrl} and send the user to that URL, and then use this function to create a requester when\n   the user is redirected back with an authorization code.\n   * @param {object} options\n   * @param {string} options.code The authorization code\n   * @param {string} options.userAgent A unique description of what your app does. This argument is not necessary when snoowrap\n   is running in a browser.\n   * @param {string} options.clientId The client ID of your app (assigned by reddit). If your code is running clientside in a\n   browser, using an \"Installed\" app type is recommended.\n   * @param {string} [options.clientSecret] The client secret of your app. If your app has the \"Installed\" app type, omit\n   this parameter.\n   * @param {string} options.redirectUri The redirect URI that is configured for the reddit app.\n   * @param {string} [options.endpointDomain='reddit.com'] The endpoint domain that the returned requester should be configured\n   to use. If the user is authenticating on reddit.com (as opposed to some other site with a reddit-like API), you can omit this\n   value.\n   * @returns {Promise<snoowrap>} A Promise that fulfills with a `snoowrap` instance\n   * @example\n   *\n   * // Get the `code` querystring param (assuming the user was redirected from reddit)\n   * var code = new URL(window.location.href).searchParams.get('code');\n   *\n   * snoowrap.fromAuthCode({\n   *   code: code,\n   *   userAgent: 'My app',\n   *   clientId: 'foobarbazquuux',\n   *   redirectUri: 'example.com'\n   * }).then(r => {\n   *   // Now we have a requester that can access reddit through the user's account\n   *   return r.getHot().then(posts => {\n   *     // do something with posts from the front page\n   *   });\n   * })\n   */ static fromAuthCode(_ref3) {\n        var _this = this;\n        var _ref3$code = _ref3.code, code = _ref3$code === void 0 ? (0, _helpers.requiredArg)(\"code\") : _ref3$code, _ref3$userAgent = _ref3.userAgent, userAgent = _ref3$userAgent === void 0 ? _helpers.isBrowser ? global.navigator.userAgent : (0, _helpers.requiredArg)(\"userAgent\") : _ref3$userAgent, _ref3$clientId = _ref3.clientId, clientId = _ref3$clientId === void 0 ? (0, _helpers.requiredArg)(\"clientId\") : _ref3$clientId, clientSecret = _ref3.clientSecret, _ref3$redirectUri = _ref3.redirectUri, redirectUri = _ref3$redirectUri === void 0 ? (0, _helpers.requiredArg)(\"redirectUri\") : _ref3$redirectUri, _ref3$endpointDomain = _ref3.endpointDomain, endpointDomain = _ref3$endpointDomain === void 0 ? \"reddit.com\" : _ref3$endpointDomain;\n        return this.prototype.credentialedClientRequest.call({\n            userAgent,\n            clientId,\n            clientSecret,\n            // Use `this.prototype.rawRequest` function to allow for custom `rawRequest` method usage in subclasses.\n            rawRequest: this.prototype.rawRequest\n        }, {\n            method: \"post\",\n            baseUrl: \"https://www.\".concat(endpointDomain, \"/\"),\n            uri: \"api/v1/access_token\",\n            form: {\n                grant_type: \"authorization_code\",\n                code,\n                redirect_uri: redirectUri\n            }\n        }).then(function(response) {\n            if (response.error) {\n                throw new errors.RequestError(\"API Error: \".concat(response.error, \" - \").concat(response.error_description));\n            } // Use `new this` instead of `new snoowrap` to ensure that subclass instances can be returned\n            var requester = new _this(_objectSpread({\n                userAgent,\n                clientId,\n                clientSecret\n            }, response));\n            requester.config({\n                endpointDomain\n            });\n            return requester;\n        });\n    }\n    /**\n   * @summary Returns the grant types available for app-only authentication\n   * @desc Per the Reddit API OAuth docs, there are two different grant types depending on whether the app is an installed client\n   * or a confidential client such as a web app or string. This getter returns the possible values for the \"grant_type\" field\n   * in application-only auth.\n   * @returns {object} The enumeration of possible grant_type values\n   */ static get grantType() {\n        return {\n            CLIENT_CREDENTIALS: \"client_credentials\",\n            INSTALLED_CLIENT: \"https://oauth.reddit.com/grants/installed_client\"\n        };\n    }\n    /**\n  * @summary Creates a snoowrap requester from a \"user-less\" Authorization token\n  * @desc In some cases, 3rd party app clients may wish to make API requests without a user context. App clients can request\n  * a \"user-less\" Authorization token via either the standard client_credentials grant, or the reddit specific\n  * extension to this grant, https://oauth.reddit.com/grants/installed_client. Which grant type an app uses depends on\n  * the app-type and its use case.\n  * @param {object} options\n  * @param {string} options.userAgent A unique description of what your app does. This argument is not necessary when snoowrap\n  is running in a browser.\n  * @param {string} options.clientId The client ID of your app (assigned by reddit). If your code is running clientside in a\n  * browser, using an \"Installed\" app type is recommended.\n  * @param {string} [options.clientSecret] The client secret of your app. Only required for \"client_credentials\" grant type.\n  * @param {string} [options.deviceId] A unique, per-device ID generated by your client. Only required\n  * for \"Installed\" grant type, needs to be between 20-30 characters long. From the reddit docs: \"reddit *may* choose to use\n  * this ID to generate aggregate data about user counts. Clients that wish to remain anonymous should use the value\n  * DO_NOT_TRACK_THIS_DEVICE.\"\n  * @param {string} [options.grantType=snoowrap.grantType.INSTALLED_CLIENT] The type of \"user-less\"\n  * token to use {@link snoowrap.grantType}\n  * @param {boolean} [options.permanent=true] If `true`, the app will have indefinite access. If `false`,\n  access will expire after 1 hour.\n  * @param {string} [options.endpointDomain='reddit.com'] The endpoint domain that the returned requester should be configured\n  to use. If the user is authenticating on reddit.com (as opposed to some other site with a reddit-like API), you can omit this\n  value.\n  * @returns {Promise<snoowrap>} A Promise that fulfills with a `snoowrap` instance\n  * @example\n  *\n  * snoowrap.fromApplicationOnlyAuth({\n  *   userAgent: 'My app',\n  *   clientId: 'foobarbazquuux',\n  *   deviceId: 'unique id between 20-30 chars',\n  *   grantType: snoowrap.grantType.INSTALLED_CLIENT\n  * }).then(r => {\n  *   // Now we have a requester that can access reddit through a \"user-less\" Auth token\n  *   return r.getHot().then(posts => {\n  *     // do something with posts from the front page\n  *   });\n  * })\n  *\n  * snoowrap.fromApplicationOnlyAuth({\n  *   userAgent: 'My app',\n  *   clientId: 'foobarbazquuux',\n  *   clientSecret: 'your web app secret',\n  *   grantType: snoowrap.grantType.CLIENT_CREDENTIALS\n  * }).then(r => {\n  *   // Now we have a requester that can access reddit through a \"user-less\" Auth token\n  *   return r.getHot().then(posts => {\n  *     // do something with posts from the front page\n  *   });\n  * })\n  */ static fromApplicationOnlyAuth(_ref4) {\n        var _this2 = this;\n        var _ref4$userAgent = _ref4.userAgent, userAgent = _ref4$userAgent === void 0 ? _helpers.isBrowser ? global.navigator.userAgent : (0, _helpers.requiredArg)(\"userAgent\") : _ref4$userAgent, _ref4$clientId = _ref4.clientId, clientId = _ref4$clientId === void 0 ? (0, _helpers.requiredArg)(\"clientId\") : _ref4$clientId, clientSecret = _ref4.clientSecret, deviceId = _ref4.deviceId, _ref4$grantType = _ref4.grantType, grantType = _ref4$grantType === void 0 ? snoowrap.grantType.INSTALLED_CLIENT : _ref4$grantType, _ref4$permanent = _ref4.permanent, permanent = _ref4$permanent === void 0 ? true : _ref4$permanent, _ref4$endpointDomain = _ref4.endpointDomain, endpointDomain = _ref4$endpointDomain === void 0 ? \"reddit.com\" : _ref4$endpointDomain;\n        return this.prototype.credentialedClientRequest.call({\n            clientId,\n            clientSecret,\n            // Use `this.prototype.rawRequest` function to allow for custom `rawRequest` method usage in subclasses.\n            rawRequest: this.prototype.rawRequest\n        }, {\n            method: \"post\",\n            baseUrl: \"https://www.\".concat(endpointDomain, \"/\"),\n            uri: \"api/v1/access_token\",\n            form: {\n                grant_type: grantType,\n                device_id: deviceId,\n                duration: permanent ? \"permanent\" : \"temporary\"\n            }\n        }).then(function(response) {\n            if (response.error) {\n                throw new errors.RequestError(\"API Error: \".concat(response.error, \" - \").concat(response.error_description));\n            } // Use `new this` instead of `new snoowrap` to ensure that subclass instances can be returned\n            var requester = new _this2(_objectSpread({\n                userAgent,\n                clientId,\n                clientSecret\n            }, response));\n            requester.config({\n                endpointDomain\n            });\n            return requester;\n        });\n    }\n    _newObject(objectType, content) {\n        var _hasFetched = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        return Array.isArray(content) ? content : new snoowrap.objects[objectType](content, this, _hasFetched);\n    }\n    /**\n   * @summary Retrieves or modifies the configuration options for this snoowrap instance.\n   * @param {object} [options] A map of `{[config property name]: value}`. Note that any omitted config properties will simply\n   retain whatever value they had previously. (In other words, if you only want to change one property, you only need to put\n   that one property in this parameter. To get the current configuration without modifying anything, simply omit this\n   parameter.)\n   * @param {string} [options.endpointDomain='reddit.com'] The endpoint where requests should be sent\n   * @param {Number} [options.requestDelay=0] A minimum delay, in milliseconds, to enforce between API calls. If multiple\n   api calls are requested during this timespan, they will be queued and sent one at a time. Setting this to more than 1000 will\n   ensure that reddit's ratelimit is never reached, but it will make things run slower than necessary if only a few requests\n   are being sent. If this is set to zero, snoowrap will not enforce any delay between individual requests. However, it will\n   still refuse to continue if reddit's enforced ratelimit (600 requests per 10 minutes) is exceeded.\n   * @param {Number} [options.requestTimeout=30000] A timeout for all OAuth requests, in milliseconds. If the reddit server\n   fails to return a response within this amount of time, the Promise will be rejected with a timeout error.\n   * @param {boolean} [options.continueAfterRatelimitError=false] Determines whether snoowrap should queue API calls if\n   reddit's ratelimit is exceeded. If set to `true` when the ratelimit is exceeded, snoowrap will queue all further requests,\n   and will attempt to send them again after the current ratelimit period expires (which happens every 10 minutes). If set\n   to `false`, snoowrap will simply throw an error when reddit's ratelimit is exceeded.\n   * @param {Number[]} [options.retryErrorCodes=[502, 503, 504, 522]] If reddit responds to an idempotent request with one of\n   these error codes, snoowrap will retry the request, up to a maximum of `max_retry_attempts` requests in total. (These\n   errors usually indicate that there was an temporary issue on reddit's end, and retrying the request has a decent chance of\n   success.) This behavior can be disabled by simply setting this property to an empty array.\n   * @param {Number} [options.maxRetryAttempts=3] See `retryErrorCodes`.\n   * @param {boolean} [options.warnings=true] snoowrap may occasionally log warnings, such as deprecation notices, to the\n   console. These can be disabled by setting this to `false`.\n   * @param {boolean} [options.debug=false] If set to true, snoowrap will print out potentially-useful information for debugging\n   purposes as it runs.\n   * @param {object} [options.logger=console] By default, snoowrap will log any warnings and debug output to the console.\n   A custom logger object may be supplied via this option; it must expose `warn`, `info`, `debug`, and `trace` functions.\n   * @param {boolean} [options.proxies=true] Setting this to `false` disables snoowrap's method-chaining feature. This causes\n   the syntax for using snoowrap to become a bit heavier, but allows for consistency between environments that support the ES6\n   `Proxy` object and environments that don't. This option is a no-op in environments that don't support the `Proxy` object,\n   since method chaining is always disabled in those environments. Note, changing this setting must be done before making\n   any requests.\n   * @returns {object} An updated Object containing all of the configuration values\n   * @example\n   *\n   * r.config({requestDelay: 1000, warnings: false});\n   * // sets the request delay to 1000 milliseconds, and suppresses warnings.\n   */ config() {\n        var _this3 = this;\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var invalidKey = Object.keys(options).find(function(key) {\n            return !(key in _this3._config);\n        });\n        if (invalidKey) {\n            throw new TypeError(\"Invalid config option '\".concat(invalidKey, \"'\"));\n        }\n        return Object.assign(this._config, options);\n    }\n    _warn() {\n        if (this._config.warnings) {\n            var _this$_config$logger;\n            (_this$_config$logger = this._config.logger).warn.apply(_this$_config$logger, arguments);\n        }\n    }\n    _debug() {\n        if (this._config.debug) {\n            var _this$_config$logger2;\n            (_this$_config$logger2 = this._config.logger).debug.apply(_this$_config$logger2, arguments);\n        }\n    }\n    get _promiseWrap() {\n        return this._config.proxies ? _promiseChains.default : identity;\n    }\n    /**\n   * @summary Gets information on a reddit user with a given name.\n   * @param {string} name - The user's username\n   * @returns {RedditUser} An unfetched RedditUser object for the requested user\n   * @example\n   *\n   * r.getUser('not_an_aardvark')\n   * // => RedditUser { name: 'not_an_aardvark' }\n   * r.getUser('not_an_aardvark').link_karma.then(console.log)\n   * // => 6\n   */ getUser(name) {\n        return this._newObject(\"RedditUser\", {\n            name: (name + \"\").replace(/^\\/?u\\//, \"\")\n        });\n    }\n    /**\n   * @summary Gets information on a comment with a given id.\n   * @param {string} commentId - The base36 id of the comment\n   * @returns {Comment} An unfetched Comment object for the requested comment\n   * @example\n   *\n   * r.getComment('c0b6xx0')\n   * // => Comment { name: 't1_c0b6xx0' }\n   * r.getComment('c0b6xx0').author.name.then(console.log)\n   * // => 'Kharos'\n   */ getComment(commentId) {\n        return this._newObject(\"Comment\", {\n            name: (0, _helpers.addFullnamePrefix)(commentId, \"t1_\")\n        });\n    }\n    /**\n   * @summary Gets information on a given subreddit.\n   * @param {string} displayName - The name of the subreddit (e.g. 'AskReddit')\n   * @returns {Subreddit} An unfetched Subreddit object for the requested subreddit\n   * @example\n   *\n   * r.getSubreddit('AskReddit')\n   * // => Subreddit { display_name: 'AskReddit' }\n   * r.getSubreddit('AskReddit').created_utc.then(console.log)\n   * // => 1201233135\n   */ getSubreddit(displayName) {\n        return this._newObject(\"Subreddit\", {\n            display_name: displayName.replace(/^\\/?r\\//, \"\")\n        });\n    }\n    /**\n   * @summary Gets information on a given submission.\n   * @param {string} submissionId - The base36 id of the submission\n   * @returns {Submission} An unfetched Submission object for the requested submission\n   * @example\n   *\n   * r.getSubmission('2np694')\n   * // => Submission { name: 't3_2np694' }\n   * r.getSubmission('2np694').title.then(console.log)\n   * // => 'What tasty food would be distusting if eaten over rice?'\n   */ getSubmission(submissionId) {\n        return this._newObject(\"Submission\", {\n            name: (0, _helpers.addFullnamePrefix)(submissionId, \"t3_\")\n        });\n    }\n    /**\n   * @summary Gets a private message by ID.\n   * @param {string} messageId The base36 ID of the message\n   * @returns {PrivateMessage} An unfetched PrivateMessage object for the requested message\n   * @example\n   *\n   * r.getMessage('51shnw')\n   * // => PrivateMessage { name: 't4_51shnw' }\n   * r.getMessage('51shnw').subject.then(console.log)\n   * // => 'Example'\n   * // See here for a screenshot of the PM in question https://i.gyazo.com/24f3b97e55b6ff8e3a74cb026a58b167.png\n   */ getMessage(messageId) {\n        return this._newObject(\"PrivateMessage\", {\n            name: (0, _helpers.addFullnamePrefix)(messageId, \"t4_\")\n        });\n    }\n    /**\n   * Gets a livethread by ID.\n   * @param {string} threadId The base36 ID of the livethread\n   * @returns {LiveThread} An unfetched LiveThread object\n   * @example\n   *\n   * r.getLivethread('whrdxo8dg9n0')\n   * // => LiveThread { id: 'whrdxo8dg9n0' }\n   * r.getLivethread('whrdxo8dg9n0').nsfw.then(console.log)\n   * // => false\n   */ getLivethread(threadId) {\n        return this._newObject(\"LiveThread\", {\n            id: (0, _helpers.addFullnamePrefix)(threadId, \"LiveUpdateEvent_\").slice(16)\n        });\n    }\n    /**\n   * @summary Gets information on the requester's own user profile.\n   * @returns {RedditUser} A RedditUser object corresponding to the requester's profile\n   * @example\n   *\n   * r.getMe().then(console.log);\n   * // => RedditUser { is_employee: false, has_mail: false, name: 'snoowrap_testing', ... }\n   */ getMe() {\n        var _this4 = this;\n        return this._get({\n            uri: \"api/v1/me\"\n        }).then(function(result) {\n            _this4._ownUserInfo = _this4._newObject(\"RedditUser\", result, true);\n            return _this4._ownUserInfo;\n        });\n    }\n    _getMyName() {\n        return _Promise.default.resolve(this._ownUserInfo ? this._ownUserInfo.name : this.getMe().get(\"name\"));\n    }\n    /**\n   * @summary Gets a distribution of the requester's own karma distribution by subreddit.\n   * @returns {Promise} A Promise for an object with karma information\n   * @example\n   *\n   * r.getKarma().then(console.log)\n   * // => [\n   * //  { sr: Subreddit { display_name: 'redditdev' }, comment_karma: 16, link_karma: 1 },\n   * //  { sr: Subreddit { display_name: 'programming' }, comment_karma: 2, link_karma: 1 },\n   * //  ...\n   * // ]\n   */ getKarma() {\n        return this._get({\n            uri: \"api/v1/me/karma\"\n        });\n    }\n    /**\n   * @summary Gets information on the user's current preferences.\n   * @returns {Promise} A promise for an object containing the user's current preferences\n   * @example\n   *\n   * r.getPreferences().then(console.log)\n   * // => { default_theme_sr: null, threaded_messages: true, hide_downs: false, ... }\n   */ getPreferences() {\n        return this._get({\n            uri: \"api/v1/me/prefs\"\n        });\n    }\n    /**\n   * @summary Updates the user's current preferences.\n   * @param {object} updatedPreferences An object of the form {[some preference name]: 'some value', ...}. Any preference\n   * not included in this object will simply retain its current value.\n   * @returns {Promise} A Promise that fulfills when the request is complete\n   * @example\n   *\n   * r.updatePreferences({threaded_messages: false, hide_downs: true})\n   * // => { default_theme_sr: null, threaded_messages: false,hide_downs: true, ... }\n   * // (preferences updated on reddit)\n   */ updatePreferences(updatedPreferences) {\n        return this._patch({\n            uri: \"api/v1/me/prefs\",\n            body: updatedPreferences\n        });\n    }\n    /**\n   * @summary Gets the currently-authenticated user's trophies.\n   * @returns {Promise} A TrophyList containing the user's trophies\n   * @example\n   *\n   * r.getMyTrophies().then(console.log)\n   * // => TrophyList { trophies: [\n   * //   Trophy { icon_70: 'https://s3.amazonaws.com/redditstatic/award/verified_email-70.png',\n   * //     description: null,\n   * //     url: null,\n   * //     icon_40: 'https://s3.amazonaws.com/redditstatic/award/verified_email-40.png',\n   * //     award_id: 'o',\n   * //     id: '16fn29',\n   * //     name: 'Verified Email'\n   * //   }\n   * // ] }\n   */ getMyTrophies() {\n        return this._get({\n            uri: \"api/v1/me/trophies\"\n        });\n    }\n    /**\n   * @summary Gets the list of the currently-authenticated user's friends.\n   * @returns {Promise} A Promise that resolves with a list of friends\n   * @example\n   *\n   * r.getFriends().then(console.log)\n   * // => [ [ RedditUser { date: 1457927963, name: 'not_an_aardvark', id: 't2_k83md' } ], [] ]\n   */ getFriends() {\n        return this._get({\n            uri: \"prefs/friends\"\n        });\n    }\n    /**\n   * @summary Gets the list of people that the currently-authenticated user has blocked.\n   * @returns {Promise} A Promise that resolves with a list of blocked users\n   * @example\n   *\n   * r.getBlockedUsers().then(console.log)\n   * // => [ RedditUser { date: 1457928120, name: 'actually_an_aardvark', id: 't2_q3519' } ]\n   */ getBlockedUsers() {\n        return this._get({\n            uri: \"prefs/blocked\"\n        });\n    }\n    /**\n   * @summary Determines whether the currently-authenticated user needs to fill out a captcha in order to submit content.\n   * @returns {Promise} A Promise that resolves with a boolean value\n   * @example\n   *\n   * r.checkCaptchaRequirement().then(console.log)\n   * // => false\n   */ checkCaptchaRequirement() {\n        return this._get({\n            uri: \"api/needs_captcha\"\n        });\n    }\n    /**\n   * @summary Gets the identifier (a hex string) for a new captcha image.\n   * @returns {Promise} A Promise that resolves with a string\n   * @example\n   *\n   * r.getNewCaptchaIdentifier().then(console.log)\n   * // => 'o5M18uy4mk0IW4hs0fu2GNPdXb1Dxe9d'\n   */ getNewCaptchaIdentifier() {\n        return this._post({\n            uri: \"api/new_captcha\",\n            form: {\n                api_type\n            }\n        }).then(function(res) {\n            return res.json.data.iden;\n        });\n    }\n    /**\n   * @summary Gets an image for a given captcha identifier.\n   * @param {string} identifier The captcha identifier.\n   * @returns {Promise} A string containing raw image data in PNG format\n   * @example\n   *\n   * r.getCaptchaImage('o5M18uy4mk0IW4hs0fu2GNPdXb1Dxe9d').then(console.log)\n   // => (A long, incoherent string representing the image in PNG format)\n   */ getCaptchaImage(identifier) {\n        return this._get({\n            uri: \"captcha/\".concat(identifier)\n        });\n    }\n    /**\n   * @summary Gets an array of categories that items can be saved in. (Requires reddit gold)\n   * @returns {Promise} An array of categories\n   * @example\n   *\n   * r.getSavedCategories().then(console.log)\n   * // => [ { category: 'cute cat pictures' }, { category: 'interesting articles' } ]\n   */ getSavedCategories() {\n        return this._get({\n            uri: \"api/saved_categories\"\n        }).get(\"categories\");\n    }\n    /**\n   * @summary Marks a list of submissions as 'visited'.\n   * @desc **Note**: This endpoint only works if the authenticated user is subscribed to reddit gold.\n   * @param {Submission[]} links A list of Submission objects to mark\n   * @returns {Promise} A Promise that fulfills when the request is complete\n   * @example\n   *\n   * var submissions = [r.getSubmission('4a9u54'), r.getSubmission('4a95nb')]\n   * r.markAsVisited(submissions)\n   * // (the links will now appear purple on reddit)\n   */ markAsVisited(links) {\n        return this._post({\n            uri: \"api/store_visits\",\n            links: (0, _lodash.map)(links, \"name\").join(\",\")\n        });\n    }\n    _submit(_ref5) {\n        var _this5 = this;\n        var captcha_response = _ref5.captcha_response, _ref5$captchaResponse = _ref5.captchaResponse, captchaResponse = _ref5$captchaResponse === void 0 ? captcha_response : _ref5$captchaResponse, captcha_iden = _ref5.captcha_iden, _ref5$captchaIden = _ref5.captchaIden, captchaIden = _ref5$captchaIden === void 0 ? captcha_iden : _ref5$captchaIden, kind = _ref5.kind, _ref5$resubmit = _ref5.resubmit, resubmit = _ref5$resubmit === void 0 ? true : _ref5$resubmit, _ref5$send_replies = _ref5.send_replies, send_replies = _ref5$send_replies === void 0 ? true : _ref5$send_replies, _ref5$sendReplies = _ref5.sendReplies, sendReplies = _ref5$sendReplies === void 0 ? send_replies : _ref5$sendReplies, crosspost_fullname = _ref5.crosspost_fullname, text = _ref5.text, title = _ref5.title, url = _ref5.url, subreddit_name = _ref5.subreddit_name, _ref5$subredditName = _ref5.subredditName, subredditName = _ref5$subredditName === void 0 ? subreddit_name : _ref5$subredditName, nsfw = _ref5.nsfw, spoiler = _ref5.spoiler, flairId = _ref5.flairId, flairText = _ref5.flairText, options = _objectWithoutProperties(_ref5, [\n            \"captcha_response\",\n            \"captchaResponse\",\n            \"captcha_iden\",\n            \"captchaIden\",\n            \"kind\",\n            \"resubmit\",\n            \"send_replies\",\n            \"sendReplies\",\n            \"crosspost_fullname\",\n            \"text\",\n            \"title\",\n            \"url\",\n            \"subreddit_name\",\n            \"subredditName\",\n            \"nsfw\",\n            \"spoiler\",\n            \"flairId\",\n            \"flairText\"\n        ]);\n        return this._post({\n            uri: \"api/submit\",\n            form: _objectSpread({\n                api_type,\n                captcha: captchaResponse,\n                iden: captchaIden,\n                sendreplies: sendReplies,\n                sr: subredditName,\n                kind,\n                resubmit,\n                crosspost_fullname,\n                text,\n                title,\n                url,\n                spoiler,\n                nsfw,\n                flair_id: flairId,\n                flair_text: flairText\n            }, options)\n        }).tap((0, _helpers.handleJsonErrors)(this)).then(function(result) {\n            return _this5.getSubmission(result.json.data.id);\n        });\n    }\n    /**\n   * @summary Creates a new selfpost on the given subreddit.\n   * @param {object} options An object containing details about the submission\n   * @param {string} options.subredditName The name of the subreddit that the post should be submitted to\n   * @param {string} options.title The title of the submission\n   * @param {string} [options.text] The selftext of the submission\n   * @param {boolean} [options.sendReplies=true] Determines whether inbox replies should be enabled for this submission\n   * @param {string} [options.captchaIden] A captcha identifier. This is only necessary if the authenticated account\n   requires a captcha to submit posts and comments.\n   * @param {string} [options.captchaResponse] The response to the captcha with the given identifier\n   * @returns {Promise} The newly-created Submission object\n   * @example\n   *\n   * r.submitSelfpost({\n   *   subredditName: 'snoowrap_testing',\n   *   title: 'This is a selfpost',\n   *   text: 'This is the text body of the selfpost'\n   * }).then(console.log)\n   * // => Submission { name: 't3_4abmsz' }\n   * // (new selfpost created on reddit)\n   */ submitSelfpost(options) {\n        return this._submit(_objectSpread({}, options, {\n            kind: \"self\"\n        }));\n    }\n    /**\n   * @summary Creates a new link submission on the given subreddit.\n   * @param {object} options An object containing details about the submission\n   * @param {string} options.subredditName The name of the subreddit that the post should be submitted to\n   * @param {string} options.title The title of the submission\n   * @param {string} options.url The url that the link submission should point to\n   * @param {boolean} [options.sendReplies=true] Determines whether inbox replies should be enabled for this submission\n   * @param {boolean} [options.resubmit=true] If this is false and same link has already been submitted to this subreddit in\n   the past, reddit will return an error. This could be used to avoid accidental reposts.\n   * @param {string} [options.captchaIden] A captcha identifier. This is only necessary if the authenticated account\n   requires a captcha to submit posts and comments.\n   * @param {string} [options.captchaResponse] The response to the captcha with the given identifier\n   * @returns {Promise} The newly-created Submission object\n   * @example\n   *\n   * r.submitLink({\n   *   subredditName: 'snoowrap_testing',\n   *   title: 'I found a cool website!',\n   *   url: 'https://google.com'\n   * }).then(console.log)\n   * // => Submission { name: 't3_4abnfe' }\n   * // (new linkpost created on reddit)\n   */ submitLink(options) {\n        return this._submit(_objectSpread({}, options, {\n            kind: \"link\"\n        }));\n    }\n    /**\n   * @summary Creates a new crosspost submission on the given subreddit\n   * @desc **NOTE**: To create a crosspost, the authenticated account must be subscribed to the subreddit where\n   * the crosspost is being submitted, and that subreddit be configured to allow crossposts.\n   * @param {object} options An object containing details about the submission\n   * @param {string} options.subredditName The name of the subreddit that the crosspost should be submitted to\n   * @param {string} options.title The title of the crosspost\n   * @param {(string|Submission)} options.originalPost A Submission object or a post ID for the original post which\n   is being crossposted\n   * @param {boolean} [options.sendReplies=true] Determines whether inbox replies should be enabled for this submission\n   * @param {boolean} [options.resubmit=true] If this is false and same link has already been submitted to this subreddit in\n   the past, reddit will return an error. This could be used to avoid accidental reposts.\n   * @returns {Promise} The newly-created Submission object\n   * @example\n   *\n   * await r.submitCrosspost({ title: 'I found an interesting post', originalPost: '6vths0', subredditName: 'snoowrap' })\n   */ submitCrosspost(options) {\n        return this._submit(_objectSpread({}, options, {\n            kind: \"crosspost\",\n            crosspost_fullname: options.originalPost instanceof snoowrap.objects.Submission ? options.originalPost.name : (0, _helpers.addFullnamePrefix)(options.originalPost, \"t3_\")\n        }));\n    }\n    _getSortedFrontpage(sortType, subredditName) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        // Handle things properly if only a time parameter is provided but not the subreddit name\n        var opts = options;\n        var subName = subredditName;\n        if (typeof subredditName === \"object\" && (0, _lodash.isEmpty)((0, _lodash.omitBy)(opts, function(option) {\n            return option === undefined;\n        }))) {\n            /* In this case, \"subredditName\" ends up referring to the second argument, which is not actually a name since the user\n      decided to omit that parameter. */ opts = subredditName;\n            subName = undefined;\n        }\n        var parsedOptions = (0, _lodash.omit)(_objectSpread({}, opts, {\n            t: opts.time || opts.t\n        }), \"time\");\n        return this._getListing({\n            uri: (subName ? \"r/\".concat(subName, \"/\") : \"\") + sortType,\n            qs: parsedOptions\n        });\n    }\n    /**\n   * @summary Gets a Listing of hot posts.\n   * @param {string} [subredditName] The subreddit to get posts from. If not provided, posts are fetched from\n   the front page of reddit.\n   * @param {object} [options={}] Options for the resulting Listing\n   * @returns {Promise} A Listing containing the retrieved submissions\n   * @example\n   *\n   * r.getHot().then(console.log)\n   * // => Listing [\n   * //  Submission { domain: 'imgur.com', banned_by: null, subreddit: Subreddit { display_name: 'pics' }, ... },\n   * //  Submission { domain: 'i.imgur.com', banned_by: null, subreddit: Subreddit { display_name: 'funny' }, ... },\n   * //  ...\n   * // ]\n   *\n   * r.getHot('gifs').then(console.log)\n   * // => Listing [\n   * //  Submission { domain: 'i.imgur.com', banned_by: null, subreddit: Subreddit { display_name: 'gifs' }, ... },\n   * //  Submission { domain: 'i.imgur.com', banned_by: null, subreddit: Subreddit { display_name: 'gifs' }, ... },\n   * //  ...\n   * // ]\n   *\n   * r.getHot('redditdev', {limit: 1}).then(console.log)\n   * // => Listing [\n   //   Submission { domain: 'self.redditdev', banned_by: null, subreddit: Subreddit { display_name: 'redditdev' }, ...}\n   * // ]\n   */ getHot(subredditName, options) {\n        return this._getSortedFrontpage(\"hot\", subredditName, options);\n    }\n    /**\n   * @summary Gets a Listing of best posts.\n   * @param {object} [options={}] Options for the resulting Listing\n   * @returns {Promise<Listing>} A Listing containing the retrieved submissions\n   * @example\n   *\n   * r.getBest().then(console.log)\n   * // => Listing [\n   * //  Submission { domain: 'imgur.com', banned_by: null, subreddit: Subreddit { display_name: 'pics' }, ... },\n   * //  Submission { domain: 'i.imgur.com', banned_by: null, subreddit: Subreddit { display_name: 'funny' }, ... },\n   * //  ...\n   * // ]\n   *\n   * r.getBest({limit: 1}).then(console.log)\n   * // => Listing [\n   //   Submission { domain: 'self.redditdev', banned_by: null, subreddit: Subreddit { display_name: 'redditdev' }, ...}\n   * // ]\n   */ getBest(options) {\n        return this._getSortedFrontpage(\"best\", undefined, options);\n    }\n    /**\n   * @summary Gets a Listing of new posts.\n   * @param {string} [subredditName] The subreddit to get posts from. If not provided, posts are fetched from\n   the front page of reddit.\n   * @param {object} [options={}] Options for the resulting Listing\n   * @returns {Promise} A Listing containing the retrieved submissions\n   * @example\n   *\n   * r.getNew().then(console.log)\n   * // => Listing [\n   * //  Submission { domain: 'self.Jokes', banned_by: null, subreddit: Subreddit { display_name: 'Jokes' }, ... },\n   * //  Submission { domain: 'self.AskReddit', banned_by: null, subreddit: Subreddit { display_name: 'AskReddit' }, ... },\n   * //  ...\n   * // ]\n   *\n   */ getNew(subredditName, options) {\n        return this._getSortedFrontpage(\"new\", subredditName, options);\n    }\n    /**\n   * @summary Gets a Listing of new comments.\n   * @param {string} [subredditName] The subreddit to get comments from. If not provided, posts are fetched from\n   the front page of reddit.\n   * @param {object} [options={}] Options for the resulting Listing\n   * @returns {Promise} A Listing containing the retrieved comments\n   * @example\n   *\n   * r.getNewComments().then(console.log)\n   * // => Listing [\n   * //  Comment { link_title: 'What amazing book should be made into a movie, but hasn\\'t been yet?', ... }\n   * //  Comment { link_title: 'How far back in time could you go and still understand English?', ... }\n   * // ]\n   */ getNewComments(subredditName, options) {\n        return this._getSortedFrontpage(\"comments\", subredditName, options);\n    }\n    /**\n   *  @summary Get list of content by IDs. Returns a listing of the requested content.\n   *  @param {Array<string|Submission|Comment>} ids An array of content IDs. Can include the id itself, or a Submission or Comment object.\n  can get a post and a comment   *  @returns {Promise<Listing<Submission|Comment>>} A listing of content requested, can be any class fetchable by API. e.g. Comment, Submission\n   *  @example\n   *\n   * r.getContentByIds(['t3_9l9vof','t3_9la341']).then(console.log);\n   * // => Listing [\n   * //  Submission { approved_at_utc: null, ... }\n   * //  Submission { approved_at_utc: null, ... }\n   * // ]\n   *\n   * r.getContentByIds([r.getSubmission('9l9vof'), r.getSubmission('9la341')]).then(console.log);\n   * // => Listing [\n   * //  Submission { approved_at_utc: null, ... }\n   * //  Submission { approved_at_utc: null, ... }\n   * // ]\n  */ getContentByIds(ids) {\n        if (!Array.isArray(ids)) {\n            throw new TypeError(\"Invalid argument: Argument needs to be an array.\");\n        }\n        var prefixedIds = ids.map(function(id) {\n            if (id instanceof snoowrap.objects.Submission || id instanceof snoowrap.objects.Comment) {\n                return id.name;\n            } else if (typeof id === \"string\") {\n                if (!/t(1|3)_/g.test(ids)) {\n                    throw new TypeError(\"Invalid argument: Ids need to include Submission or Comment prefix, e.g. t1_, t3_.\");\n                }\n                return id;\n            }\n            throw new TypeError(\"Id must be either a string, Submission, or Comment.\");\n        });\n        return this._get({\n            uri: \"/api/info\",\n            method: \"get\",\n            qs: {\n                id: prefixedIds.join(\",\")\n            }\n        });\n    }\n    /**\n   * @summary Gets a single random Submission.\n   * @desc **Note**: This function will not work when snoowrap is running in a browser, because the reddit server sends a\n   redirect which cannot be followed by a CORS request.\n   * @param {string} [subredditName] The subreddit to get the random submission. If not provided, the post is fetched from\n   the front page of reddit.\n   * @returns {Promise} The retrieved Submission object\n   * @example\n   *\n   * r.getRandomSubmission('aww').then(console.log)\n   * // => Submission { domain: 'i.imgur.com', banned_by: null, subreddit: Subreddit { display_name: 'aww' }, ... }\n   */ getRandomSubmission(subredditName) {\n        return this._get({\n            uri: \"\".concat(subredditName ? \"r/\".concat(subredditName, \"/\") : \"\", \"random\")\n        });\n    }\n    /**\n   * @summary Gets a Listing of top posts.\n   * @param {string} [subredditName] The subreddit to get posts from. If not provided, posts are fetched from\n   the front page of reddit.\n   * @param {object} [options={}] Options for the resulting Listing\n   * @param {string} [options.time] Describes the timespan that posts should be retrieved from. Should be one of\n   `hour, day, week, month, year, all`\n   * @returns {Promise} A Listing containing the retrieved submissions\n   * @example\n   *\n   * r.getTop({time: 'all', limit: 2}).then(console.log)\n   * // => Listing [\n   * //  Submission { domain: 'self.AskReddit', banned_by: null, subreddit: Subreddit { display_name: 'AskReddit' }, ... },\n   * //  Submission { domain: 'imgur.com', banned_by: null, subreddit: Subreddit { display_name: 'funny' }, ... }\n   * // ]\n   *\n   * r.getTop('AskReddit').then(console.log)\n   * // => Listing [\n   * //  Submission { domain: 'self.AskReddit', banned_by: null, subreddit: Subreddit { display_name: 'AskReddit' }, ... },\n   * //  Submission { domain: 'self.AskReddit', banned_by: null, subreddit: Subreddit { display_name: 'AskReddit' }, ... },\n   * //  Submission { domain: 'self.AskReddit', banned_by: null, subreddit: Subreddit { display_name: 'AskReddit' }, ... },\n   * //  ...\n   * // ]\n   */ getTop(subredditName, options) {\n        return this._getSortedFrontpage(\"top\", subredditName, options);\n    }\n    /**\n   * @summary Gets a Listing of controversial posts.\n   * @param {string} [subredditName] The subreddit to get posts from. If not provided, posts are fetched from\n   the front page of reddit.\n   * @param {object} [options={}] Options for the resulting Listing\n   * @param {string} [options.time] Describes the timespan that posts should be retrieved from. Should be one of\n   `hour, day, week, month, year, all`\n   * @returns {Promise} A Listing containing the retrieved submissions\n   * @example\n   *\n   * r.getControversial('technology').then(console.log)\n   * // => Listing [\n   * //  Submission { domain: 'thenextweb.com', banned_by: null, subreddit: Subreddit { display_name: 'technology' }, ... },\n   * //  Submission { domain: 'pcmag.com', banned_by: null, subreddit: Subreddit { display_name: 'technology' }, ... }\n   * // ]\n   */ getControversial(subredditName, options) {\n        return this._getSortedFrontpage(\"controversial\", subredditName, options);\n    }\n    /**\n   * @summary Gets a Listing of controversial posts.\n   * @param {string} [subredditName] The subreddit to get posts from. If not provided, posts are fetched from\n   the front page of reddit.\n   * @param {object} [options] Options for the resulting Listing\n   * @returns {Promise} A Listing containing the retrieved submissions\n   * @example\n   *\n   * r.getRising('technology').then(console.log)\n   * // => Listing [\n   * //  Submission { domain: 'thenextweb.com', banned_by: null, subreddit: Subreddit { display_name: 'technology' }, ... },\n   * //  Submission { domain: 'pcmag.com', banned_by: null, subreddit: Subreddit { display_name: 'technology' }, ... }\n   * // ]\n   */ getRising(subredditName, options) {\n        return this._getSortedFrontpage(\"rising\", subredditName, options);\n    }\n    /**\n   * @summary Gets the authenticated user's unread messages.\n   * @param {object} [options={}] Options for the resulting Listing\n   * @returns {Promise} A Listing containing unread items in the user's inbox\n   * @example\n   *\n   * r.getUnreadMessages().then(console.log)\n   * // => Listing [\n   * //  PrivateMessage { body: 'hi!', was_comment: false, first_message: null, ... },\n   * //  Comment { body: 'this is a reply', link_title: 'Yay, a selfpost!', was_comment: true, ... }\n   * // ]\n   */ getUnreadMessages() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._getListing({\n            uri: \"message/unread\",\n            qs: options\n        });\n    }\n    /**\n   * @summary Gets the items in the authenticated user's inbox.\n   * @param {object} [options={}] Filter options. Can also contain options for the resulting Listing.\n   * @param {string} [options.filter] A filter for the inbox items. If provided, it should be one of `unread`, (unread\n   items), `messages` (i.e. PMs), `comments` (comment replies), `selfreply` (selfpost replies), or `mentions` (username\n   mentions).\n   * @returns {Promise} A Listing containing items in the user's inbox\n   * @example\n   *\n   * r.getInbox().then(console.log)\n   * // => Listing [\n   * //  PrivateMessage { body: 'hi!', was_comment: false, first_message: null, ... },\n   * //  Comment { body: 'this is a reply', link_title: 'Yay, a selfpost!', was_comment: true, ... }\n   * // ]\n   */ getInbox() {\n        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, filter = _ref6.filter, options = _objectWithoutProperties(_ref6, [\n            \"filter\"\n        ]);\n        return this._getListing({\n            uri: \"message/\".concat(filter || \"inbox\"),\n            qs: options\n        });\n    }\n    /**\n   * @summary Gets the authenticated user's modmail.\n   * @param {object} [options={}] Options for the resulting Listing\n   * @returns {Promise} A Listing of the user's modmail\n   * @example\n   *\n   * r.getModmail({limit: 2}).then(console.log)\n   * // => Listing [\n   * //  PrivateMessage { body: '/u/not_an_aardvark has accepted an invitation to become moderator ... ', ... },\n   * //  PrivateMessage { body: '/u/not_an_aardvark has been invited by /u/actually_an_aardvark to ...', ... }\n   * // ]\n   */ getModmail() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._getListing({\n            uri: \"message/moderator\",\n            qs: options\n        });\n    }\n    /**\n   * @summary Gets a list of ModmailConversations from the authenticated user's subreddits.\n   * @param {object} [options] Options for the resulting Listing\n   * @returns {Promise<Listing<ModmailConversation>>} A Listing containing Subreddits\n   * @example\n   *\n   * r.getNewModmailConversations({limit: 2}).then(console.log)\n   * // => Listing [\n   * //  ModmailConversation { messages: [...], objIds: [...], subject: 'test subject', ... },\n   * //  ModmailConversation { messages: [...], objIds: [...], subject: 'test subject', ... }\n   * // ]\n   */ getNewModmailConversations() {\n        var _this6 = this;\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._getListing({\n            uri: \"api/mod/conversations\",\n            qs: options,\n            _name: \"ModmailConversation\",\n            _transform: function(response) {\n                response.after = null;\n                response.before = null;\n                response.children = [];\n                for (var conversation of response.conversationIds){\n                    response.conversations[conversation].participant = _this6._newObject(\"ModmailConversationAuthor\", _objectSpread({}, response.conversations[conversation].participant));\n                    var conversationObjects = objects.ModmailConversation._getConversationObjects(response.conversations[conversation], response);\n                    var data = _objectSpread({}, conversationObjects, {}, response.conversations[conversation]);\n                    response.children.push(_this6._newObject(\"ModmailConversation\", data));\n                }\n                return _this6._newObject(\"Listing\", response);\n            }\n        });\n    }\n    /**\n   * @summary Create a new modmail discussion between moderators\n   * @param {object} options\n   * @param {string} options.body Body of the discussion\n   * @param {string} options.subject Title or subject\n   * @param {string} options.srName Subreddit name without fullname\n   * @returns {Promise<ModmailConversation>} the created ModmailConversation\n   * @example\n   *\n   * r.createModeratorDiscussion({\n   *   body: 'test body',\n   *   subject: 'test subject',\n   *   srName: 'AskReddit'\n   * }).then(console.log)\n   * // ModmailConversation { messages: [...], objIds: [...], subject: 'test subject', ... }\n   */ createModmailDiscussion(_ref7) {\n        var _this7 = this;\n        var body = _ref7.body, subject = _ref7.subject, srName = _ref7.srName;\n        var parsedFromSr = srName.replace(/^\\/?r\\//, \"\"); // Convert '/r/subreddit_name' to 'subreddit_name'\n        // _newObject ignores most of the response, no practical way to parse the returned content yet\n        return this._post({\n            uri: \"api/mod/conversations\",\n            form: {\n                body,\n                subject,\n                srName: parsedFromSr\n            }\n        }).then(function(res) {\n            return _this7._newObject(\"ModmailConversation\", {\n                id: res.conversation.id\n            });\n        });\n    }\n    /**\n   * @summary Get a ModmailConversation by its id\n   * @param {string} id of the ModmailConversation\n   * @returns {Promise<ModmailConversation>} the requested ModmailConversation\n   * @example\n   *\n   * r.getNewModmailConversation('75hxt').then(console.log)\n   * // ModmailConversation { messages: [...], objIds: [...], ... }\n   */ getNewModmailConversation(id) {\n        return this._newObject(\"ModmailConversation\", {\n            id\n        });\n    }\n    /**\n   * @summary Marks all conversations in array as read.\n   * @param {ModmailConversation[]} conversations to mark as read\n   * @example\n   *\n   * r.markNewModmailConversationsAsRead(['pics', 'sweden'])\n   */ markNewModmailConversationsAsRead(conversations) {\n        var conversationIds = conversations.map(function(message) {\n            return (0, _helpers.addFullnamePrefix)(message, \"\");\n        });\n        return this._post({\n            uri: \"api/mod/conversations/read\",\n            form: {\n                conversationIds: conversationIds.join(\",\")\n            }\n        });\n    }\n    /**\n   * @summary Marks all conversations in array as unread.\n   * @param {ModmailConversation[]} conversations to mark as unread\n   * @example\n   *\n   * r.markNewModmailConversationsAsUnread(['pics', 'sweden'])\n   */ markNewModmailConversationsAsUnread(conversations) {\n        var conversationIds = conversations.map(function(message) {\n            return (0, _helpers.addFullnamePrefix)(message, \"\");\n        });\n        return this._post({\n            uri: \"api/mod/conversations/unread\",\n            form: {\n                conversationIds: conversationIds.join(\",\")\n            }\n        });\n    }\n    /**\n   * @summary Gets all moderated subreddits that have new Modmail activated\n   * @returns {Promise<Listing<Subreddit>>} a Listing of ModmailConversations marked as read\n   * @example\n   *\n   * r.getNewModmailSubreddits().then(console.log)\n   * // => Listing [\n   * //  Subreddit { display_name: 'tipofmytongue', ... },\n   * //  Subreddit { display_name: 'EarthPorn', ... },\n   * // ]\n   */ getNewModmailSubreddits() {\n        var _this8 = this;\n        return this._get({\n            uri: \"api/mod/conversations/subreddits\"\n        }).then(function(response) {\n            return Object.values(response.subreddits).map(function(s) {\n                return _this8._newObject(\"Subreddit\", s);\n            });\n        });\n    }\n    /**\n   * @summary Represents the unread count in a {@link ModmailConversation}. Each of these properties\n   * correspond to the amount of unread conversations of that type.\n   * @typedef {Object} UnreadCount\n   * @property {number} highlighted\n   * @property {number} notifications\n   * @property {number} archived\n   * @property {number} new\n   * @property {number} inprogress\n   * @property {number} mod\n   */ /**\n   * @summary Retrieves an object of unread Modmail conversations for each state.\n   * @returns {UnreadCount} unreadCount\n   * @example\n   *\n   * r.getUnreadNewModmailConversationsCount().then(console.log)\n   * // => {\n   * //  archived: 1,\n   * //  appeals: 1,\n   * //  highlighted: 0,\n   * //  notifications: 0,\n   * //  join_requests: 0,\n   * //  new: 2,\n   * //  inprogress: 5,\n   * //  mod: 1,\n   * // }\n   */ getUnreadNewModmailConversationsCount() {\n        return this._get({\n            uri: \"api/mod/conversations/unread/count\"\n        });\n    }\n    /**\n   * @summary Mark Modmail conversations as read given the subreddit(s) and state.\n   * @param {Subreddit[]|String[]} subreddits\n   * @param {('archived'|'appeals'|'highlighted'|'notifications'|'join_requests'|'new'|'inprogress'|'mod'|'all')} state selected state to mark as read\n   * @returns {Promise<Listing<ModmailConversation>>} a Listing of ModmailConversations marked as read\n   * @example\n   *\n   * r.bulkReadNewModmail(['AskReddit'], 'all').then(console.log)\n   * // => Listing [\n   * //  ModmailConversation { id: '75hxt' },\n   * //  ModmailConversation { id: '75hxg' }\n   * // ]\n   *\n   * r.bulkReadNewModmail([r.getSubreddit('AskReddit')], 'all').then(console.log)\n   * // => Listing [\n   * //  ModmailConversation { id: '75hxt' },\n   * //  ModmailConversation { id: '75hxg' }\n   * // ]\n   */ bulkReadNewModmail(subreddits, state) {\n        var _this9 = this;\n        var subredditNames = subreddits.map(function(s) {\n            return typeof s === \"string\" ? s.replace(/^\\/?r\\//, \"\") : s.display_name;\n        });\n        return this._post({\n            uri: \"api/mod/conversations/bulk/read\",\n            form: {\n                entity: subredditNames.join(\",\"),\n                state\n            }\n        }).then(function(res) {\n            return _this9._newObject(\"Listing\", {\n                after: null,\n                before: null,\n                children: res.conversation_ids.map(function(id) {\n                    return _this9._newObject(\"ModmailConversation\", {\n                        id\n                    });\n                })\n            });\n        });\n    }\n    /**\n   * @summary Gets the user's sent messages.\n   * @param {object} [options={}] options for the resulting Listing\n   * @returns {Promise} A Listing of the user's sent messages\n   * @example\n   *\n   * r.getSentMessages().then(console.log)\n   * // => Listing [\n   * //  PrivateMessage { body: 'you have been added as an approved submitter to ...', ... },\n   * //  PrivateMessage { body: 'you have been banned from posting to ...' ... }\n   * // ]\n   */ getSentMessages() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this._getListing({\n            uri: \"message/sent\",\n            qs: options\n        });\n    }\n    /**\n   * @summary Marks all of the given messages as read.\n   * @param {PrivateMessage[]|String[]} messages An Array of PrivateMessage or Comment objects. Can also contain strings\n   representing message or comment IDs. If strings are provided, they are assumed to represent PrivateMessages unless a fullname\n   prefix such as `t1_` is specified.\n   * @returns {Promise} A Promise that fulfills when the request is complete\n   * @example\n   *\n   * r.markMessagesAsRead(['51shsd', '51shxv'])\n   *\n   * // To reference a comment by ID, be sure to use the `t1_` prefix, otherwise snoowrap will be unable to distinguish the\n   * // comment ID from a PrivateMessage ID.\n   * r.markMessagesAsRead(['t5_51shsd', 't1_d3zhb5k'])\n   *\n   * // Alternatively, just pass in a comment object directly.\n   * r.markMessagesAsRead([r.getMessage('51shsd'), r.getComment('d3zhb5k')])\n   */ markMessagesAsRead(messages) {\n        var messageIds = messages.map(function(message) {\n            return (0, _helpers.addFullnamePrefix)(message, \"t4_\");\n        });\n        return this._post({\n            uri: \"api/read_message\",\n            form: {\n                id: messageIds.join(\",\")\n            }\n        });\n    }\n    /**\n   * @summary Marks all of the given messages as unread.\n   * @param {PrivateMessage[]|String[]} messages An Array of PrivateMessage or Comment objects. Can also contain strings\n   representing message IDs. If strings are provided, they are assumed to represent PrivateMessages unless a fullname prefix such\n   as `t1_` is included.\n   * @returns {Promise} A Promise that fulfills when the request is complete\n   * @example\n   *\n   * r.markMessagesAsUnread(['51shsd', '51shxv'])\n   *\n   * // To reference a comment by ID, be sure to use the `t1_` prefix, otherwise snoowrap will be unable to distinguish the\n   * // comment ID from a PrivateMessage ID.\n   * r.markMessagesAsUnread(['t5_51shsd', 't1_d3zhb5k'])\n   *\n   * // Alternatively, just pass in a comment object directly.\n   * r.markMessagesAsRead([r.getMessage('51shsd'), r.getComment('d3zhb5k')])\n   */ markMessagesAsUnread(messages) {\n        var messageIds = messages.map(function(message) {\n            return (0, _helpers.addFullnamePrefix)(message, \"t4_\");\n        });\n        return this._post({\n            uri: \"api/unread_message\",\n            form: {\n                id: messageIds.join(\",\")\n            }\n        });\n    }\n    /**\n   * @summary Marks all of the user's messages as read.\n   * @desc **Note:** The reddit.com site imposes a ratelimit of approximately 1 request every 10 minutes on this endpoint.\n   Further requests will cause the API to return a 429 error.\n   * @returns {Promise} A Promise that resolves when the request is complete\n   * @example\n   *\n   * r.readAllMessages().then(function () {\n   *   r.getUnreadMessages().then(console.log)\n   * })\n   * // => Listing []\n   * // (messages marked as 'read' on reddit)\n   */ readAllMessages() {\n        return this._post({\n            uri: \"api/read_all_messages\"\n        });\n    }\n    /**\n   * @summary Composes a new private message.\n   * @param {object} options\n   * @param {RedditUser|Subreddit|string} options.to The recipient of the message.\n   * @param {string} options.subject The message subject (100 characters max)\n   * @param {string} options.text The body of the message, in raw markdown text\n   * @param {Subreddit|string} [options.fromSubreddit] If provided, the message is sent as a modmail from the specified\n   subreddit.\n   * @param {string} [options.captchaIden] A captcha identifier. This is only necessary if the authenticated account\n   requires a captcha to submit posts and comments.\n   * @param {string} [options.captchaResponse] The response to the captcha with the given identifier\n   * @returns {Promise} A Promise that fulfills when the request is complete\n   * @example\n   *\n   * r.composeMessage({\n   *   to: 'actually_an_aardvark',\n   *   subject: \"Hi, how's it going?\",\n   *   text: 'Long time no see'\n   * })\n   * // (message created on reddit)\n   */ composeMessage(_ref8) {\n        var captcha = _ref8.captcha, from_subreddit = _ref8.from_subreddit, _ref8$fromSubreddit = _ref8.fromSubreddit, fromSubreddit = _ref8$fromSubreddit === void 0 ? from_subreddit : _ref8$fromSubreddit, captcha_iden = _ref8.captcha_iden, _ref8$captchaIden = _ref8.captchaIden, captchaIden = _ref8$captchaIden === void 0 ? captcha_iden : _ref8$captchaIden, subject = _ref8.subject, text = _ref8.text, to = _ref8.to;\n        var parsedTo = to;\n        var parsedFromSr = fromSubreddit;\n        if (to instanceof snoowrap.objects.RedditUser) {\n            parsedTo = to.name;\n        } else if (to instanceof snoowrap.objects.Subreddit) {\n            parsedTo = \"/r/\".concat(to.display_name);\n        }\n        if (fromSubreddit instanceof snoowrap.objects.Subreddit) {\n            parsedFromSr = fromSubreddit.display_name;\n        } else if (typeof fromSubreddit === \"string\") {\n            parsedFromSr = fromSubreddit.replace(/^\\/?r\\//, \"\"); // Convert '/r/subreddit_name' to 'subreddit_name'\n        }\n        return this._post({\n            uri: \"api/compose\",\n            form: {\n                api_type,\n                captcha,\n                iden: captchaIden,\n                from_sr: parsedFromSr,\n                subject,\n                text,\n                to: parsedTo\n            }\n        }).tap((0, _helpers.handleJsonErrors)(this)).return({});\n    }\n    /**\n   * @summary Gets a list of all oauth scopes supported by the reddit API.\n   * @desc **Note**: This lists every single oauth scope. To get the scope of this requester, use the `scope` property instead.\n   * @returns {Promise} An object containing oauth scopes.\n   * @example\n   *\n   * r.getOauthScopeList().then(console.log)\n   * // => {\n   * //  creddits: {\n   * //    description: 'Spend my reddit gold creddits on giving gold to other users.',\n   * //    id: 'creddits',\n   * //    name: 'Spend reddit gold creddits'\n   * //  },\n   * //  modcontributors: {\n   * //    description: 'Add/remove users to approved submitter lists and ban/unban or mute/unmute users from ...',\n   * //    id: 'modcontributors',\n   * //    name: 'Approve submitters and ban users'\n   * //  },\n   * //  ...\n   * // }\n   */ getOauthScopeList() {\n        return this._get({\n            uri: \"api/v1/scopes\"\n        });\n    }\n    /**\n   * @summary Conducts a search of reddit submissions.\n   * @param {object} options Search options. Can also contain options for the resulting Listing.\n   * @param {string} options.query The search query\n   * @param {string} [options.time] Describes the timespan that posts should be retrieved from. One of\n   `hour, day, week, month, year, all`\n   * @param {Subreddit|string} [options.subreddit] The subreddit to conduct the search on.\n   * @param {boolean} [options.restrictSr=true] Restricts search results to the given subreddit\n   * @param {string} [options.sort] Determines how the results should be sorted. One of `relevance, hot, top, new, comments`\n   * @param {string} [options.syntax='plain'] Specifies a syntax for the search. One of `cloudsearch, lucene, plain`\n   * @returns {Promise} A Listing containing the search results.\n   * @example\n   *\n   * r.search({\n   *   query: 'Cute kittens',\n   *   subreddit: 'aww',\n   *   sort: 'top'\n   * }).then(console.log)\n   * // => Listing [\n   * //  Submission { domain: 'i.imgur.com', banned_by: null, ... },\n   * //  Submission { domain: 'imgur.com', banned_by: null, ... },\n   * //  ...\n   * // ]\n   */ search(options) {\n        if (options.subreddit instanceof snoowrap.objects.Subreddit) {\n            options.subreddit = options.subreddit.display_name;\n        }\n        (0, _lodash.defaults)(options, {\n            restrictSr: true,\n            syntax: \"plain\"\n        });\n        var parsedQuery = (0, _lodash.omit)(_objectSpread({}, options, {\n            t: options.time,\n            q: options.query,\n            restrict_sr: options.restrictSr\n        }), [\n            \"time\",\n            \"query\"\n        ]);\n        return this._getListing({\n            uri: \"\".concat(options.subreddit ? \"r/\".concat(options.subreddit, \"/\") : \"\", \"search\"),\n            qs: parsedQuery\n        });\n    }\n    /**\n   * @summary Searches for subreddits given a query.\n   * @param {object} options\n   * @param {string} options.query A search query (50 characters max)\n   * @param {boolean} [options.exact=false] Determines whether the results shouldbe limited to exact matches.\n   * @param {boolean} [options.includeNsfw=true] Determines whether the results should include NSFW subreddits.\n   * @returns {Promise} An Array containing subreddit names\n   * @example\n   *\n   * r.searchSubredditNames({query: 'programming'}).then(console.log)\n   * // => [\n   * //  'programming',\n   * //  'programmingcirclejerk',\n   * //  'programminghorror',\n   * //  ...\n   * // ]\n   */ searchSubredditNames(_ref9) {\n        var _ref9$exact = _ref9.exact, exact = _ref9$exact === void 0 ? false : _ref9$exact, _ref9$include_nsfw = _ref9.include_nsfw, include_nsfw = _ref9$include_nsfw === void 0 ? true : _ref9$include_nsfw, _ref9$includeNsfw = _ref9.includeNsfw, includeNsfw = _ref9$includeNsfw === void 0 ? include_nsfw : _ref9$includeNsfw, query = _ref9.query;\n        return this._post({\n            uri: \"api/search_reddit_names\",\n            qs: {\n                exact,\n                include_over_18: includeNsfw,\n                query\n            }\n        }).get(\"names\");\n    }\n    _createOrEditSubreddit(_ref10) {\n        var _ref10$allow_images = _ref10.allow_images, allow_images = _ref10$allow_images === void 0 ? true : _ref10$allow_images, _ref10$allow_top = _ref10.allow_top, allow_top = _ref10$allow_top === void 0 ? true : _ref10$allow_top, captcha = _ref10.captcha, captcha_iden = _ref10.captcha_iden, _ref10$collapse_delet = _ref10.collapse_deleted_comments, collapse_deleted_comments = _ref10$collapse_delet === void 0 ? false : _ref10$collapse_delet, _ref10$comment_score_ = _ref10.comment_score_hide_mins, comment_score_hide_mins = _ref10$comment_score_ === void 0 ? 0 : _ref10$comment_score_, description = _ref10.description, _ref10$exclude_banned = _ref10.exclude_banned_modqueue, exclude_banned_modqueue = _ref10$exclude_banned === void 0 ? false : _ref10$exclude_banned, header_title = _ref10[\"header-title\"], _ref10$hide_ads = _ref10.hide_ads, hide_ads = _ref10$hide_ads === void 0 ? false : _ref10$hide_ads, _ref10$lang = _ref10.lang, lang = _ref10$lang === void 0 ? \"en\" : _ref10$lang, _ref10$link_type = _ref10.link_type, link_type = _ref10$link_type === void 0 ? \"any\" : _ref10$link_type, name = _ref10.name, _ref10$over_ = _ref10.over_18, over_18 = _ref10$over_ === void 0 ? false : _ref10$over_, public_description = _ref10.public_description, _ref10$public_traffic = _ref10.public_traffic, public_traffic = _ref10$public_traffic === void 0 ? false : _ref10$public_traffic, _ref10$show_media = _ref10.show_media, show_media = _ref10$show_media === void 0 ? false : _ref10$show_media, _ref10$show_media_pre = _ref10.show_media_preview, show_media_preview = _ref10$show_media_pre === void 0 ? true : _ref10$show_media_pre, _ref10$spam_comments = _ref10.spam_comments, spam_comments = _ref10$spam_comments === void 0 ? \"high\" : _ref10$spam_comments, _ref10$spam_links = _ref10.spam_links, spam_links = _ref10$spam_links === void 0 ? \"high\" : _ref10$spam_links, _ref10$spam_selfposts = _ref10.spam_selfposts, spam_selfposts = _ref10$spam_selfposts === void 0 ? \"high\" : _ref10$spam_selfposts, _ref10$spoilers_enabl = _ref10.spoilers_enabled, spoilers_enabled = _ref10$spoilers_enabl === void 0 ? false : _ref10$spoilers_enabl, sr = _ref10.sr, _ref10$submit_link_la = _ref10.submit_link_label, submit_link_label = _ref10$submit_link_la === void 0 ? \"\" : _ref10$submit_link_la, _ref10$submit_text_la = _ref10.submit_text_label, submit_text_label = _ref10$submit_text_la === void 0 ? \"\" : _ref10$submit_text_la, _ref10$submit_text = _ref10.submit_text, submit_text = _ref10$submit_text === void 0 ? \"\" : _ref10$submit_text, _ref10$suggested_comm = _ref10.suggested_comment_sort, suggested_comment_sort = _ref10$suggested_comm === void 0 ? \"confidence\" : _ref10$suggested_comm, title = _ref10.title, _ref10$type = _ref10.type, type = _ref10$type === void 0 ? \"public\" : _ref10$type, wiki_edit_age = _ref10.wiki_edit_age, wiki_edit_karma = _ref10.wiki_edit_karma, _ref10$wikimode = _ref10.wikimode, wikimode = _ref10$wikimode === void 0 ? \"modonly\" : _ref10$wikimode, otherKeys = _objectWithoutProperties(_ref10, [\n            \"allow_images\",\n            \"allow_top\",\n            \"captcha\",\n            \"captcha_iden\",\n            \"collapse_deleted_comments\",\n            \"comment_score_hide_mins\",\n            \"description\",\n            \"exclude_banned_modqueue\",\n            \"header-title\",\n            \"hide_ads\",\n            \"lang\",\n            \"link_type\",\n            \"name\",\n            \"over_18\",\n            \"public_description\",\n            \"public_traffic\",\n            \"show_media\",\n            \"show_media_preview\",\n            \"spam_comments\",\n            \"spam_links\",\n            \"spam_selfposts\",\n            \"spoilers_enabled\",\n            \"sr\",\n            \"submit_link_label\",\n            \"submit_text_label\",\n            \"submit_text\",\n            \"suggested_comment_sort\",\n            \"title\",\n            \"type\",\n            \"wiki_edit_age\",\n            \"wiki_edit_karma\",\n            \"wikimode\"\n        ]);\n        return this._post({\n            uri: \"api/site_admin\",\n            form: _objectSpread({\n                allow_images,\n                allow_top,\n                api_type,\n                captcha,\n                collapse_deleted_comments,\n                comment_score_hide_mins,\n                description,\n                exclude_banned_modqueue,\n                \"header-title\": header_title,\n                hide_ads,\n                iden: captcha_iden,\n                lang,\n                link_type,\n                name,\n                over_18,\n                public_description,\n                public_traffic,\n                show_media,\n                show_media_preview,\n                spam_comments,\n                spam_links,\n                spam_selfposts,\n                spoilers_enabled,\n                sr,\n                submit_link_label,\n                submit_text,\n                submit_text_label,\n                suggested_comment_sort,\n                title,\n                type,\n                wiki_edit_age,\n                wiki_edit_karma,\n                wikimode\n            }, otherKeys)\n        }).then((0, _helpers.handleJsonErrors)(this.getSubreddit(name || sr)));\n    }\n    /**\n   * @summary Creates a new subreddit.\n   * @param {object} options\n   * @param {string} options.name The name of the new subreddit\n   * @param {string} options.title The text that should appear in the header of the subreddit\n   * @param {string} options.public_description The text that appears with this subreddit on the search page, or on the\n   blocked-access page if this subreddit is private. (500 characters max)\n   * @param {string} options.description The sidebar text for the subreddit. (5120 characters max)\n   * @param {string} [options.submit_text=''] The text to show below the submission page (1024 characters max)\n   * @param {boolean} [options.hide_ads=false] Determines whether ads should be hidden on this subreddit. (This is only\n   allowed for gold-only subreddits.)\n   * @param {string} [options.lang='en'] The language of the subreddit (represented as an IETF language tag)\n   * @param {string} [options.type='public'] Determines who should be able to access the subreddit. This should be one of\n   `public, private, restricted, gold_restricted, gold_only, archived, employees_only`.\n   * @param {string} [options.link_type='any'] Determines what types of submissions are allowed on the subreddit. This should\n   be one of `any, link, self`.\n   * @param {string} [options.submit_link_label=undefined] Custom text to display on the button that submits a link. If\n   this is omitted, the default text will be displayed.\n   * @param {string} [options.submit_text_label=undefined] Custom text to display on the button that submits a selfpost. If\n   this is omitted, the default text will be displayed.\n   * @param {string} [options.wikimode='modonly'] Determines who can edit wiki pages on the subreddit. This should be one of\n   `modonly, anyone, disabled`.\n   * @param {number} [options.wiki_edit_karma=0] The minimum amount of subreddit karma needed for someone to edit this\n   subreddit's wiki. (This is only relevant if `options.wikimode` is set to `anyone`.)\n   * @param {number} [options.wiki_edit_age=0] The minimum account age (in days) needed for someone to edit this subreddit's\n   wiki. (This is only relevant if `options.wikimode` is set to `anyone`.)\n   * @param {string} [options.spam_links='high'] The spam filter strength for links on this subreddit. This should be one of\n   `low, high, all`.\n   * @param {string} [options.spam_selfposts='high'] The spam filter strength for selfposts on this subreddit. This should be\n   one of `low, high, all`.\n   * @param {string} [options.spam_comments='high'] The spam filter strength for comments on this subreddit. This should be one\n   of `low, high, all`.\n   * @param {boolean} [options.over_18=false] Determines whether this subreddit should be classified as NSFW\n   * @param {boolean} [options.allow_top=true] Determines whether the new subreddit should be able to appear in /r/all and\n   trending subreddits\n   * @param {boolean} [options.show_media=false] Determines whether image thumbnails should be enabled on this subreddit\n   * @param {boolean} [options.show_media_preview=true] Determines whether media previews should be expanded by default on this\n   subreddit\n   * @param {boolean} [options.allow_images=true] Determines whether image uploads and links to image hosting sites should be\n   enabled on this subreddit\n   * @param {boolean} [options.exclude_banned_modqueue=false] Determines whether posts by site-wide banned users should be\n   excluded from the modqueue.\n   * @param {boolean} [options.public_traffic=false] Determines whether the /about/traffic page for this subreddit should be\n   viewable by anyone.\n   * @param {boolean} [options.collapse_deleted_comments=false] Determines whether deleted and removed comments should be\n   collapsed by default\n   * @param {string} [options.suggested_comment_sort=undefined] The suggested comment sort for the subreddit. This should be\n   one of `confidence, top, new, controversial, old, random, qa`.If left blank, there will be no suggested sort,\n   which means that users will see the sort method that is set in their own preferences (usually `confidence`.)\n   * @param {boolean} [options.spoilers_enabled=false] Determines whether users can mark their posts as spoilers\n   * @returns {Promise} A Promise for the newly-created subreddit object.\n   * @example\n   *\n   * r.createSubreddit({\n   *   name: 'snoowrap_testing2',\n   *   title: 'snoowrap testing: the sequel',\n   *   public_description: 'thanks for reading the snoowrap docs!',\n   *   description: 'This text will go on the sidebar',\n   *   type: 'private'\n   * }).then(console.log)\n   * // => Subreddit { display_name: 'snoowrap_testing2' }\n   * // (/r/snoowrap_testing2 created on reddit)\n   */ createSubreddit(options) {\n        return this._createOrEditSubreddit(options);\n    }\n    /**\n   * @summary Searches subreddits by topic.\n   * @param {object} options\n   * @param {string} options.query The search query. (50 characters max)\n   * @returns {Promise} An Array of subreddit objects corresponding to the search results\n   * @deprecated Reddit no longer provides the corresponding API endpoint.\n   * @example\n   *\n   * r.searchSubredditTopics({query: 'movies'}).then(console.log)\n   * // => [\n   * //  Subreddit { display_name: 'tipofmytongue' },\n   * //  Subreddit { display_name: 'remove' },\n   * //  Subreddit { display_name: 'horror' },\n   * //  ...\n   * // ]\n   */ searchSubredditTopics(_ref11) {\n        var _this10 = this;\n        var query = _ref11.query;\n        return this._get({\n            uri: \"api/subreddits_by_topic\",\n            qs: {\n                query\n            }\n        }).map(function(result) {\n            return _this10.getSubreddit(result.name);\n        });\n    }\n    /**\n   * @summary Gets a list of subreddits that the currently-authenticated user is subscribed to.\n   * @param {object} [options] Options for the resulting Listing\n   * @returns {Promise} A Listing containing Subreddits\n   * @example\n   *\n   * r.getSubscriptions({limit: 2}).then(console.log)\n   * // => Listing [\n   * //  Subreddit {\n   * //    display_name: 'gadgets',\n   * //    title: 'reddit gadget guide',\n   * //    ...\n   * //  },\n   * //  Subreddit {\n   * //    display_name: 'sports',\n   * //    title: 'the sportspage of the Internet',\n   * //    ...\n   * //  }\n   * // ]\n   */ getSubscriptions(options) {\n        return this._getListing({\n            uri: \"subreddits/mine/subscriber\",\n            qs: options\n        });\n    }\n    /**\n   * @summary Gets a list of subreddits in which the currently-authenticated user is an approved submitter.\n   * @param {object} [options] Options for the resulting Listing\n   * @returns {Promise} A Listing containing Subreddits\n   * @example\n   *\n   * r.getContributorSubreddits().then(console.log)\n   * // => Listing [\n   * //  Subreddit {\n   * //    display_name: 'snoowrap_testing',\n   * //    title: 'snoowrap',\n   * //    ...\n   * //  }\n   * // ]\n   *\n   */ getContributorSubreddits(options) {\n        return this._getListing({\n            uri: \"subreddits/mine/contributor\",\n            qs: options\n        });\n    }\n    /**\n   * @summary Gets a list of subreddits in which the currently-authenticated user is a moderator.\n   * @param {object} [options] Options for the resulting Listing\n   * @returns {Promise} A Listing containing Subreddits\n   * @example\n   *\n   * r.getModeratedSubreddits().then(console.log)\n   * // => Listing [\n   * //  Subreddit {\n   * //    display_name: 'snoowrap_testing',\n   * //    title: 'snoowrap',\n   * //    ...\n   * //  }\n   * // ]\n   */ getModeratedSubreddits(options) {\n        return this._getListing({\n            uri: \"subreddits/mine/moderator\",\n            qs: options\n        });\n    }\n    /**\n   * @summary Searches subreddits by title and description.\n   * @param {object} options Options for the search. May also contain Listing parameters.\n   * @param {string} options.query The search query\n   * @returns {Promise} A Listing containing Subreddits\n   * @example\n   *\n   * r.searchSubreddits({query: 'cookies'}).then(console.log)\n   * // => Listing [ Subreddit { ... }, Subreddit { ... }, ...]\n   */ searchSubreddits(options) {\n        options.q = options.query;\n        return this._getListing({\n            uri: \"subreddits/search\",\n            qs: (0, _lodash.omit)(options, \"query\")\n        });\n    }\n    /**\n   * @summary Gets a list of subreddits, arranged by popularity.\n   * @param {object} [options] Options for the resulting Listing\n   * @returns {Promise} A Listing containing Subreddits\n   * @example\n   *\n   * r.getPopularSubreddits().then(console.log)\n   * // => Listing [ Subreddit { ... }, Subreddit { ... }, ...]\n   */ getPopularSubreddits(options) {\n        return this._getListing({\n            uri: \"subreddits/popular\",\n            qs: options\n        });\n    }\n    /**\n   * @summary Gets a list of subreddits, arranged by age.\n   * @param {object} [options] Options for the resulting Listing\n   * @returns {Promise} A Listing containing Subreddits\n   * @example\n   *\n   * r.getNewSubreddits().then(console.log)\n   * // => Listing [ Subreddit { ... }, Subreddit { ... }, ...]\n   */ getNewSubreddits(options) {\n        return this._getListing({\n            uri: \"subreddits/new\",\n            qs: options\n        });\n    }\n    /**\n   * @summary Gets a list of gold-exclusive subreddits.\n   * @param {object} [options] Options for the resulting Listing\n   * @returns {Promise} A Listing containing Subreddits\n   * @example\n   *\n   * r.getGoldSubreddits().then(console.log)\n   * // => Listing [ Subreddit { ... }, Subreddit { ... }, ...]\n   */ getGoldSubreddits(options) {\n        return this._getListing({\n            uri: \"subreddits/gold\",\n            qs: options\n        });\n    }\n    /**\n   * @summary Gets a list of default subreddits.\n   * @param {object} [options] Options for the resulting Listing\n   * @returns {Promise} A Listing containing Subreddits\n   * @example\n   *\n   * r.getDefaultSubreddits().then(console.log)\n   * // => Listing [ Subreddit { ... }, Subreddit { ... }, ...]\n   */ getDefaultSubreddits(options) {\n        return this._getListing({\n            uri: \"subreddits/default\",\n            qs: options\n        });\n    }\n    /**\n   * @summary Checks whether a given username is available for registration\n   * @desc **Note:** This function will not work when snoowrap is running in a browser, due to an issue with reddit's CORS\n   settings.\n   * @param {string} name The username in question\n   * @returns {Promise} A Promise that fulfills with a Boolean (`true` or `false`)\n   * @example\n   *\n   * r.checkUsernameAvailability('not_an_aardvark').then(console.log)\n   * // => false\n   * r.checkUsernameAvailability('eqwZAr9qunx7IHqzWVeF').then(console.log)\n   * // => true\n   */ checkUsernameAvailability(name) {\n        // The oauth endpoint listed in reddit's documentation doesn't actually work, so just send an unauthenticated request.\n        return this.unauthenticatedRequest({\n            uri: \"api/username_available.json\",\n            qs: {\n                user: name\n            }\n        });\n    }\n    /**\n   * @summary Creates a new LiveThread.\n   * @param {object} options\n   * @param {string} options.title The title of the livethread (100 characters max)\n   * @param {string} [options.description] A descriptions of the thread. 120 characters max\n   * @param {string} [options.resources] Information and useful links related to the thread. 120 characters max\n   * @param {boolean} [options.nsfw=false] Determines whether the thread is Not Safe For Work\n   * @returns {Promise} A Promise that fulfills with the new LiveThread when the request is complete\n   * @example\n   *\n   * r.createLivethread({title: 'My livethread'}).then(console.log)\n   * // => LiveThread { id: 'wpimncm1f01j' }\n   */ createLivethread(_ref12) {\n        var _this11 = this;\n        var title = _ref12.title, description = _ref12.description, resources = _ref12.resources, _ref12$nsfw = _ref12.nsfw, nsfw = _ref12$nsfw === void 0 ? false : _ref12$nsfw;\n        return this._post({\n            uri: \"api/live/create\",\n            form: {\n                api_type,\n                description,\n                nsfw,\n                resources,\n                title\n            }\n        }).tap((0, _helpers.handleJsonErrors)(this)).then(function(result) {\n            return _this11.getLivethread(result.json.data.id);\n        });\n    }\n    /**\n   * @summary Gets the \"happening now\" LiveThread, if it exists\n   * @desc This is the LiveThread that is occasionally linked at the top of reddit.com, relating to current events.\n   * @returns {Promise} A Promise that fulfills with the \"happening now\" LiveThread if it exists, or rejects with a 404 error\n   otherwise.\n   * @example r.getCurrentEventsLivethread().then(thread => thread.stream.on('update', console.log))\n   */ getStickiedLivethread() {\n        return this._get({\n            uri: \"api/live/happening_now\"\n        });\n    }\n    /**\n   * @summary Gets the user's own multireddits.\n   * @returns {Promise} A Promise for an Array containing the requester's MultiReddits.\n   * @example\n   *\n   * r.getMyMultireddits().then(console.log)\n   * => [ MultiReddit { ... }, MultiReddit { ... }, ... ]\n   */ getMyMultireddits() {\n        return this._get({\n            uri: \"api/multi/mine\",\n            qs: {\n                expand_srs: true\n            }\n        });\n    }\n    /**\n   * @summary Creates a new multireddit.\n   * @param {object} options\n   * @param {string} options.name The name of the new multireddit. 50 characters max\n   * @param {string} options.description A description for the new multireddit, in markdown.\n   * @param {Array} options.subreddits An Array of Subreddit objects (or subreddit names) that this multireddit should compose of\n   * @param {string} [options.visibility='private'] The multireddit's visibility setting. One of `private`, `public`, `hidden`.\n   * @param {string} [options.icon_name=''] One of `art and design`, `ask`, `books`, `business`, `cars`, `comics`,\n   `cute animals`, `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, `life advice`, `military`,\n   `models pinup`, `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`,\n   `travel`, `unusual stories`, `video`, `None`\n   * @param {string} [options.key_color='#000000'] A six-digit RGB hex color, preceded by '#'\n   * @param {string} [options.weighting_scheme='classic'] One of `classic`, `fresh`\n   * @returns {Promise} A Promise for the newly-created MultiReddit object\n   * @example\n   *\n   * r.createMultireddit({\n   *   name: 'myMulti',\n   *   description: 'An example multireddit',\n   *   subreddits: ['snoowrap', 'snoowrap_testing']\n   * }).then(console.log)\n   * => MultiReddit { display_name: 'myMulti', ... }\n   */ createMultireddit(_ref13) {\n        var name = _ref13.name, description = _ref13.description, subreddits = _ref13.subreddits, _ref13$visibility = _ref13.visibility, visibility = _ref13$visibility === void 0 ? \"private\" : _ref13$visibility, _ref13$icon_name = _ref13.icon_name, icon_name = _ref13$icon_name === void 0 ? \"\" : _ref13$icon_name, _ref13$key_color = _ref13.key_color, key_color = _ref13$key_color === void 0 ? \"#000000\" : _ref13$key_color, _ref13$weighting_sche = _ref13.weighting_scheme, weighting_scheme = _ref13$weighting_sche === void 0 ? \"classic\" : _ref13$weighting_sche;\n        return this._post({\n            uri: \"api/multi\",\n            form: {\n                model: JSON.stringify({\n                    display_name: name,\n                    description_md: description,\n                    icon_name,\n                    key_color,\n                    subreddits: subreddits.map(function(sub) {\n                        return {\n                            name: typeof sub === \"string\" ? sub : sub.display_name\n                        };\n                    }),\n                    visibility,\n                    weighting_scheme\n                })\n            }\n        });\n    }\n    _revokeToken(token) {\n        return this.credentialedClientRequest({\n            uri: \"api/v1/revoke_token\",\n            form: {\n                token\n            },\n            method: \"post\"\n        });\n    }\n    /**\n   * @summary Invalidates the current access token.\n   * @returns {Promise} A Promise that fulfills when this request is complete\n   * @desc **Note**: This can only be used if the current requester was supplied with a `client_id` and `client_secret`. If the\n   current requester was supplied with a refresh token, it will automatically create a new access token if any more requests\n   are made after this one.\n   * @example r.revokeAccessToken();\n   */ revokeAccessToken() {\n        var _this12 = this;\n        return this._revokeToken(this.accessToken).then(function() {\n            _this12.accessToken = null;\n            _this12.tokenExpiration = null;\n        });\n    }\n    /**\n   * @summary Invalidates the current refresh token.\n   * @returns {Promise} A Promise that fulfills when this request is complete\n   * @desc **Note**: This can only be used if the current requester was supplied with a `client_id` and `client_secret`. All\n   access tokens generated by this refresh token will also be invalidated. This effectively de-authenticates the requester and\n   prevents it from making any more valid requests. This should only be used in a few cases, e.g. if this token has\n   been accidentally leaked to a third party.\n   * @example r.revokeRefreshToken();\n   */ revokeRefreshToken() {\n        var _this13 = this;\n        return this._revokeToken(this.refreshToken).then(function() {\n            _this13.refreshToken = null;\n            _this13.accessToken = null; // Revoking a refresh token also revokes any associated access tokens.\n            _this13.tokenExpiration = null;\n        });\n    }\n    _selectFlair(_ref14) {\n        var _this14 = this;\n        var flair_template_id = _ref14.flair_template_id, link = _ref14.link, name = _ref14.name, text = _ref14.text, subredditName = _ref14.subredditName;\n        if (!flair_template_id) {\n            throw new errors.InvalidMethodCallError(\"No flair template ID provided\");\n        }\n        return _Promise.default.resolve(subredditName).then(function(subName) {\n            return _this14._post({\n                uri: \"r/\".concat(subName, \"/api/selectflair\"),\n                form: {\n                    api_type,\n                    flair_template_id,\n                    link,\n                    name,\n                    text\n                }\n            });\n        });\n    }\n    _assignFlair(_ref15) {\n        var _this15 = this;\n        var css_class = _ref15.css_class, _ref15$cssClass = _ref15.cssClass, cssClass = _ref15$cssClass === void 0 ? css_class : _ref15$cssClass, link = _ref15.link, name = _ref15.name, text = _ref15.text, subreddit_name = _ref15.subreddit_name, _ref15$subredditName = _ref15.subredditName, subredditName = _ref15$subredditName === void 0 ? subreddit_name : _ref15$subredditName;\n        return this._promiseWrap(_Promise.default.resolve(subredditName).then(function(displayName) {\n            return _this15._post({\n                uri: \"r/\".concat(displayName, \"/api/flair\"),\n                form: {\n                    api_type,\n                    name,\n                    text,\n                    link,\n                    css_class: cssClass\n                }\n            });\n        }));\n    }\n    _populate(responseTree) {\n        var _this16 = this;\n        if (typeof responseTree === \"object\" && responseTree !== null) {\n            // Map {kind: 't2', data: {name: 'some_username', ... }} to a RedditUser (e.g.) with the same properties\n            if (Object.keys(responseTree).length === 2 && responseTree.kind && responseTree.data) {\n                return this._newObject(_constants.KINDS[responseTree.kind] || \"RedditContent\", this._populate(responseTree.data), true);\n            }\n            var result = (Array.isArray(responseTree) ? _lodash.map : _lodash.mapValues)(responseTree, function(value, key) {\n                // Maps {author: 'some_username'} to {author: RedditUser { name: 'some_username' } }\n                if (value !== null && _constants.USER_KEYS.has(key)) {\n                    return _this16._newObject(\"RedditUser\", {\n                        name: value\n                    });\n                }\n                if (value !== null && _constants.SUBREDDIT_KEYS.has(key)) {\n                    return _this16._newObject(\"Subreddit\", {\n                        display_name: value\n                    });\n                }\n                return _this16._populate(value);\n            });\n            if (result.length === 2 && result[0] instanceof snoowrap.objects.Listing && result[0][0] instanceof snoowrap.objects.Submission && result[1] instanceof snoowrap.objects.Listing) {\n                if (result[1]._more && !result[1]._more.link_id) {\n                    result[1]._more.link_id = result[0][0].name;\n                }\n                result[0][0].comments = result[1];\n                return result[0][0];\n            }\n            return result;\n        }\n        return responseTree;\n    }\n    _getListing(_ref16) {\n        var uri = _ref16.uri, _ref16$qs = _ref16.qs, qs = _ref16$qs === void 0 ? {} : _ref16$qs, options = _objectWithoutProperties(_ref16, [\n            \"uri\",\n            \"qs\"\n        ]);\n        /* When the response type is expected to be a Listing, add a `count` parameter with a very high number.\n    This ensures that reddit returns a `before` property in the resulting Listing to enable pagination.\n    (Aside from the additional parameter, this function is equivalent to snoowrap.prototype._get) */ var mergedQuery = _objectSpread({\n            count: 9999\n        }, qs);\n        return qs.limit || !(0, _lodash.isEmpty)(options) ? this._newObject(\"Listing\", _objectSpread({\n            _query: mergedQuery,\n            _uri: uri\n        }, options)).fetchMore(qs.limit || _constants.MAX_LISTING_ITEMS) : this._get({\n            uri,\n            qs: mergedQuery\n        }).then(function(listing) {\n            if (Array.isArray(listing)) {\n                listing.filter(function(item) {\n                    return item.constructor._name === \"Comment\";\n                }).forEach(_helpers.addEmptyRepliesListing);\n            }\n            return listing;\n        });\n    }\n    /**\n   * @summary In browsers, restores the `window.snoowrap` property to whatever it was before this instance of snoowrap was\n   loaded. This is a no-op in Node.\n   * @returns This instance of the snoowrap constructor\n   * @example var snoowrap = window.snoowrap.noConflict();\n   */ static noConflict() {\n        if (_helpers.isBrowser) {\n            global[_constants.MODULE_NAME] = this._previousSnoowrap;\n        }\n        return this;\n    }\n};\nfunction identity(value) {\n    return value;\n}\n(0, _helpers.defineInspectFunc)(snoowrap.prototype, function() {\n    // Hide confidential information (tokens, client IDs, etc.), as well as private properties, from the console.log output.\n    var keysForHiddenValues = [\n        \"clientSecret\",\n        \"refreshToken\",\n        \"accessToken\",\n        \"password\"\n    ];\n    var formatted = (0, _lodash.mapValues)((0, _lodash.omitBy)(this, function(value, key) {\n        return typeof key === \"string\" && key.startsWith(\"_\");\n    }), function(value, key) {\n        return (0, _lodash.includes)(keysForHiddenValues, key) ? value && \"(redacted)\" : value;\n    });\n    return \"\".concat(_constants.MODULE_NAME, \" \").concat(_util.default.inspect(formatted));\n});\nvar classFuncDescriptors = {\n    configurable: true,\n    writable: true\n};\n/* Add the request_handler functions (oauth_request, credentialed_client_request, etc.) to the snoowrap prototype. Use\nObject.defineProperties to ensure that the properties are non-enumerable. */ Object.defineProperties(snoowrap.prototype, (0, _lodash.mapValues)(requestHandler, function(func) {\n    return _objectSpread({\n        value: func\n    }, classFuncDescriptors);\n}));\n_constants.HTTP_VERBS.forEach(function(method) {\n    /* Define method shortcuts for each of the HTTP verbs. i.e. `snoowrap.prototype._post` is the same as `oauth_request` except\n  that the HTTP method defaults to `post`, and the result is promise-wrapped. Use Object.defineProperty to ensure that the\n  properties are non-enumerable. */ Object.defineProperty(snoowrap.prototype, \"_\".concat(method), _objectSpread({\n        value (options) {\n            return this._promiseWrap(this.oauthRequest(_objectSpread({}, options, {\n                method\n            })));\n        }\n    }, classFuncDescriptors));\n});\n/* `objects` will be an object containing getters for each content type, due to the way objects are exported from\nobjects/index.js. To unwrap these getters into direct properties, use lodash.mapValues with an identity function. */ snoowrap.objects = (0, _lodash.mapValues)(objects, function(value) {\n    return value;\n});\n(0, _lodash.forOwn)(_constants.KINDS, function(value) {\n    snoowrap.objects[value] = snoowrap.objects[value] || class extends objects.RedditContent {\n    };\n    Object.defineProperty(snoowrap.objects[value], \"_name\", {\n        value,\n        configurable: true\n    });\n}); // Alias all functions on snoowrap's prototype and snoowrap's object prototypes in snake_case.\n(0, _lodash.values)(snoowrap.objects).concat(snoowrap).map(function(func) {\n    return func.prototype;\n}).forEach(function(funcProto) {\n    Object.getOwnPropertyNames(funcProto).filter(function(name) {\n        return !name.startsWith(\"_\") && name !== (0, _lodash.snakeCase)(name) && typeof funcProto[name] === \"function\";\n    }).forEach(function(name) {\n        return Object.defineProperty(funcProto, (0, _lodash.snakeCase)(name), _objectSpread({\n            value: funcProto[name]\n        }, classFuncDescriptors));\n    });\n});\nsnoowrap.errors = errors;\nsnoowrap.version = _constants.VERSION;\nif (!module.parent && _helpers.isBrowser) {\n    // check if the code is being run in a browser through browserify, etc.\n    snoowrap._previousSnoowrap = global[_constants.MODULE_NAME];\n    global[_constants.MODULE_NAME] = snoowrap;\n}\nmodule.exports = snoowrap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vb3dyYXAvZGlzdC9zbm9vd3JhcC5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFFYixJQUFJQSxVQUFVQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUU5QixJQUFJQyxXQUFXQyx1QkFBdUJGLG1CQUFPQSxDQUFDLG1FQUFjO0FBRTVELElBQUlHLGlCQUFpQkQsdUJBQXVCRixtQkFBT0EsQ0FBQyxvRUFBZ0I7QUFFcEUsSUFBSUksUUFBUUYsdUJBQXVCRixtQkFBT0EsQ0FBQyxrQkFBTTtBQUVqRCxJQUFJSyxpQkFBaUJDLHdCQUF3Qk4sbUJBQU9BLENBQUMsbUZBQXNCO0FBRTNFLElBQUlPLGFBQWFQLG1CQUFPQSxDQUFDLHVFQUFnQjtBQUV6QyxJQUFJUSxTQUFTRix3QkFBd0JOLG1CQUFPQSxDQUFDLGlFQUFhO0FBRTFELElBQUlTLFdBQVdULG1CQUFPQSxDQUFDLG1FQUFjO0FBRXJDLElBQUlVLGlCQUFpQlIsdUJBQXVCRixtQkFBT0EsQ0FBQywrRUFBb0I7QUFFeEUsSUFBSVcsVUFBVUwsd0JBQXdCTixtQkFBT0EsQ0FBQywrRUFBb0I7QUFFbEUsU0FBU00sd0JBQXdCTSxHQUFHO0lBQUksSUFBSUEsT0FBT0EsSUFBSUMsVUFBVSxFQUFFO1FBQUUsT0FBT0Q7SUFBSyxPQUFPO1FBQUUsSUFBSUUsU0FBUyxDQUFDO1FBQUcsSUFBSUYsT0FBTyxNQUFNO1lBQUUsSUFBSyxJQUFJRyxPQUFPSCxJQUFLO2dCQUFFLElBQUlJLE9BQU9DLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLEtBQUtHLE1BQU07b0JBQUUsSUFBSUssT0FBT0osT0FBT0ssY0FBYyxJQUFJTCxPQUFPTSx3QkFBd0IsR0FBR04sT0FBT00sd0JBQXdCLENBQUNWLEtBQUtHLE9BQU8sQ0FBQztvQkFBRyxJQUFJSyxLQUFLRyxHQUFHLElBQUlILEtBQUtJLEdBQUcsRUFBRTt3QkFBRVIsT0FBT0ssY0FBYyxDQUFDUCxRQUFRQyxLQUFLSztvQkFBTyxP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b3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3Nub293cmFwL2Rpc3Qvc25vb3dyYXAuanM/Mjg3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9sb2Rhc2ggPSByZXF1aXJlKFwibG9kYXNoXCIpO1xuXG52YXIgX1Byb21pc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1Byb21pc2UuanNcIikpO1xuXG52YXIgX3Byb21pc2VDaGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9taXNlLWNoYWluc1wiKSk7XG5cbnZhciBfdXRpbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInV0aWxcIikpO1xuXG52YXIgcmVxdWVzdEhhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9yZXF1ZXN0X2hhbmRsZXIuanNcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50cy5qc1wiKTtcblxudmFyIGVycm9ycyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2Vycm9ycy5qc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuL2hlbHBlcnMuanNcIik7XG5cbnZhciBfY3JlYXRlX2NvbmZpZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlX2NvbmZpZy5qc1wiKSk7XG5cbnZhciBvYmplY3RzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vb2JqZWN0cy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIGFwaV90eXBlID0gJ2pzb24nO1xuLyoqIFRoZSBjbGFzcyBmb3IgYSBzbm9vd3JhcCByZXF1ZXN0ZXIuXG4gKiBBIHJlcXVlc3RlciBpcyB0aGUgYmFzZSBvYmplY3QgdGhhdCBpcyB1c2VkIHRvIGZldGNoIGNvbnRlbnQgZnJvbSByZWRkaXQuIEVhY2ggcmVxdWVzdGVyIGNvbnRhaW5zIGEgc2luZ2xlIHNldCBvZiBPQXV0aFxuIHRva2Vucy5cblxuIElmIGNvbnN0cnVjdGVkIHdpdGggYSByZWZyZXNoIHRva2VuLCBhIHJlcXVlc3RlciB3aWxsIGJlIGFibGUgdG8gcmVwZWF0ZWRseSBnZW5lcmF0ZSBhY2Nlc3MgdG9rZW5zIGFzIG5lY2Vzc2FyeSwgd2l0aG91dCBhbnlcbiBmdXJ0aGVyIHVzZXIgaW50ZXJ2ZW50aW9uLiBBZnRlciBtYWtpbmcgYXQgbGVhc3Qgb25lIHJlcXVlc3QsIGEgcmVxdWVzdGVyIHdpbGwgaGF2ZSB0aGUgYGFjY2Vzc190b2tlbmAgcHJvcGVydHksIHdoaWNoIHNwZWNpZmllc1xuIHRoZSBhY2Nlc3MgdG9rZW4gY3VycmVudGx5IGluIHVzZS4gSXQgd2lsbCBhbHNvIGhhdmUgYSBmZXcgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHN1Y2ggYXMgYHNjb3BlYCAoYW4gYXJyYXkgb2Ygc2NvcGUgc3RyaW5ncylcbiBhbmQgYHJhdGVsaW1pdFJlbWFpbmluZ2AgKHRoZSBudW1iZXIgb2YgcmVxdWVzdHMgcmVtYWluaW5nIGZvciB0aGUgY3VycmVudCAxMC1taW51dGUgaW50ZXJ2YWwsIGluIGNvbXBsaWFuY2Ugd2l0aCByZWRkaXQnc1xuIFtBUEkgcnVsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWRkaXQvcmVkZGl0L3dpa2kvQVBJKS4pIFRoZXNlIHByb3BlcnRpZXMgcHJpbWFyaWx5IGV4aXN0IGZvciBpbnRlcm5hbCB1c2UsIGJ1dCB0aGV5IGFyZVxuIGV4cG9zZWQgc2luY2UgdGhleSBhcmUgdXNlZnVsIGV4dGVybmFsbHkgYXMgd2VsbC5cbiAqL1xuXG52YXIgc25vb3dyYXAgPSBjbGFzcyBzbm9vd3JhcCB7XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBDb25zdHJ1Y3RzIGEgbmV3IHJlcXVlc3Rlci5cbiAgICogQGRlc2MgWW91IHNob3VsZCB1c2UgdGhlIHNub293cmFwIGNvbnN0cnVjdG9yIGlmIHlvdSBhcmUgYWJsZSB0byBhdXRob3JpemUgYSByZWRkaXQgYWNjb3VudCBpbiBhZHZhbmNlIChlLmcuIGZvciBhIE5vZGUuanNcbiAgIHNjcmlwdCB0aGF0IGFsd2F5cyB1c2VzIHRoZSBzYW1lIGFjY291bnQpLiBJZiB5b3UgYXJlbid0IGFibGUgdG8gYXV0aG9yaXplIGluIGFkdmFuY2UgKGUuZy4gYWN0aW5nIHRocm91Z2ggYW4gYXJiaXRyYXJ5IHVzZXInc1xuICAgYWNjb3VudCB3aGlsZSBydW5uaW5nIHNub293cmFwIGluIGEgYnJvd3NlciksIHRoZW4geW91IHNob3VsZCB1c2Uge0BsaW5rIHNub293cmFwLmdldEF1dGhVcmx9IGFuZFxuICAge0BsaW5rIHNub293cmFwLmZyb21BdXRoQ29kZX0gaW5zdGVhZC5cbiAgICpcbiAgICogVG8gZWRpdCBzbm9vd3JhcCBzcGVjaWZpYyBzZXR0aW5ncywgc2VlIHtAbGluayBzbm9vd3JhcCNjb25maWd9LlxuICAgKlxuICAgKiBzbm9vd3JhcCBzdXBwb3J0cyBzZXZlcmFsIGRpZmZlcmVudCBvcHRpb25zIGZvciBwcmUtZXhpc3RpbmcgYXV0aGVudGljYXRpb246XG4gICAqIDEuICpSZWZyZXNoIHRva2VuKjogVG8gYXV0aGVudGljYXRlIHdpdGggYSByZWZyZXNoIHRva2VuLCBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGB1c2VyQWdlbnRgLCBgY2xpZW50SWRgLFxuICAgYGNsaWVudFNlY3JldGAsIGFuZCBgcmVmcmVzaFRva2VuYCB0byB0aGUgc25vb3dyYXAgY29uc3RydWN0b3IuIFlvdSB3aWxsIG5lZWQgdG8gZ2V0IHRoZSByZWZyZXNoIHRva2VuIGZyb20gcmVkZGl0XG4gICBiZWZvcmVoYW5kLiBBIHNjcmlwdCB0byBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlIHJlZnJlc2ggdG9rZW5zIGZvciB5b3UgY2FuIGJlIGZvdW5kXG4gICBbaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL25vdC1hbi1hYXJkdmFyay9yZWRkaXQtb2F1dGgtaGVscGVyKS5cbiAgICogMS4gKlVzZXJuYW1lL3Bhc3N3b3JkKjogVG8gYXV0aGVudGljYXRlIHdpdGggYSB1c2VybmFtZSBhbmQgcGFzc3dvcmQsIHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIHByb3BlcnRpZXMgYHVzZXJBZ2VudGAsXG4gICBgY2xpZW50SWRgLCBgY2xpZW50U2VjcmV0YCwgYHVzZXJuYW1lYCwgYW5kIGBwYXNzd29yZGAgdG8gdGhlIHNub293cmFwIGNvbnN0cnVjdG9yLiBOb3RlIHRoYXQgdXNlcm5hbWUvcGFzc3dvcmRcbiAgIGF1dGhlbnRpY2F0aW9uIGlzIG9ubHkgcG9zc2libGUgZm9yIGBzY3JpcHRgLXR5cGUgYXBwcy5cbiAgICogMS4gKkFjY2VzcyB0b2tlbio6IFRvIGF1dGhlbnRpY2F0ZSB3aXRoIGFuIGFjY2VzcyB0b2tlbiwgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgcHJvcGVydGllcyBgdXNlckFnZW50YCBhbmQgYGFjY2Vzc1Rva2VuYFxuICAgdG8gdGhlIHNub293cmFwIGNvbnN0cnVjdG9yLiBOb3RlIHRoYXQgYWxsIGFjY2VzcyB0b2tlbnMgZXhwaXJlIG9uZSBob3VyIGFmdGVyIGJlaW5nIGdlbmVyYXRlZCwgc28gdGhpcyBtZXRob2QgaXNcbiAgIG5vdCByZWNvbW1lbmRlZCBmb3IgbG9uZy10ZXJtIHVzZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgYXV0aGVudGljYXRpb24gb3B0aW9ucy4gVGhpcyBzaG91bGQgYWx3YXlzIGhhdmUgdGhlIHByb3BlcnR5IGB1c2VyQWdlbnRgLiBJdFxuICAgbXVzdCBhbHNvIGNvbnRhaW4gc29tZSBjb21iaW5hdGlvbiBvZiBjcmVkZW50aWFscyAoc2VlIGFib3ZlKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy51c2VyQWdlbnQgQSB1bmlxdWUgZGVzY3JpcHRpb24gb2Ygd2hhdCB5b3VyIGFwcCBkb2VzLiBUaGlzIGFyZ3VtZW50IGlzIG5vdCBuZWNlc3Nhcnkgd2hlbiBzbm9vd3JhcFxuICAgaXMgcnVubmluZyBpbiBhIGJyb3dzZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jbGllbnRJZF0gVGhlIGNsaWVudCBJRCBvZiB5b3VyIGFwcCAoYXNzaWduZWQgYnkgcmVkZGl0KVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY2xpZW50U2VjcmV0XSBUaGUgY2xpZW50IHNlY3JldCBvZiB5b3VyIGFwcCAoYXNzaWduZWQgYnkgcmVkZGl0KS4gSWYgeW91IGFyZSB1c2luZyBhIHJlZnJlc2ggdG9rZW5cbiAgIHdpdGggYW4gaW5zdGFsbGVkIGFwcCAod2hpY2ggZG9lcyBub3QgaGF2ZSBhIGNsaWVudCBzZWNyZXQpLCBwYXNzIGFuIGVtcHR5IHN0cmluZyBhcyB5b3VyIGBjbGllbnRTZWNyZXRgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudXNlcm5hbWVdIFRoZSB1c2VybmFtZSBvZiB0aGUgYWNjb3VudCB0byBhY2Nlc3NcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnBhc3N3b3JkXSBUaGUgcGFzc3dvcmQgb2YgdGhlIGFjY291bnQgdG8gYWNjZXNzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5yZWZyZXNoVG9rZW5dIEEgcmVmcmVzaCB0b2tlbiBmb3IgeW91ciBhcHBcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFjY2Vzc1Rva2VuXSBBbiBhY2Nlc3MgdG9rZW4gZm9yIHlvdXIgYXBwXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgIHVzZXJfYWdlbnQgPSBfcmVmLnVzZXJfYWdlbnQsXG4gICAgICAgIF9yZWYkdXNlckFnZW50ID0gX3JlZi51c2VyQWdlbnQsXG4gICAgICAgIHVzZXJBZ2VudCA9IF9yZWYkdXNlckFnZW50ID09PSB2b2lkIDAgPyB1c2VyX2FnZW50IDogX3JlZiR1c2VyQWdlbnQsXG4gICAgICAgIGNsaWVudF9pZCA9IF9yZWYuY2xpZW50X2lkLFxuICAgICAgICBfcmVmJGNsaWVudElkID0gX3JlZi5jbGllbnRJZCxcbiAgICAgICAgY2xpZW50SWQgPSBfcmVmJGNsaWVudElkID09PSB2b2lkIDAgPyBjbGllbnRfaWQgOiBfcmVmJGNsaWVudElkLFxuICAgICAgICBjbGllbnRfc2VjcmV0ID0gX3JlZi5jbGllbnRfc2VjcmV0LFxuICAgICAgICBfcmVmJGNsaWVudFNlY3JldCA9IF9yZWYuY2xpZW50U2VjcmV0LFxuICAgICAgICBjbGllbnRTZWNyZXQgPSBfcmVmJGNsaWVudFNlY3JldCA9PT0gdm9pZCAwID8gY2xpZW50X3NlY3JldCA6IF9yZWYkY2xpZW50U2VjcmV0LFxuICAgICAgICByZWZyZXNoX3Rva2VuID0gX3JlZi5yZWZyZXNoX3Rva2VuLFxuICAgICAgICBfcmVmJHJlZnJlc2hUb2tlbiA9IF9yZWYucmVmcmVzaFRva2VuLFxuICAgICAgICByZWZyZXNoVG9rZW4gPSBfcmVmJHJlZnJlc2hUb2tlbiA9PT0gdm9pZCAwID8gcmVmcmVzaF90b2tlbiA6IF9yZWYkcmVmcmVzaFRva2VuLFxuICAgICAgICBhY2Nlc3NfdG9rZW4gPSBfcmVmLmFjY2Vzc190b2tlbixcbiAgICAgICAgX3JlZiRhY2Nlc3NUb2tlbiA9IF9yZWYuYWNjZXNzVG9rZW4sXG4gICAgICAgIGFjY2Vzc1Rva2VuID0gX3JlZiRhY2Nlc3NUb2tlbiA9PT0gdm9pZCAwID8gYWNjZXNzX3Rva2VuIDogX3JlZiRhY2Nlc3NUb2tlbixcbiAgICAgICAgdXNlcm5hbWUgPSBfcmVmLnVzZXJuYW1lLFxuICAgICAgICBwYXNzd29yZCA9IF9yZWYucGFzc3dvcmQ7XG5cbiAgICBpZiAoIXVzZXJBZ2VudCAmJiAhX2hlbHBlcnMuaXNCcm93c2VyKSB7XG4gICAgICByZXR1cm4gKDAsIF9oZWxwZXJzLnJlcXVpcmVkQXJnKSgndXNlckFnZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKCghYWNjZXNzVG9rZW4gfHwgdHlwZW9mIGFjY2Vzc1Rva2VuICE9PSAnc3RyaW5nJykgJiYgKGNsaWVudElkID09PSB1bmRlZmluZWQgfHwgY2xpZW50U2VjcmV0ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHJlZnJlc2hUb2tlbiAhPT0gJ3N0cmluZycpICYmIChjbGllbnRJZCA9PT0gdW5kZWZpbmVkIHx8IGNsaWVudFNlY3JldCA9PT0gdW5kZWZpbmVkIHx8IHVzZXJuYW1lID09PSB1bmRlZmluZWQgfHwgcGFzc3dvcmQgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9DcmVkZW50aWFsc0Vycm9yKCk7XG4gICAgfVxuXG4gICAgaWYgKF9oZWxwZXJzLmlzQnJvd3Nlcikge1xuICAgICAgdGhpcy51c2VyQWdlbnQgPSBnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICB9XG5cbiAgICAoMCwgX2xvZGFzaC5kZWZhdWx0cykodGhpcywge1xuICAgICAgdXNlckFnZW50LFxuICAgICAgY2xpZW50SWQsXG4gICAgICBjbGllbnRTZWNyZXQsXG4gICAgICByZWZyZXNoVG9rZW4sXG4gICAgICBhY2Nlc3NUb2tlbixcbiAgICAgIHVzZXJuYW1lLFxuICAgICAgcGFzc3dvcmRcbiAgICB9LCB7XG4gICAgICBjbGllbnRJZDogbnVsbCxcbiAgICAgIGNsaWVudFNlY3JldDogbnVsbCxcbiAgICAgIHJlZnJlc2hUb2tlbjogbnVsbCxcbiAgICAgIGFjY2Vzc1Rva2VuOiBudWxsLFxuICAgICAgdXNlcm5hbWU6IG51bGwsXG4gICAgICBwYXNzd29yZDogbnVsbCxcbiAgICAgIHJhdGVsaW1pdFJlbWFpbmluZzogbnVsbCxcbiAgICAgIHJhdGVsaW1pdEV4cGlyYXRpb246IG51bGwsXG4gICAgICB0b2tlbkV4cGlyYXRpb246IG51bGwsXG4gICAgICBzY29wZTogbnVsbCxcbiAgICAgIF9jb25maWc6ICgwLCBfY3JlYXRlX2NvbmZpZy5kZWZhdWx0KSgpLFxuICAgICAgX25leHRSZXF1ZXN0VGltZXN0YW1wOiAtSW5maW5pdHlcbiAgICB9KTtcbiAgICAoMCwgX2hlbHBlcnMuYWRkU25ha2VDYXNlU2hhZG93UHJvcHMpKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBHZXRzIGFuIGF1dGhvcml6YXRpb24gVVJMLCB3aGljaCBhbGxvd3MgYSB1c2VyIHRvIGF1dGhvcml6ZSBhY2Nlc3MgdG8gdGhlaXIgYWNjb3VudFxuICAgKiBAZGVzYyBUaGlzIGNyZWF0ZSBhIFVSTCB3aGVyZSBhIHVzZXIgY2FuIGF1dGhvcml6ZSBhbiBhcHAgdG8gYWN0IHRocm91Z2ggdGhlaXIgYWNjb3VudC4gSWYgdGhlIHVzZXIgdmlzaXRzIHRoZSByZXR1cm5lZCBVUkxcbiAgIGluIGEgd2ViIGJyb3dzZXIsIHRoZXkgd2lsbCBzZWUgYSBwYWdlIHRoYXQgbG9va3MgbGlrZSBbdGhpc10oaHR0cHM6Ly9pLmd5YXpvLmNvbS8wMzI1NTM0ZjM4Yjc4YzFkYmQ0Yzg0ZDY5MGRkYTZjMi5wbmcpLiBJZlxuICAgdGhlIHVzZXIgY2xpY2tzIFwiQWxsb3dcIiwgdGhleSB3aWxsIGJlIHJlZGlyZWN0ZWQgdG8geW91ciBgcmVkaXJlY3RVcmlgLCB3aXRoIGEgYGNvZGVgIHF1ZXJ5c3RyaW5nIHBhcmFtZXRlciBjb250YWluaW5nIGFuXG4gICAqICphdXRob3JpemF0aW9uIGNvZGUqLiBJZiB0aGlzIGNvZGUgaXMgcGFzc2VkIHRvIHtAbGluayBzbm9vd3JhcC5mcm9tQXV0aENvZGV9LCB5b3UgY2FuIGNyZWF0ZSBhIHJlcXVlc3RlciB0byBtYWtlXG4gICByZXF1ZXN0cyBvbiBiZWhhbGYgb2YgdGhlIHVzZXIuXG4gICAqXG4gICAqIFRoZSBtYWluIHVzZS1jYXNlIGhlcmUgaXMgZm9yIHJ1bm5pbmcgc25vb3dyYXAgaW4gYSBicm93c2VyLiBZb3UgY2FuIGdlbmVyYXRlIGEgVVJMLCBzZW5kIHRoZSB1c2VyIHRoZXJlLCBhbmQgdGhlbiBjb250aW51ZVxuICAgYWZ0ZXIgdGhlIHVzZXIgYXV0aGVudGljYXRlcyBvbiByZWRkaXQgYW5kIGlzIHJlZGlyZWN0ZWQgYmFjay5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuY2xpZW50SWQgVGhlIGNsaWVudCBJRCBvZiB5b3VyIGFwcCAoYXNzaWduZWQgYnkgcmVkZGl0KS4gSWYgeW91ciBjb2RlIGlzIHJ1bm5pbmcgY2xpZW50c2lkZSBpbiBhXG4gICBicm93c2VyLCB1c2luZyBhbiBcIkluc3RhbGxlZFwiIGFwcCB0eXBlIGlzIHJlY29tbWVuZGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBvcHRpb25zLnNjb3BlIEFuIGFycmF5IG9mIHNjb3BlcyAocGVybWlzc2lvbnMgb24gdGhlIHVzZXIncyBhY2NvdW50KSB0byByZXF1ZXN0IG9uIHRoZSBhdXRoZW50aWNhdGlvblxuICAgcGFnZS4gQSBsaXN0IG9mIHBvc3NpYmxlIHNjb3BlcyBjYW4gYmUgZm91bmQgW2hlcmVdKGh0dHBzOi8vd3d3LnJlZGRpdC5jb20vYXBpL3YxL3Njb3BlcykuIFlvdSBjYW4gYWxzbyBnZXQgdGhlbSBvbi10aGUtZmx5XG4gICB3aXRoIHtAbGluayBzbm9vd3JhcCNnZXRPYXV0aFNjb3BlTGlzdH0uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnJlZGlyZWN0VXJpIFRoZSBVUkwgd2hlcmUgdGhlIHVzZXIgc2hvdWxkIGJlIHJlZGlyZWN0ZWQgYWZ0ZXIgYXV0aGVudGljYXRpbmcuIFRoaXMgKiptdXN0KiogYmUgdGhlXG4gICBzYW1lIGFzIHRoZSByZWRpcmVjdCBVUkkgdGhhdCBpcyBjb25maWd1cmVkIGZvciB0aGUgcmVkZGl0IGFwcC4gKElmIHRoZXJlIGlzIGEgbWlzbWF0Y2gsIHRoZSByZXR1cm5lZCBVUkwgd2lsbCBkaXNwbGF5IGFuXG4gICBlcnJvciBwYWdlIGluc3RlYWQgb2YgYW4gYXV0aGVudGljYXRpb24gZm9ybS4pXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucGVybWFuZW50PXRydWVdIElmIGB0cnVlYCwgdGhlIGFwcCB3aWxsIGhhdmUgaW5kZWZpbml0ZSBhY2Nlc3MgdG8gdGhlIHVzZXIncyBhY2NvdW50LiBJZiBgZmFsc2VgLFxuICAgYWNjZXNzIHRvIHRoZSB1c2VyJ3MgYWNjb3VudCB3aWxsIGV4cGlyZSBhZnRlciAxIGhvdXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zdGF0ZV0gQSBzdHJpbmcgdGhhdCBjYW4gYmUgdXNlZCB0byB2ZXJpZnkgYSB1c2VyIGFmdGVyIHRoZXkgYXJlIHJlZGlyZWN0ZWQgYmFjayB0byB0aGUgc2l0ZS4gV2hlblxuICAgdGhlIHVzZXIgaXMgcmVkaXJlY3RlZCBmcm9tIHJlZGRpdCwgdG8gdGhlIHJlZGlyZWN0IFVSSSBhZnRlciBhdXRoZW50aWNhdGluZywgdGhlIHJlc3VsdGluZyBVUkkgd2lsbCBoYXZlIHRoaXMgc2FtZSBgc3RhdGVgXG4gICB2YWx1ZSBpbiB0aGUgcXVlcnlzdHJpbmcuIChTZWUgW2hlcmVdKGh0dHA6Ly93d3cudHdvYm90ZWNobm9sb2dpZXMuY29tL2Jsb2cvMjAxNC8wMi9pbXBvcnRhbmNlLW9mLXN0YXRlLWluLW9hdXRoMi5odG1sKSBmb3JcbiAgIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IHRvIHVzZSB0aGUgYHN0YXRlYCB2YWx1ZS4pXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5lbmRwb2ludERvbWFpbj0ncmVkZGl0LmNvbSddIFRoZSBlbmRwb2ludCBkb21haW4gZm9yIHRoZSBVUkwuIElmIHRoZSB1c2VyIGlzIGF1dGhlbnRpY2F0aW5nIG9uXG4gICByZWRkaXQuY29tIChhcyBvcHBvc2VkIHRvIHNvbWUgb3RoZXIgc2l0ZSB3aXRoIGEgcmVkZGl0LWxpa2UgQVBJKSwgeW91IGNhbiBvbWl0IHRoaXMgdmFsdWUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IEEgVVJMIHdoZXJlIHRoZSB1c2VyIGNhbiBhdXRoZW50aWNhdGUgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9uc1xuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiB2YXIgYXV0aGVudGljYXRpb25VcmwgPSBzbm9vd3JhcC5nZXRBdXRoVXJsKHtcbiAgICogICBjbGllbnRJZDogJ2Zvb2JhcmJhenF1dXV4JyxcbiAgICogICBzY29wZTogWydpZGVudGl0eScsICd3aWtpcmVhZCcsICd3aWtpZWRpdCddLFxuICAgKiAgIHJlZGlyZWN0VXJpOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9yZWRkaXRfY2FsbGJhY2snLFxuICAgKiAgIHBlcm1hbmVudDogZmFsc2UsXG4gICAqICAgc3RhdGU6ICdmZTIxMWJlYmM1MmViM2RhOWJlZjhkYjZlNjMxMDRkMycgLy8gYSByYW5kb20gc3RyaW5nLCB0aGlzIGNvdWxkIGJlIHZhbGlkYXRlZCB3aGVuIHRoZSB1c2VyIGlzIHJlZGlyZWN0ZWQgYmFja1xuICAgKiB9KTtcbiAgICogLy8gLS0+ICdodHRwczovL3d3dy5yZWRkaXQuY29tL2FwaS92MS9hdXRob3JpemU/Y2xpZW50X2lkPWZvb2JhcmJheiZyZXNwb25zZV90eXBlPWNvZGUmc3RhdGU9IC4uLidcbiAgICpcbiAgICogd2luZG93LmxvY2F0aW9uLmhyZWYgPSBhdXRoZW50aWNhdGlvblVybDsgLy8gc2VuZCB0aGUgdXNlciB0byB0aGUgYXV0aGVudGljYXRpb24gdXJsXG4gICAqL1xuXG5cbiAgc3RhdGljIGdldEF1dGhVcmwoX3JlZjIpIHtcbiAgICB2YXIgX3JlZjIkY2xpZW50SWQgPSBfcmVmMi5jbGllbnRJZCxcbiAgICAgICAgY2xpZW50SWQgPSBfcmVmMiRjbGllbnRJZCA9PT0gdm9pZCAwID8gKDAsIF9oZWxwZXJzLnJlcXVpcmVkQXJnKSgnY2xpZW50SWQnKSA6IF9yZWYyJGNsaWVudElkLFxuICAgICAgICBfcmVmMiRzY29wZSA9IF9yZWYyLnNjb3BlLFxuICAgICAgICBzY29wZSA9IF9yZWYyJHNjb3BlID09PSB2b2lkIDAgPyAoMCwgX2hlbHBlcnMucmVxdWlyZWRBcmcpKCdzY29wZScpIDogX3JlZjIkc2NvcGUsXG4gICAgICAgIF9yZWYyJHJlZGlyZWN0VXJpID0gX3JlZjIucmVkaXJlY3RVcmksXG4gICAgICAgIHJlZGlyZWN0VXJpID0gX3JlZjIkcmVkaXJlY3RVcmkgPT09IHZvaWQgMCA/ICgwLCBfaGVscGVycy5yZXF1aXJlZEFyZykoJ3JlZGlyZWN0VXJpJykgOiBfcmVmMiRyZWRpcmVjdFVyaSxcbiAgICAgICAgX3JlZjIkcGVybWFuZW50ID0gX3JlZjIucGVybWFuZW50LFxuICAgICAgICBwZXJtYW5lbnQgPSBfcmVmMiRwZXJtYW5lbnQgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRwZXJtYW5lbnQsXG4gICAgICAgIF9yZWYyJHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICAgIHN0YXRlID0gX3JlZjIkc3RhdGUgPT09IHZvaWQgMCA/ICdfJyA6IF9yZWYyJHN0YXRlLFxuICAgICAgICBfcmVmMiRlbmRwb2ludERvbWFpbiA9IF9yZWYyLmVuZHBvaW50RG9tYWluLFxuICAgICAgICBlbmRwb2ludERvbWFpbiA9IF9yZWYyJGVuZHBvaW50RG9tYWluID09PSB2b2lkIDAgPyAncmVkZGl0LmNvbScgOiBfcmVmMiRlbmRwb2ludERvbWFpbjtcblxuICAgIGlmICghKEFycmF5LmlzQXJyYXkoc2NvcGUpICYmIHNjb3BlLmxlbmd0aCAmJiBzY29wZS5ldmVyeShmdW5jdGlvbiAoc2NvcGVWYWx1ZSkge1xuICAgICAgcmV0dXJuIHNjb3BlVmFsdWUgJiYgdHlwZW9mIHNjb3BlVmFsdWUgPT09ICdzdHJpbmcnO1xuICAgIH0pKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWlzc2luZyBgc2NvcGVgIGFyZ3VtZW50OyBhIG5vbi1lbXB0eSBsaXN0IG9mIE9BdXRoIHNjb3BlcyBtdXN0IGJlIHByb3ZpZGVkJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXFxuICAgICAgaHR0cHM6Ly93d3cuXCIuY29uY2F0KGVuZHBvaW50RG9tYWluLCBcIi9hcGkvdjEvYXV0aG9yaXplP1xcbiAgICAgIGNsaWVudF9pZD1cIikuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChjbGllbnRJZCksIFwiXFxuICAgICAgJnJlc3BvbnNlX3R5cGU9Y29kZVxcbiAgICAgICZzdGF0ZT1cIikuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChzdGF0ZSksIFwiXFxuICAgICAgJnJlZGlyZWN0X3VyaT1cIikuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChyZWRpcmVjdFVyaSksIFwiXFxuICAgICAgJmR1cmF0aW9uPVwiKS5jb25jYXQocGVybWFuZW50ID8gJ3Blcm1hbmVudCcgOiAndGVtcG9yYXJ5JywgXCJcXG4gICAgICAmc2NvcGU9XCIpLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoc2NvcGUuam9pbignICcpKSwgXCJcXG4gICAgXCIpLnJlcGxhY2UoL1xccy9nLCAnJyk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBzbm9vd3JhcCByZXF1ZXN0ZXIgZnJvbSBhbiBhdXRob3JpemF0aW9uIGNvZGUuXG4gICAqIEBkZXNjIEFuIGF1dGhvcml6YXRpb24gY29kZSBpcyB0aGUgYGNvZGVgIHZhbHVlIHRoYXQgYXBwZWFycyBpbiB0aGUgcXVlcnlzdHJpbmcgYWZ0ZXIgYSB1c2VyIGF1dGhlbnRpY2F0ZXMgd2l0aCByZWRkaXQgYW5kXG4gICBpcyByZWRpcmVjdGVkLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHtAbGluayBzbm9vd3JhcC5nZXRBdXRoVXJsfS5cbiAgICpcbiAgICogVGhlIG1haW4gdXNlLWNhc2UgZm9yIHRoaXMgZnVuY3Rpb24gaXMgZm9yIHJ1bm5pbmcgc25vb3dyYXAgaW4gYSBicm93c2VyLiBZb3UgY2FuIGdlbmVyYXRlIGEgVVJMIHdpdGhcbiAgIHtAbGluayBzbm9vd3JhcC5nZXRBdXRoVXJsfSBhbmQgc2VuZCB0aGUgdXNlciB0byB0aGF0IFVSTCwgYW5kIHRoZW4gdXNlIHRoaXMgZnVuY3Rpb24gdG8gY3JlYXRlIGEgcmVxdWVzdGVyIHdoZW5cbiAgIHRoZSB1c2VyIGlzIHJlZGlyZWN0ZWQgYmFjayB3aXRoIGFuIGF1dGhvcml6YXRpb24gY29kZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuY29kZSBUaGUgYXV0aG9yaXphdGlvbiBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnVzZXJBZ2VudCBBIHVuaXF1ZSBkZXNjcmlwdGlvbiBvZiB3aGF0IHlvdXIgYXBwIGRvZXMuIFRoaXMgYXJndW1lbnQgaXMgbm90IG5lY2Vzc2FyeSB3aGVuIHNub293cmFwXG4gICBpcyBydW5uaW5nIGluIGEgYnJvd3Nlci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuY2xpZW50SWQgVGhlIGNsaWVudCBJRCBvZiB5b3VyIGFwcCAoYXNzaWduZWQgYnkgcmVkZGl0KS4gSWYgeW91ciBjb2RlIGlzIHJ1bm5pbmcgY2xpZW50c2lkZSBpbiBhXG4gICBicm93c2VyLCB1c2luZyBhbiBcIkluc3RhbGxlZFwiIGFwcCB0eXBlIGlzIHJlY29tbWVuZGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY2xpZW50U2VjcmV0XSBUaGUgY2xpZW50IHNlY3JldCBvZiB5b3VyIGFwcC4gSWYgeW91ciBhcHAgaGFzIHRoZSBcIkluc3RhbGxlZFwiIGFwcCB0eXBlLCBvbWl0XG4gICB0aGlzIHBhcmFtZXRlci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMucmVkaXJlY3RVcmkgVGhlIHJlZGlyZWN0IFVSSSB0aGF0IGlzIGNvbmZpZ3VyZWQgZm9yIHRoZSByZWRkaXQgYXBwLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZW5kcG9pbnREb21haW49J3JlZGRpdC5jb20nXSBUaGUgZW5kcG9pbnQgZG9tYWluIHRoYXQgdGhlIHJldHVybmVkIHJlcXVlc3RlciBzaG91bGQgYmUgY29uZmlndXJlZFxuICAgdG8gdXNlLiBJZiB0aGUgdXNlciBpcyBhdXRoZW50aWNhdGluZyBvbiByZWRkaXQuY29tIChhcyBvcHBvc2VkIHRvIHNvbWUgb3RoZXIgc2l0ZSB3aXRoIGEgcmVkZGl0LWxpa2UgQVBJKSwgeW91IGNhbiBvbWl0IHRoaXNcbiAgIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzbm9vd3JhcD59IEEgUHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdpdGggYSBgc25vb3dyYXBgIGluc3RhbmNlXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIC8vIEdldCB0aGUgYGNvZGVgIHF1ZXJ5c3RyaW5nIHBhcmFtIChhc3N1bWluZyB0aGUgdXNlciB3YXMgcmVkaXJlY3RlZCBmcm9tIHJlZGRpdClcbiAgICogdmFyIGNvZGUgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKS5zZWFyY2hQYXJhbXMuZ2V0KCdjb2RlJyk7XG4gICAqXG4gICAqIHNub293cmFwLmZyb21BdXRoQ29kZSh7XG4gICAqICAgY29kZTogY29kZSxcbiAgICogICB1c2VyQWdlbnQ6ICdNeSBhcHAnLFxuICAgKiAgIGNsaWVudElkOiAnZm9vYmFyYmF6cXV1dXgnLFxuICAgKiAgIHJlZGlyZWN0VXJpOiAnZXhhbXBsZS5jb20nXG4gICAqIH0pLnRoZW4ociA9PiB7XG4gICAqICAgLy8gTm93IHdlIGhhdmUgYSByZXF1ZXN0ZXIgdGhhdCBjYW4gYWNjZXNzIHJlZGRpdCB0aHJvdWdoIHRoZSB1c2VyJ3MgYWNjb3VudFxuICAgKiAgIHJldHVybiByLmdldEhvdCgpLnRoZW4ocG9zdHMgPT4ge1xuICAgKiAgICAgLy8gZG8gc29tZXRoaW5nIHdpdGggcG9zdHMgZnJvbSB0aGUgZnJvbnQgcGFnZVxuICAgKiAgIH0pO1xuICAgKiB9KVxuICAgKi9cblxuXG4gIHN0YXRpYyBmcm9tQXV0aENvZGUoX3JlZjMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF9yZWYzJGNvZGUgPSBfcmVmMy5jb2RlLFxuICAgICAgICBjb2RlID0gX3JlZjMkY29kZSA9PT0gdm9pZCAwID8gKDAsIF9oZWxwZXJzLnJlcXVpcmVkQXJnKSgnY29kZScpIDogX3JlZjMkY29kZSxcbiAgICAgICAgX3JlZjMkdXNlckFnZW50ID0gX3JlZjMudXNlckFnZW50LFxuICAgICAgICB1c2VyQWdlbnQgPSBfcmVmMyR1c2VyQWdlbnQgPT09IHZvaWQgMCA/IF9oZWxwZXJzLmlzQnJvd3NlciA/IGdsb2JhbC5uYXZpZ2F0b3IudXNlckFnZW50IDogKDAsIF9oZWxwZXJzLnJlcXVpcmVkQXJnKSgndXNlckFnZW50JykgOiBfcmVmMyR1c2VyQWdlbnQsXG4gICAgICAgIF9yZWYzJGNsaWVudElkID0gX3JlZjMuY2xpZW50SWQsXG4gICAgICAgIGNsaWVudElkID0gX3JlZjMkY2xpZW50SWQgPT09IHZvaWQgMCA/ICgwLCBfaGVscGVycy5yZXF1aXJlZEFyZykoJ2NsaWVudElkJykgOiBfcmVmMyRjbGllbnRJZCxcbiAgICAgICAgY2xpZW50U2VjcmV0ID0gX3JlZjMuY2xpZW50U2VjcmV0LFxuICAgICAgICBfcmVmMyRyZWRpcmVjdFVyaSA9IF9yZWYzLnJlZGlyZWN0VXJpLFxuICAgICAgICByZWRpcmVjdFVyaSA9IF9yZWYzJHJlZGlyZWN0VXJpID09PSB2b2lkIDAgPyAoMCwgX2hlbHBlcnMucmVxdWlyZWRBcmcpKCdyZWRpcmVjdFVyaScpIDogX3JlZjMkcmVkaXJlY3RVcmksXG4gICAgICAgIF9yZWYzJGVuZHBvaW50RG9tYWluID0gX3JlZjMuZW5kcG9pbnREb21haW4sXG4gICAgICAgIGVuZHBvaW50RG9tYWluID0gX3JlZjMkZW5kcG9pbnREb21haW4gPT09IHZvaWQgMCA/ICdyZWRkaXQuY29tJyA6IF9yZWYzJGVuZHBvaW50RG9tYWluO1xuICAgIHJldHVybiB0aGlzLnByb3RvdHlwZS5jcmVkZW50aWFsZWRDbGllbnRSZXF1ZXN0LmNhbGwoe1xuICAgICAgdXNlckFnZW50LFxuICAgICAgY2xpZW50SWQsXG4gICAgICBjbGllbnRTZWNyZXQsXG4gICAgICAvLyBVc2UgYHRoaXMucHJvdG90eXBlLnJhd1JlcXVlc3RgIGZ1bmN0aW9uIHRvIGFsbG93IGZvciBjdXN0b20gYHJhd1JlcXVlc3RgIG1ldGhvZCB1c2FnZSBpbiBzdWJjbGFzc2VzLlxuICAgICAgcmF3UmVxdWVzdDogdGhpcy5wcm90b3R5cGUucmF3UmVxdWVzdFxuICAgIH0sIHtcbiAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgYmFzZVVybDogXCJodHRwczovL3d3dy5cIi5jb25jYXQoZW5kcG9pbnREb21haW4sIFwiL1wiKSxcbiAgICAgIHVyaTogJ2FwaS92MS9hY2Nlc3NfdG9rZW4nLFxuICAgICAgZm9ybToge1xuICAgICAgICBncmFudF90eXBlOiAnYXV0aG9yaXphdGlvbl9jb2RlJyxcbiAgICAgICAgY29kZSxcbiAgICAgICAgcmVkaXJlY3RfdXJpOiByZWRpcmVjdFVyaVxuICAgICAgfVxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5SZXF1ZXN0RXJyb3IoXCJBUEkgRXJyb3I6IFwiLmNvbmNhdChyZXNwb25zZS5lcnJvciwgXCIgLSBcIikuY29uY2F0KHJlc3BvbnNlLmVycm9yX2Rlc2NyaXB0aW9uKSk7XG4gICAgICB9IC8vIFVzZSBgbmV3IHRoaXNgIGluc3RlYWQgb2YgYG5ldyBzbm9vd3JhcGAgdG8gZW5zdXJlIHRoYXQgc3ViY2xhc3MgaW5zdGFuY2VzIGNhbiBiZSByZXR1cm5lZFxuXG5cbiAgICAgIHZhciByZXF1ZXN0ZXIgPSBuZXcgX3RoaXMoX29iamVjdFNwcmVhZCh7XG4gICAgICAgIHVzZXJBZ2VudCxcbiAgICAgICAgY2xpZW50SWQsXG4gICAgICAgIGNsaWVudFNlY3JldFxuICAgICAgfSwgcmVzcG9uc2UpKTtcbiAgICAgIHJlcXVlc3Rlci5jb25maWcoe1xuICAgICAgICBlbmRwb2ludERvbWFpblxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVxdWVzdGVyO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBSZXR1cm5zIHRoZSBncmFudCB0eXBlcyBhdmFpbGFibGUgZm9yIGFwcC1vbmx5IGF1dGhlbnRpY2F0aW9uXG4gICAqIEBkZXNjIFBlciB0aGUgUmVkZGl0IEFQSSBPQXV0aCBkb2NzLCB0aGVyZSBhcmUgdHdvIGRpZmZlcmVudCBncmFudCB0eXBlcyBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgYXBwIGlzIGFuIGluc3RhbGxlZCBjbGllbnRcbiAgICogb3IgYSBjb25maWRlbnRpYWwgY2xpZW50IHN1Y2ggYXMgYSB3ZWIgYXBwIG9yIHN0cmluZy4gVGhpcyBnZXR0ZXIgcmV0dXJucyB0aGUgcG9zc2libGUgdmFsdWVzIGZvciB0aGUgXCJncmFudF90eXBlXCIgZmllbGRcbiAgICogaW4gYXBwbGljYXRpb24tb25seSBhdXRoLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgZW51bWVyYXRpb24gb2YgcG9zc2libGUgZ3JhbnRfdHlwZSB2YWx1ZXNcbiAgICovXG5cblxuICBzdGF0aWMgZ2V0IGdyYW50VHlwZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgQ0xJRU5UX0NSRURFTlRJQUxTOiAnY2xpZW50X2NyZWRlbnRpYWxzJyxcbiAgICAgIElOU1RBTExFRF9DTElFTlQ6ICdodHRwczovL29hdXRoLnJlZGRpdC5jb20vZ3JhbnRzL2luc3RhbGxlZF9jbGllbnQnXG4gICAgfTtcbiAgfVxuICAvKipcbiAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgc25vb3dyYXAgcmVxdWVzdGVyIGZyb20gYSBcInVzZXItbGVzc1wiIEF1dGhvcml6YXRpb24gdG9rZW5cbiAgKiBAZGVzYyBJbiBzb21lIGNhc2VzLCAzcmQgcGFydHkgYXBwIGNsaWVudHMgbWF5IHdpc2ggdG8gbWFrZSBBUEkgcmVxdWVzdHMgd2l0aG91dCBhIHVzZXIgY29udGV4dC4gQXBwIGNsaWVudHMgY2FuIHJlcXVlc3RcbiAgKiBhIFwidXNlci1sZXNzXCIgQXV0aG9yaXphdGlvbiB0b2tlbiB2aWEgZWl0aGVyIHRoZSBzdGFuZGFyZCBjbGllbnRfY3JlZGVudGlhbHMgZ3JhbnQsIG9yIHRoZSByZWRkaXQgc3BlY2lmaWNcbiAgKiBleHRlbnNpb24gdG8gdGhpcyBncmFudCwgaHR0cHM6Ly9vYXV0aC5yZWRkaXQuY29tL2dyYW50cy9pbnN0YWxsZWRfY2xpZW50LiBXaGljaCBncmFudCB0eXBlIGFuIGFwcCB1c2VzIGRlcGVuZHMgb25cbiAgKiB0aGUgYXBwLXR5cGUgYW5kIGl0cyB1c2UgY2FzZS5cbiAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnVzZXJBZ2VudCBBIHVuaXF1ZSBkZXNjcmlwdGlvbiBvZiB3aGF0IHlvdXIgYXBwIGRvZXMuIFRoaXMgYXJndW1lbnQgaXMgbm90IG5lY2Vzc2FyeSB3aGVuIHNub293cmFwXG4gIGlzIHJ1bm5pbmcgaW4gYSBicm93c2VyLlxuICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmNsaWVudElkIFRoZSBjbGllbnQgSUQgb2YgeW91ciBhcHAgKGFzc2lnbmVkIGJ5IHJlZGRpdCkuIElmIHlvdXIgY29kZSBpcyBydW5uaW5nIGNsaWVudHNpZGUgaW4gYVxuICAqIGJyb3dzZXIsIHVzaW5nIGFuIFwiSW5zdGFsbGVkXCIgYXBwIHR5cGUgaXMgcmVjb21tZW5kZWQuXG4gICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmNsaWVudFNlY3JldF0gVGhlIGNsaWVudCBzZWNyZXQgb2YgeW91ciBhcHAuIE9ubHkgcmVxdWlyZWQgZm9yIFwiY2xpZW50X2NyZWRlbnRpYWxzXCIgZ3JhbnQgdHlwZS5cbiAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZGV2aWNlSWRdIEEgdW5pcXVlLCBwZXItZGV2aWNlIElEIGdlbmVyYXRlZCBieSB5b3VyIGNsaWVudC4gT25seSByZXF1aXJlZFxuICAqIGZvciBcIkluc3RhbGxlZFwiIGdyYW50IHR5cGUsIG5lZWRzIHRvIGJlIGJldHdlZW4gMjAtMzAgY2hhcmFjdGVycyBsb25nLiBGcm9tIHRoZSByZWRkaXQgZG9jczogXCJyZWRkaXQgKm1heSogY2hvb3NlIHRvIHVzZVxuICAqIHRoaXMgSUQgdG8gZ2VuZXJhdGUgYWdncmVnYXRlIGRhdGEgYWJvdXQgdXNlciBjb3VudHMuIENsaWVudHMgdGhhdCB3aXNoIHRvIHJlbWFpbiBhbm9ueW1vdXMgc2hvdWxkIHVzZSB0aGUgdmFsdWVcbiAgKiBET19OT1RfVFJBQ0tfVEhJU19ERVZJQ0UuXCJcbiAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZ3JhbnRUeXBlPXNub293cmFwLmdyYW50VHlwZS5JTlNUQUxMRURfQ0xJRU5UXSBUaGUgdHlwZSBvZiBcInVzZXItbGVzc1wiXG4gICogdG9rZW4gdG8gdXNlIHtAbGluayBzbm9vd3JhcC5ncmFudFR5cGV9XG4gICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wZXJtYW5lbnQ9dHJ1ZV0gSWYgYHRydWVgLCB0aGUgYXBwIHdpbGwgaGF2ZSBpbmRlZmluaXRlIGFjY2Vzcy4gSWYgYGZhbHNlYCxcbiAgYWNjZXNzIHdpbGwgZXhwaXJlIGFmdGVyIDEgaG91ci5cbiAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZW5kcG9pbnREb21haW49J3JlZGRpdC5jb20nXSBUaGUgZW5kcG9pbnQgZG9tYWluIHRoYXQgdGhlIHJldHVybmVkIHJlcXVlc3RlciBzaG91bGQgYmUgY29uZmlndXJlZFxuICB0byB1c2UuIElmIHRoZSB1c2VyIGlzIGF1dGhlbnRpY2F0aW5nIG9uIHJlZGRpdC5jb20gKGFzIG9wcG9zZWQgdG8gc29tZSBvdGhlciBzaXRlIHdpdGggYSByZWRkaXQtbGlrZSBBUEkpLCB5b3UgY2FuIG9taXQgdGhpc1xuICB2YWx1ZS5cbiAgKiBAcmV0dXJucyB7UHJvbWlzZTxzbm9vd3JhcD59IEEgUHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdpdGggYSBgc25vb3dyYXBgIGluc3RhbmNlXG4gICogQGV4YW1wbGVcbiAgKlxuICAqIHNub293cmFwLmZyb21BcHBsaWNhdGlvbk9ubHlBdXRoKHtcbiAgKiAgIHVzZXJBZ2VudDogJ015IGFwcCcsXG4gICogICBjbGllbnRJZDogJ2Zvb2JhcmJhenF1dXV4JyxcbiAgKiAgIGRldmljZUlkOiAndW5pcXVlIGlkIGJldHdlZW4gMjAtMzAgY2hhcnMnLFxuICAqICAgZ3JhbnRUeXBlOiBzbm9vd3JhcC5ncmFudFR5cGUuSU5TVEFMTEVEX0NMSUVOVFxuICAqIH0pLnRoZW4ociA9PiB7XG4gICogICAvLyBOb3cgd2UgaGF2ZSBhIHJlcXVlc3RlciB0aGF0IGNhbiBhY2Nlc3MgcmVkZGl0IHRocm91Z2ggYSBcInVzZXItbGVzc1wiIEF1dGggdG9rZW5cbiAgKiAgIHJldHVybiByLmdldEhvdCgpLnRoZW4ocG9zdHMgPT4ge1xuICAqICAgICAvLyBkbyBzb21ldGhpbmcgd2l0aCBwb3N0cyBmcm9tIHRoZSBmcm9udCBwYWdlXG4gICogICB9KTtcbiAgKiB9KVxuICAqXG4gICogc25vb3dyYXAuZnJvbUFwcGxpY2F0aW9uT25seUF1dGgoe1xuICAqICAgdXNlckFnZW50OiAnTXkgYXBwJyxcbiAgKiAgIGNsaWVudElkOiAnZm9vYmFyYmF6cXV1dXgnLFxuICAqICAgY2xpZW50U2VjcmV0OiAneW91ciB3ZWIgYXBwIHNlY3JldCcsXG4gICogICBncmFudFR5cGU6IHNub293cmFwLmdyYW50VHlwZS5DTElFTlRfQ1JFREVOVElBTFNcbiAgKiB9KS50aGVuKHIgPT4ge1xuICAqICAgLy8gTm93IHdlIGhhdmUgYSByZXF1ZXN0ZXIgdGhhdCBjYW4gYWNjZXNzIHJlZGRpdCB0aHJvdWdoIGEgXCJ1c2VyLWxlc3NcIiBBdXRoIHRva2VuXG4gICogICByZXR1cm4gci5nZXRIb3QoKS50aGVuKHBvc3RzID0+IHtcbiAgKiAgICAgLy8gZG8gc29tZXRoaW5nIHdpdGggcG9zdHMgZnJvbSB0aGUgZnJvbnQgcGFnZVxuICAqICAgfSk7XG4gICogfSlcbiAgKi9cblxuXG4gIHN0YXRpYyBmcm9tQXBwbGljYXRpb25Pbmx5QXV0aChfcmVmNCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9yZWY0JHVzZXJBZ2VudCA9IF9yZWY0LnVzZXJBZ2VudCxcbiAgICAgICAgdXNlckFnZW50ID0gX3JlZjQkdXNlckFnZW50ID09PSB2b2lkIDAgPyBfaGVscGVycy5pc0Jyb3dzZXIgPyBnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCA6ICgwLCBfaGVscGVycy5yZXF1aXJlZEFyZykoJ3VzZXJBZ2VudCcpIDogX3JlZjQkdXNlckFnZW50LFxuICAgICAgICBfcmVmNCRjbGllbnRJZCA9IF9yZWY0LmNsaWVudElkLFxuICAgICAgICBjbGllbnRJZCA9IF9yZWY0JGNsaWVudElkID09PSB2b2lkIDAgPyAoMCwgX2hlbHBlcnMucmVxdWlyZWRBcmcpKCdjbGllbnRJZCcpIDogX3JlZjQkY2xpZW50SWQsXG4gICAgICAgIGNsaWVudFNlY3JldCA9IF9yZWY0LmNsaWVudFNlY3JldCxcbiAgICAgICAgZGV2aWNlSWQgPSBfcmVmNC5kZXZpY2VJZCxcbiAgICAgICAgX3JlZjQkZ3JhbnRUeXBlID0gX3JlZjQuZ3JhbnRUeXBlLFxuICAgICAgICBncmFudFR5cGUgPSBfcmVmNCRncmFudFR5cGUgPT09IHZvaWQgMCA/IHNub293cmFwLmdyYW50VHlwZS5JTlNUQUxMRURfQ0xJRU5UIDogX3JlZjQkZ3JhbnRUeXBlLFxuICAgICAgICBfcmVmNCRwZXJtYW5lbnQgPSBfcmVmNC5wZXJtYW5lbnQsXG4gICAgICAgIHBlcm1hbmVudCA9IF9yZWY0JHBlcm1hbmVudCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWY0JHBlcm1hbmVudCxcbiAgICAgICAgX3JlZjQkZW5kcG9pbnREb21haW4gPSBfcmVmNC5lbmRwb2ludERvbWFpbixcbiAgICAgICAgZW5kcG9pbnREb21haW4gPSBfcmVmNCRlbmRwb2ludERvbWFpbiA9PT0gdm9pZCAwID8gJ3JlZGRpdC5jb20nIDogX3JlZjQkZW5kcG9pbnREb21haW47XG4gICAgcmV0dXJuIHRoaXMucHJvdG90eXBlLmNyZWRlbnRpYWxlZENsaWVudFJlcXVlc3QuY2FsbCh7XG4gICAgICBjbGllbnRJZCxcbiAgICAgIGNsaWVudFNlY3JldCxcbiAgICAgIC8vIFVzZSBgdGhpcy5wcm90b3R5cGUucmF3UmVxdWVzdGAgZnVuY3Rpb24gdG8gYWxsb3cgZm9yIGN1c3RvbSBgcmF3UmVxdWVzdGAgbWV0aG9kIHVzYWdlIGluIHN1YmNsYXNzZXMuXG4gICAgICByYXdSZXF1ZXN0OiB0aGlzLnByb3RvdHlwZS5yYXdSZXF1ZXN0XG4gICAgfSwge1xuICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICBiYXNlVXJsOiBcImh0dHBzOi8vd3d3LlwiLmNvbmNhdChlbmRwb2ludERvbWFpbiwgXCIvXCIpLFxuICAgICAgdXJpOiAnYXBpL3YxL2FjY2Vzc190b2tlbicsXG4gICAgICBmb3JtOiB7XG4gICAgICAgIGdyYW50X3R5cGU6IGdyYW50VHlwZSxcbiAgICAgICAgZGV2aWNlX2lkOiBkZXZpY2VJZCxcbiAgICAgICAgZHVyYXRpb246IHBlcm1hbmVudCA/ICdwZXJtYW5lbnQnIDogJ3RlbXBvcmFyeSdcbiAgICAgIH1cbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuUmVxdWVzdEVycm9yKFwiQVBJIEVycm9yOiBcIi5jb25jYXQocmVzcG9uc2UuZXJyb3IsIFwiIC0gXCIpLmNvbmNhdChyZXNwb25zZS5lcnJvcl9kZXNjcmlwdGlvbikpO1xuICAgICAgfSAvLyBVc2UgYG5ldyB0aGlzYCBpbnN0ZWFkIG9mIGBuZXcgc25vb3dyYXBgIHRvIGVuc3VyZSB0aGF0IHN1YmNsYXNzIGluc3RhbmNlcyBjYW4gYmUgcmV0dXJuZWRcblxuXG4gICAgICB2YXIgcmVxdWVzdGVyID0gbmV3IF90aGlzMihfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgdXNlckFnZW50LFxuICAgICAgICBjbGllbnRJZCxcbiAgICAgICAgY2xpZW50U2VjcmV0XG4gICAgICB9LCByZXNwb25zZSkpO1xuICAgICAgcmVxdWVzdGVyLmNvbmZpZyh7XG4gICAgICAgIGVuZHBvaW50RG9tYWluXG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXF1ZXN0ZXI7XG4gICAgfSk7XG4gIH1cblxuICBfbmV3T2JqZWN0KG9iamVjdFR5cGUsIGNvbnRlbnQpIHtcbiAgICB2YXIgX2hhc0ZldGNoZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY29udGVudCkgPyBjb250ZW50IDogbmV3IHNub293cmFwLm9iamVjdHNbb2JqZWN0VHlwZV0oY29udGVudCwgdGhpcywgX2hhc0ZldGNoZWQpO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBSZXRyaWV2ZXMgb3IgbW9kaWZpZXMgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhpcyBzbm9vd3JhcCBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBBIG1hcCBvZiBge1tjb25maWcgcHJvcGVydHkgbmFtZV06IHZhbHVlfWAuIE5vdGUgdGhhdCBhbnkgb21pdHRlZCBjb25maWcgcHJvcGVydGllcyB3aWxsIHNpbXBseVxuICAgcmV0YWluIHdoYXRldmVyIHZhbHVlIHRoZXkgaGFkIHByZXZpb3VzbHkuIChJbiBvdGhlciB3b3JkcywgaWYgeW91IG9ubHkgd2FudCB0byBjaGFuZ2Ugb25lIHByb3BlcnR5LCB5b3Ugb25seSBuZWVkIHRvIHB1dFxuICAgdGhhdCBvbmUgcHJvcGVydHkgaW4gdGhpcyBwYXJhbWV0ZXIuIFRvIGdldCB0aGUgY3VycmVudCBjb25maWd1cmF0aW9uIHdpdGhvdXQgbW9kaWZ5aW5nIGFueXRoaW5nLCBzaW1wbHkgb21pdCB0aGlzXG4gICBwYXJhbWV0ZXIuKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZW5kcG9pbnREb21haW49J3JlZGRpdC5jb20nXSBUaGUgZW5kcG9pbnQgd2hlcmUgcmVxdWVzdHMgc2hvdWxkIGJlIHNlbnRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnJlcXVlc3REZWxheT0wXSBBIG1pbmltdW0gZGVsYXksIGluIG1pbGxpc2Vjb25kcywgdG8gZW5mb3JjZSBiZXR3ZWVuIEFQSSBjYWxscy4gSWYgbXVsdGlwbGVcbiAgIGFwaSBjYWxscyBhcmUgcmVxdWVzdGVkIGR1cmluZyB0aGlzIHRpbWVzcGFuLCB0aGV5IHdpbGwgYmUgcXVldWVkIGFuZCBzZW50IG9uZSBhdCBhIHRpbWUuIFNldHRpbmcgdGhpcyB0byBtb3JlIHRoYW4gMTAwMCB3aWxsXG4gICBlbnN1cmUgdGhhdCByZWRkaXQncyByYXRlbGltaXQgaXMgbmV2ZXIgcmVhY2hlZCwgYnV0IGl0IHdpbGwgbWFrZSB0aGluZ3MgcnVuIHNsb3dlciB0aGFuIG5lY2Vzc2FyeSBpZiBvbmx5IGEgZmV3IHJlcXVlc3RzXG4gICBhcmUgYmVpbmcgc2VudC4gSWYgdGhpcyBpcyBzZXQgdG8gemVybywgc25vb3dyYXAgd2lsbCBub3QgZW5mb3JjZSBhbnkgZGVsYXkgYmV0d2VlbiBpbmRpdmlkdWFsIHJlcXVlc3RzLiBIb3dldmVyLCBpdCB3aWxsXG4gICBzdGlsbCByZWZ1c2UgdG8gY29udGludWUgaWYgcmVkZGl0J3MgZW5mb3JjZWQgcmF0ZWxpbWl0ICg2MDAgcmVxdWVzdHMgcGVyIDEwIG1pbnV0ZXMpIGlzIGV4Y2VlZGVkLlxuICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucmVxdWVzdFRpbWVvdXQ9MzAwMDBdIEEgdGltZW91dCBmb3IgYWxsIE9BdXRoIHJlcXVlc3RzLCBpbiBtaWxsaXNlY29uZHMuIElmIHRoZSByZWRkaXQgc2VydmVyXG4gICBmYWlscyB0byByZXR1cm4gYSByZXNwb25zZSB3aXRoaW4gdGhpcyBhbW91bnQgb2YgdGltZSwgdGhlIFByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoIGEgdGltZW91dCBlcnJvci5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jb250aW51ZUFmdGVyUmF0ZWxpbWl0RXJyb3I9ZmFsc2VdIERldGVybWluZXMgd2hldGhlciBzbm9vd3JhcCBzaG91bGQgcXVldWUgQVBJIGNhbGxzIGlmXG4gICByZWRkaXQncyByYXRlbGltaXQgaXMgZXhjZWVkZWQuIElmIHNldCB0byBgdHJ1ZWAgd2hlbiB0aGUgcmF0ZWxpbWl0IGlzIGV4Y2VlZGVkLCBzbm9vd3JhcCB3aWxsIHF1ZXVlIGFsbCBmdXJ0aGVyIHJlcXVlc3RzLFxuICAgYW5kIHdpbGwgYXR0ZW1wdCB0byBzZW5kIHRoZW0gYWdhaW4gYWZ0ZXIgdGhlIGN1cnJlbnQgcmF0ZWxpbWl0IHBlcmlvZCBleHBpcmVzICh3aGljaCBoYXBwZW5zIGV2ZXJ5IDEwIG1pbnV0ZXMpLiBJZiBzZXRcbiAgIHRvIGBmYWxzZWAsIHNub293cmFwIHdpbGwgc2ltcGx5IHRocm93IGFuIGVycm9yIHdoZW4gcmVkZGl0J3MgcmF0ZWxpbWl0IGlzIGV4Y2VlZGVkLlxuICAgKiBAcGFyYW0ge051bWJlcltdfSBbb3B0aW9ucy5yZXRyeUVycm9yQ29kZXM9WzUwMiwgNTAzLCA1MDQsIDUyMl1dIElmIHJlZGRpdCByZXNwb25kcyB0byBhbiBpZGVtcG90ZW50IHJlcXVlc3Qgd2l0aCBvbmUgb2ZcbiAgIHRoZXNlIGVycm9yIGNvZGVzLCBzbm9vd3JhcCB3aWxsIHJldHJ5IHRoZSByZXF1ZXN0LCB1cCB0byBhIG1heGltdW0gb2YgYG1heF9yZXRyeV9hdHRlbXB0c2AgcmVxdWVzdHMgaW4gdG90YWwuIChUaGVzZVxuICAgZXJyb3JzIHVzdWFsbHkgaW5kaWNhdGUgdGhhdCB0aGVyZSB3YXMgYW4gdGVtcG9yYXJ5IGlzc3VlIG9uIHJlZGRpdCdzIGVuZCwgYW5kIHJldHJ5aW5nIHRoZSByZXF1ZXN0IGhhcyBhIGRlY2VudCBjaGFuY2Ugb2ZcbiAgIHN1Y2Nlc3MuKSBUaGlzIGJlaGF2aW9yIGNhbiBiZSBkaXNhYmxlZCBieSBzaW1wbHkgc2V0dGluZyB0aGlzIHByb3BlcnR5IHRvIGFuIGVtcHR5IGFycmF5LlxuICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWF4UmV0cnlBdHRlbXB0cz0zXSBTZWUgYHJldHJ5RXJyb3JDb2Rlc2AuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMud2FybmluZ3M9dHJ1ZV0gc25vb3dyYXAgbWF5IG9jY2FzaW9uYWxseSBsb2cgd2FybmluZ3MsIHN1Y2ggYXMgZGVwcmVjYXRpb24gbm90aWNlcywgdG8gdGhlXG4gICBjb25zb2xlLiBUaGVzZSBjYW4gYmUgZGlzYWJsZWQgYnkgc2V0dGluZyB0aGlzIHRvIGBmYWxzZWAuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZGVidWc9ZmFsc2VdIElmIHNldCB0byB0cnVlLCBzbm9vd3JhcCB3aWxsIHByaW50IG91dCBwb3RlbnRpYWxseS11c2VmdWwgaW5mb3JtYXRpb24gZm9yIGRlYnVnZ2luZ1xuICAgcHVycG9zZXMgYXMgaXQgcnVucy5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmxvZ2dlcj1jb25zb2xlXSBCeSBkZWZhdWx0LCBzbm9vd3JhcCB3aWxsIGxvZyBhbnkgd2FybmluZ3MgYW5kIGRlYnVnIG91dHB1dCB0byB0aGUgY29uc29sZS5cbiAgIEEgY3VzdG9tIGxvZ2dlciBvYmplY3QgbWF5IGJlIHN1cHBsaWVkIHZpYSB0aGlzIG9wdGlvbjsgaXQgbXVzdCBleHBvc2UgYHdhcm5gLCBgaW5mb2AsIGBkZWJ1Z2AsIGFuZCBgdHJhY2VgIGZ1bmN0aW9ucy5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wcm94aWVzPXRydWVdIFNldHRpbmcgdGhpcyB0byBgZmFsc2VgIGRpc2FibGVzIHNub293cmFwJ3MgbWV0aG9kLWNoYWluaW5nIGZlYXR1cmUuIFRoaXMgY2F1c2VzXG4gICB0aGUgc3ludGF4IGZvciB1c2luZyBzbm9vd3JhcCB0byBiZWNvbWUgYSBiaXQgaGVhdmllciwgYnV0IGFsbG93cyBmb3IgY29uc2lzdGVuY3kgYmV0d2VlbiBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IHRoZSBFUzZcbiAgIGBQcm94eWAgb2JqZWN0IGFuZCBlbnZpcm9ubWVudHMgdGhhdCBkb24ndC4gVGhpcyBvcHRpb24gaXMgYSBuby1vcCBpbiBlbnZpcm9ubWVudHMgdGhhdCBkb24ndCBzdXBwb3J0IHRoZSBgUHJveHlgIG9iamVjdCxcbiAgIHNpbmNlIG1ldGhvZCBjaGFpbmluZyBpcyBhbHdheXMgZGlzYWJsZWQgaW4gdGhvc2UgZW52aXJvbm1lbnRzLiBOb3RlLCBjaGFuZ2luZyB0aGlzIHNldHRpbmcgbXVzdCBiZSBkb25lIGJlZm9yZSBtYWtpbmdcbiAgIGFueSByZXF1ZXN0cy5cbiAgICogQHJldHVybnMge29iamVjdH0gQW4gdXBkYXRlZCBPYmplY3QgY29udGFpbmluZyBhbGwgb2YgdGhlIGNvbmZpZ3VyYXRpb24gdmFsdWVzXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuY29uZmlnKHtyZXF1ZXN0RGVsYXk6IDEwMDAsIHdhcm5pbmdzOiBmYWxzZX0pO1xuICAgKiAvLyBzZXRzIHRoZSByZXF1ZXN0IGRlbGF5IHRvIDEwMDAgbWlsbGlzZWNvbmRzLCBhbmQgc3VwcHJlc3NlcyB3YXJuaW5ncy5cbiAgICovXG5cblxuICBjb25maWcoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIGludmFsaWRLZXkgPSBPYmplY3Qua2V5cyhvcHRpb25zKS5maW5kKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiAhKGtleSBpbiBfdGhpczMuX2NvbmZpZyk7XG4gICAgfSk7XG5cbiAgICBpZiAoaW52YWxpZEtleSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgY29uZmlnIG9wdGlvbiAnXCIuY29uY2F0KGludmFsaWRLZXksIFwiJ1wiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24odGhpcy5fY29uZmlnLCBvcHRpb25zKTtcbiAgfVxuXG4gIF93YXJuKCkge1xuICAgIGlmICh0aGlzLl9jb25maWcud2FybmluZ3MpIHtcbiAgICAgIHZhciBfdGhpcyRfY29uZmlnJGxvZ2dlcjtcblxuICAgICAgKF90aGlzJF9jb25maWckbG9nZ2VyID0gdGhpcy5fY29uZmlnLmxvZ2dlcikud2Fybi5hcHBseShfdGhpcyRfY29uZmlnJGxvZ2dlciwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBfZGVidWcoKSB7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5kZWJ1Zykge1xuICAgICAgdmFyIF90aGlzJF9jb25maWckbG9nZ2VyMjtcblxuICAgICAgKF90aGlzJF9jb25maWckbG9nZ2VyMiA9IHRoaXMuX2NvbmZpZy5sb2dnZXIpLmRlYnVnLmFwcGx5KF90aGlzJF9jb25maWckbG9nZ2VyMiwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnZXQgX3Byb21pc2VXcmFwKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcucHJveGllcyA/IF9wcm9taXNlQ2hhaW5zLmRlZmF1bHQgOiBpZGVudGl0eTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyBpbmZvcm1hdGlvbiBvbiBhIHJlZGRpdCB1c2VyIHdpdGggYSBnaXZlbiBuYW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSB1c2VyJ3MgdXNlcm5hbWVcbiAgICogQHJldHVybnMge1JlZGRpdFVzZXJ9IEFuIHVuZmV0Y2hlZCBSZWRkaXRVc2VyIG9iamVjdCBmb3IgdGhlIHJlcXVlc3RlZCB1c2VyXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0VXNlcignbm90X2FuX2FhcmR2YXJrJylcbiAgICogLy8gPT4gUmVkZGl0VXNlciB7IG5hbWU6ICdub3RfYW5fYWFyZHZhcmsnIH1cbiAgICogci5nZXRVc2VyKCdub3RfYW5fYWFyZHZhcmsnKS5saW5rX2thcm1hLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IDZcbiAgICovXG5cblxuICBnZXRVc2VyKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmV3T2JqZWN0KCdSZWRkaXRVc2VyJywge1xuICAgICAgbmFtZTogKG5hbWUgKyAnJykucmVwbGFjZSgvXlxcLz91XFwvLywgJycpXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgaW5mb3JtYXRpb24gb24gYSBjb21tZW50IHdpdGggYSBnaXZlbiBpZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1lbnRJZCAtIFRoZSBiYXNlMzYgaWQgb2YgdGhlIGNvbW1lbnRcbiAgICogQHJldHVybnMge0NvbW1lbnR9IEFuIHVuZmV0Y2hlZCBDb21tZW50IG9iamVjdCBmb3IgdGhlIHJlcXVlc3RlZCBjb21tZW50XG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0Q29tbWVudCgnYzBiNnh4MCcpXG4gICAqIC8vID0+IENvbW1lbnQgeyBuYW1lOiAndDFfYzBiNnh4MCcgfVxuICAgKiByLmdldENvbW1lbnQoJ2MwYjZ4eDAnKS5hdXRob3IubmFtZS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiAnS2hhcm9zJ1xuICAgKi9cblxuXG4gIGdldENvbW1lbnQoY29tbWVudElkKSB7XG4gICAgcmV0dXJuIHRoaXMuX25ld09iamVjdCgnQ29tbWVudCcsIHtcbiAgICAgIG5hbWU6ICgwLCBfaGVscGVycy5hZGRGdWxsbmFtZVByZWZpeCkoY29tbWVudElkLCAndDFfJylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyBpbmZvcm1hdGlvbiBvbiBhIGdpdmVuIHN1YnJlZGRpdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRpc3BsYXlOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHN1YnJlZGRpdCAoZS5nLiAnQXNrUmVkZGl0JylcbiAgICogQHJldHVybnMge1N1YnJlZGRpdH0gQW4gdW5mZXRjaGVkIFN1YnJlZGRpdCBvYmplY3QgZm9yIHRoZSByZXF1ZXN0ZWQgc3VicmVkZGl0XG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0U3VicmVkZGl0KCdBc2tSZWRkaXQnKVxuICAgKiAvLyA9PiBTdWJyZWRkaXQgeyBkaXNwbGF5X25hbWU6ICdBc2tSZWRkaXQnIH1cbiAgICogci5nZXRTdWJyZWRkaXQoJ0Fza1JlZGRpdCcpLmNyZWF0ZWRfdXRjLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IDEyMDEyMzMxMzVcbiAgICovXG5cblxuICBnZXRTdWJyZWRkaXQoZGlzcGxheU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmV3T2JqZWN0KCdTdWJyZWRkaXQnLCB7XG4gICAgICBkaXNwbGF5X25hbWU6IGRpc3BsYXlOYW1lLnJlcGxhY2UoL15cXC8/clxcLy8sICcnKVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBHZXRzIGluZm9ybWF0aW9uIG9uIGEgZ2l2ZW4gc3VibWlzc2lvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHN1Ym1pc3Npb25JZCAtIFRoZSBiYXNlMzYgaWQgb2YgdGhlIHN1Ym1pc3Npb25cbiAgICogQHJldHVybnMge1N1Ym1pc3Npb259IEFuIHVuZmV0Y2hlZCBTdWJtaXNzaW9uIG9iamVjdCBmb3IgdGhlIHJlcXVlc3RlZCBzdWJtaXNzaW9uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0U3VibWlzc2lvbignMm5wNjk0JylcbiAgICogLy8gPT4gU3VibWlzc2lvbiB7IG5hbWU6ICd0M18ybnA2OTQnIH1cbiAgICogci5nZXRTdWJtaXNzaW9uKCcybnA2OTQnKS50aXRsZS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiAnV2hhdCB0YXN0eSBmb29kIHdvdWxkIGJlIGRpc3R1c3RpbmcgaWYgZWF0ZW4gb3ZlciByaWNlPydcbiAgICovXG5cblxuICBnZXRTdWJtaXNzaW9uKHN1Ym1pc3Npb25JZCkge1xuICAgIHJldHVybiB0aGlzLl9uZXdPYmplY3QoJ1N1Ym1pc3Npb24nLCB7XG4gICAgICBuYW1lOiAoMCwgX2hlbHBlcnMuYWRkRnVsbG5hbWVQcmVmaXgpKHN1Ym1pc3Npb25JZCwgJ3QzXycpXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgYSBwcml2YXRlIG1lc3NhZ2UgYnkgSUQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlSWQgVGhlIGJhc2UzNiBJRCBvZiB0aGUgbWVzc2FnZVxuICAgKiBAcmV0dXJucyB7UHJpdmF0ZU1lc3NhZ2V9IEFuIHVuZmV0Y2hlZCBQcml2YXRlTWVzc2FnZSBvYmplY3QgZm9yIHRoZSByZXF1ZXN0ZWQgbWVzc2FnZVxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldE1lc3NhZ2UoJzUxc2hudycpXG4gICAqIC8vID0+IFByaXZhdGVNZXNzYWdlIHsgbmFtZTogJ3Q0XzUxc2hudycgfVxuICAgKiByLmdldE1lc3NhZ2UoJzUxc2hudycpLnN1YmplY3QudGhlbihjb25zb2xlLmxvZylcbiAgICogLy8gPT4gJ0V4YW1wbGUnXG4gICAqIC8vIFNlZSBoZXJlIGZvciBhIHNjcmVlbnNob3Qgb2YgdGhlIFBNIGluIHF1ZXN0aW9uIGh0dHBzOi8vaS5neWF6by5jb20vMjRmM2I5N2U1NWI2ZmY4ZTNhNzRjYjAyNmE1OGIxNjcucG5nXG4gICAqL1xuXG5cbiAgZ2V0TWVzc2FnZShtZXNzYWdlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fbmV3T2JqZWN0KCdQcml2YXRlTWVzc2FnZScsIHtcbiAgICAgIG5hbWU6ICgwLCBfaGVscGVycy5hZGRGdWxsbmFtZVByZWZpeCkobWVzc2FnZUlkLCAndDRfJylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIGxpdmV0aHJlYWQgYnkgSUQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0aHJlYWRJZCBUaGUgYmFzZTM2IElEIG9mIHRoZSBsaXZldGhyZWFkXG4gICAqIEByZXR1cm5zIHtMaXZlVGhyZWFkfSBBbiB1bmZldGNoZWQgTGl2ZVRocmVhZCBvYmplY3RcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXRMaXZldGhyZWFkKCd3aHJkeG84ZGc5bjAnKVxuICAgKiAvLyA9PiBMaXZlVGhyZWFkIHsgaWQ6ICd3aHJkeG84ZGc5bjAnIH1cbiAgICogci5nZXRMaXZldGhyZWFkKCd3aHJkeG84ZGc5bjAnKS5uc2Z3LnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IGZhbHNlXG4gICAqL1xuXG5cbiAgZ2V0TGl2ZXRocmVhZCh0aHJlYWRJZCkge1xuICAgIHJldHVybiB0aGlzLl9uZXdPYmplY3QoJ0xpdmVUaHJlYWQnLCB7XG4gICAgICBpZDogKDAsIF9oZWxwZXJzLmFkZEZ1bGxuYW1lUHJlZml4KSh0aHJlYWRJZCwgJ0xpdmVVcGRhdGVFdmVudF8nKS5zbGljZSgxNilcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyBpbmZvcm1hdGlvbiBvbiB0aGUgcmVxdWVzdGVyJ3Mgb3duIHVzZXIgcHJvZmlsZS5cbiAgICogQHJldHVybnMge1JlZGRpdFVzZXJ9IEEgUmVkZGl0VXNlciBvYmplY3QgY29ycmVzcG9uZGluZyB0byB0aGUgcmVxdWVzdGVyJ3MgcHJvZmlsZVxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldE1lKCkudGhlbihjb25zb2xlLmxvZyk7XG4gICAqIC8vID0+IFJlZGRpdFVzZXIgeyBpc19lbXBsb3llZTogZmFsc2UsIGhhc19tYWlsOiBmYWxzZSwgbmFtZTogJ3Nub293cmFwX3Rlc3RpbmcnLCAuLi4gfVxuICAgKi9cblxuXG4gIGdldE1lKCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuX2dldCh7XG4gICAgICB1cmk6ICdhcGkvdjEvbWUnXG4gICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICBfdGhpczQuX293blVzZXJJbmZvID0gX3RoaXM0Ll9uZXdPYmplY3QoJ1JlZGRpdFVzZXInLCByZXN1bHQsIHRydWUpO1xuICAgICAgcmV0dXJuIF90aGlzNC5fb3duVXNlckluZm87XG4gICAgfSk7XG4gIH1cblxuICBfZ2V0TXlOYW1lKCkge1xuICAgIHJldHVybiBfUHJvbWlzZS5kZWZhdWx0LnJlc29sdmUodGhpcy5fb3duVXNlckluZm8gPyB0aGlzLl9vd25Vc2VySW5mby5uYW1lIDogdGhpcy5nZXRNZSgpLmdldCgnbmFtZScpKTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyBhIGRpc3RyaWJ1dGlvbiBvZiB0aGUgcmVxdWVzdGVyJ3Mgb3duIGthcm1hIGRpc3RyaWJ1dGlvbiBieSBzdWJyZWRkaXQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIFByb21pc2UgZm9yIGFuIG9iamVjdCB3aXRoIGthcm1hIGluZm9ybWF0aW9uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0S2FybWEoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBbXG4gICAqIC8vICB7IHNyOiBTdWJyZWRkaXQgeyBkaXNwbGF5X25hbWU6ICdyZWRkaXRkZXYnIH0sIGNvbW1lbnRfa2FybWE6IDE2LCBsaW5rX2thcm1hOiAxIH0sXG4gICAqIC8vICB7IHNyOiBTdWJyZWRkaXQgeyBkaXNwbGF5X25hbWU6ICdwcm9ncmFtbWluZycgfSwgY29tbWVudF9rYXJtYTogMiwgbGlua19rYXJtYTogMSB9LFxuICAgKiAvLyAgLi4uXG4gICAqIC8vIF1cbiAgICovXG5cblxuICBnZXRLYXJtYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0KHtcbiAgICAgIHVyaTogJ2FwaS92MS9tZS9rYXJtYSdcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyBpbmZvcm1hdGlvbiBvbiB0aGUgdXNlcidzIGN1cnJlbnQgcHJlZmVyZW5jZXMuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIHByb21pc2UgZm9yIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSB1c2VyJ3MgY3VycmVudCBwcmVmZXJlbmNlc1xuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldFByZWZlcmVuY2VzKCkudGhlbihjb25zb2xlLmxvZylcbiAgICogLy8gPT4geyBkZWZhdWx0X3RoZW1lX3NyOiBudWxsLCB0aHJlYWRlZF9tZXNzYWdlczogdHJ1ZSwgaGlkZV9kb3duczogZmFsc2UsIC4uLiB9XG4gICAqL1xuXG5cbiAgZ2V0UHJlZmVyZW5jZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldCh7XG4gICAgICB1cmk6ICdhcGkvdjEvbWUvcHJlZnMnXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IFVwZGF0ZXMgdGhlIHVzZXIncyBjdXJyZW50IHByZWZlcmVuY2VzLlxuICAgKiBAcGFyYW0ge29iamVjdH0gdXBkYXRlZFByZWZlcmVuY2VzIEFuIG9iamVjdCBvZiB0aGUgZm9ybSB7W3NvbWUgcHJlZmVyZW5jZSBuYW1lXTogJ3NvbWUgdmFsdWUnLCAuLi59LiBBbnkgcHJlZmVyZW5jZVxuICAgKiBub3QgaW5jbHVkZWQgaW4gdGhpcyBvYmplY3Qgd2lsbCBzaW1wbHkgcmV0YWluIGl0cyBjdXJyZW50IHZhbHVlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgZnVsZmlsbHMgd2hlbiB0aGUgcmVxdWVzdCBpcyBjb21wbGV0ZVxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLnVwZGF0ZVByZWZlcmVuY2VzKHt0aHJlYWRlZF9tZXNzYWdlczogZmFsc2UsIGhpZGVfZG93bnM6IHRydWV9KVxuICAgKiAvLyA9PiB7IGRlZmF1bHRfdGhlbWVfc3I6IG51bGwsIHRocmVhZGVkX21lc3NhZ2VzOiBmYWxzZSxoaWRlX2Rvd25zOiB0cnVlLCAuLi4gfVxuICAgKiAvLyAocHJlZmVyZW5jZXMgdXBkYXRlZCBvbiByZWRkaXQpXG4gICAqL1xuXG5cbiAgdXBkYXRlUHJlZmVyZW5jZXModXBkYXRlZFByZWZlcmVuY2VzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhdGNoKHtcbiAgICAgIHVyaTogJ2FwaS92MS9tZS9wcmVmcycsXG4gICAgICBib2R5OiB1cGRhdGVkUHJlZmVyZW5jZXNcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyB0aGUgY3VycmVudGx5LWF1dGhlbnRpY2F0ZWQgdXNlcidzIHRyb3BoaWVzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBUcm9waHlMaXN0IGNvbnRhaW5pbmcgdGhlIHVzZXIncyB0cm9waGllc1xuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldE15VHJvcGhpZXMoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBUcm9waHlMaXN0IHsgdHJvcGhpZXM6IFtcbiAgICogLy8gICBUcm9waHkgeyBpY29uXzcwOiAnaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3JlZGRpdHN0YXRpYy9hd2FyZC92ZXJpZmllZF9lbWFpbC03MC5wbmcnLFxuICAgKiAvLyAgICAgZGVzY3JpcHRpb246IG51bGwsXG4gICAqIC8vICAgICB1cmw6IG51bGwsXG4gICAqIC8vICAgICBpY29uXzQwOiAnaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3JlZGRpdHN0YXRpYy9hd2FyZC92ZXJpZmllZF9lbWFpbC00MC5wbmcnLFxuICAgKiAvLyAgICAgYXdhcmRfaWQ6ICdvJyxcbiAgICogLy8gICAgIGlkOiAnMTZmbjI5JyxcbiAgICogLy8gICAgIG5hbWU6ICdWZXJpZmllZCBFbWFpbCdcbiAgICogLy8gICB9XG4gICAqIC8vIF0gfVxuICAgKi9cblxuXG4gIGdldE15VHJvcGhpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldCh7XG4gICAgICB1cmk6ICdhcGkvdjEvbWUvdHJvcGhpZXMnXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgdGhlIGxpc3Qgb2YgdGhlIGN1cnJlbnRseS1hdXRoZW50aWNhdGVkIHVzZXIncyBmcmllbmRzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGxpc3Qgb2YgZnJpZW5kc1xuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldEZyaWVuZHMoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBbIFsgUmVkZGl0VXNlciB7IGRhdGU6IDE0NTc5Mjc5NjMsIG5hbWU6ICdub3RfYW5fYWFyZHZhcmsnLCBpZDogJ3QyX2s4M21kJyB9IF0sIFtdIF1cbiAgICovXG5cblxuICBnZXRGcmllbmRzKCkge1xuICAgIHJldHVybiB0aGlzLl9nZXQoe1xuICAgICAgdXJpOiAncHJlZnMvZnJpZW5kcydcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyB0aGUgbGlzdCBvZiBwZW9wbGUgdGhhdCB0aGUgY3VycmVudGx5LWF1dGhlbnRpY2F0ZWQgdXNlciBoYXMgYmxvY2tlZC5cbiAgICogQHJldHVybnMge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBsaXN0IG9mIGJsb2NrZWQgdXNlcnNcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXRCbG9ja2VkVXNlcnMoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBbIFJlZGRpdFVzZXIgeyBkYXRlOiAxNDU3OTI4MTIwLCBuYW1lOiAnYWN0dWFsbHlfYW5fYWFyZHZhcmsnLCBpZDogJ3QyX3EzNTE5JyB9IF1cbiAgICovXG5cblxuICBnZXRCbG9ja2VkVXNlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldCh7XG4gICAgICB1cmk6ICdwcmVmcy9ibG9ja2VkJ1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGN1cnJlbnRseS1hdXRoZW50aWNhdGVkIHVzZXIgbmVlZHMgdG8gZmlsbCBvdXQgYSBjYXB0Y2hhIGluIG9yZGVyIHRvIHN1Ym1pdCBjb250ZW50LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGJvb2xlYW4gdmFsdWVcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5jaGVja0NhcHRjaGFSZXF1aXJlbWVudCgpLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IGZhbHNlXG4gICAqL1xuXG5cbiAgY2hlY2tDYXB0Y2hhUmVxdWlyZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldCh7XG4gICAgICB1cmk6ICdhcGkvbmVlZHNfY2FwdGNoYSdcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyB0aGUgaWRlbnRpZmllciAoYSBoZXggc3RyaW5nKSBmb3IgYSBuZXcgY2FwdGNoYSBpbWFnZS5cbiAgICogQHJldHVybnMge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBzdHJpbmdcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXROZXdDYXB0Y2hhSWRlbnRpZmllcigpLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+ICdvNU0xOHV5NG1rMElXNGhzMGZ1MkdOUGRYYjFEeGU5ZCdcbiAgICovXG5cblxuICBnZXROZXdDYXB0Y2hhSWRlbnRpZmllcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zdCh7XG4gICAgICB1cmk6ICdhcGkvbmV3X2NhcHRjaGEnLFxuICAgICAgZm9ybToge1xuICAgICAgICBhcGlfdHlwZVxuICAgICAgfVxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgcmV0dXJuIHJlcy5qc29uLmRhdGEuaWRlbjtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyBhbiBpbWFnZSBmb3IgYSBnaXZlbiBjYXB0Y2hhIGlkZW50aWZpZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyIFRoZSBjYXB0Y2hhIGlkZW50aWZpZXIuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIHN0cmluZyBjb250YWluaW5nIHJhdyBpbWFnZSBkYXRhIGluIFBORyBmb3JtYXRcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXRDYXB0Y2hhSW1hZ2UoJ281TTE4dXk0bWswSVc0aHMwZnUyR05QZFhiMUR4ZTlkJykudGhlbihjb25zb2xlLmxvZylcbiAgIC8vID0+IChBIGxvbmcsIGluY29oZXJlbnQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgaW1hZ2UgaW4gUE5HIGZvcm1hdClcbiAgICovXG5cblxuICBnZXRDYXB0Y2hhSW1hZ2UoaWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9nZXQoe1xuICAgICAgdXJpOiBcImNhcHRjaGEvXCIuY29uY2F0KGlkZW50aWZpZXIpXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgYW4gYXJyYXkgb2YgY2F0ZWdvcmllcyB0aGF0IGl0ZW1zIGNhbiBiZSBzYXZlZCBpbi4gKFJlcXVpcmVzIHJlZGRpdCBnb2xkKVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQW4gYXJyYXkgb2YgY2F0ZWdvcmllc1xuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldFNhdmVkQ2F0ZWdvcmllcygpLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IFsgeyBjYXRlZ29yeTogJ2N1dGUgY2F0IHBpY3R1cmVzJyB9LCB7IGNhdGVnb3J5OiAnaW50ZXJlc3RpbmcgYXJ0aWNsZXMnIH0gXVxuICAgKi9cblxuXG4gIGdldFNhdmVkQ2F0ZWdvcmllcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0KHtcbiAgICAgIHVyaTogJ2FwaS9zYXZlZF9jYXRlZ29yaWVzJ1xuICAgIH0pLmdldCgnY2F0ZWdvcmllcycpO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBNYXJrcyBhIGxpc3Qgb2Ygc3VibWlzc2lvbnMgYXMgJ3Zpc2l0ZWQnLlxuICAgKiBAZGVzYyAqKk5vdGUqKjogVGhpcyBlbmRwb2ludCBvbmx5IHdvcmtzIGlmIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIgaXMgc3Vic2NyaWJlZCB0byByZWRkaXQgZ29sZC5cbiAgICogQHBhcmFtIHtTdWJtaXNzaW9uW119IGxpbmtzIEEgbGlzdCBvZiBTdWJtaXNzaW9uIG9iamVjdHMgdG8gbWFya1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgZnVsZmlsbHMgd2hlbiB0aGUgcmVxdWVzdCBpcyBjb21wbGV0ZVxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiB2YXIgc3VibWlzc2lvbnMgPSBbci5nZXRTdWJtaXNzaW9uKCc0YTl1NTQnKSwgci5nZXRTdWJtaXNzaW9uKCc0YTk1bmInKV1cbiAgICogci5tYXJrQXNWaXNpdGVkKHN1Ym1pc3Npb25zKVxuICAgKiAvLyAodGhlIGxpbmtzIHdpbGwgbm93IGFwcGVhciBwdXJwbGUgb24gcmVkZGl0KVxuICAgKi9cblxuXG4gIG1hcmtBc1Zpc2l0ZWQobGlua3MpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zdCh7XG4gICAgICB1cmk6ICdhcGkvc3RvcmVfdmlzaXRzJyxcbiAgICAgIGxpbmtzOiAoMCwgX2xvZGFzaC5tYXApKGxpbmtzLCAnbmFtZScpLmpvaW4oJywnKVxuICAgIH0pO1xuICB9XG5cbiAgX3N1Ym1pdChfcmVmNSkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgdmFyIGNhcHRjaGFfcmVzcG9uc2UgPSBfcmVmNS5jYXB0Y2hhX3Jlc3BvbnNlLFxuICAgICAgICBfcmVmNSRjYXB0Y2hhUmVzcG9uc2UgPSBfcmVmNS5jYXB0Y2hhUmVzcG9uc2UsXG4gICAgICAgIGNhcHRjaGFSZXNwb25zZSA9IF9yZWY1JGNhcHRjaGFSZXNwb25zZSA9PT0gdm9pZCAwID8gY2FwdGNoYV9yZXNwb25zZSA6IF9yZWY1JGNhcHRjaGFSZXNwb25zZSxcbiAgICAgICAgY2FwdGNoYV9pZGVuID0gX3JlZjUuY2FwdGNoYV9pZGVuLFxuICAgICAgICBfcmVmNSRjYXB0Y2hhSWRlbiA9IF9yZWY1LmNhcHRjaGFJZGVuLFxuICAgICAgICBjYXB0Y2hhSWRlbiA9IF9yZWY1JGNhcHRjaGFJZGVuID09PSB2b2lkIDAgPyBjYXB0Y2hhX2lkZW4gOiBfcmVmNSRjYXB0Y2hhSWRlbixcbiAgICAgICAga2luZCA9IF9yZWY1LmtpbmQsXG4gICAgICAgIF9yZWY1JHJlc3VibWl0ID0gX3JlZjUucmVzdWJtaXQsXG4gICAgICAgIHJlc3VibWl0ID0gX3JlZjUkcmVzdWJtaXQgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmNSRyZXN1Ym1pdCxcbiAgICAgICAgX3JlZjUkc2VuZF9yZXBsaWVzID0gX3JlZjUuc2VuZF9yZXBsaWVzLFxuICAgICAgICBzZW5kX3JlcGxpZXMgPSBfcmVmNSRzZW5kX3JlcGxpZXMgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmNSRzZW5kX3JlcGxpZXMsXG4gICAgICAgIF9yZWY1JHNlbmRSZXBsaWVzID0gX3JlZjUuc2VuZFJlcGxpZXMsXG4gICAgICAgIHNlbmRSZXBsaWVzID0gX3JlZjUkc2VuZFJlcGxpZXMgPT09IHZvaWQgMCA/IHNlbmRfcmVwbGllcyA6IF9yZWY1JHNlbmRSZXBsaWVzLFxuICAgICAgICBjcm9zc3Bvc3RfZnVsbG5hbWUgPSBfcmVmNS5jcm9zc3Bvc3RfZnVsbG5hbWUsXG4gICAgICAgIHRleHQgPSBfcmVmNS50ZXh0LFxuICAgICAgICB0aXRsZSA9IF9yZWY1LnRpdGxlLFxuICAgICAgICB1cmwgPSBfcmVmNS51cmwsXG4gICAgICAgIHN1YnJlZGRpdF9uYW1lID0gX3JlZjUuc3VicmVkZGl0X25hbWUsXG4gICAgICAgIF9yZWY1JHN1YnJlZGRpdE5hbWUgPSBfcmVmNS5zdWJyZWRkaXROYW1lLFxuICAgICAgICBzdWJyZWRkaXROYW1lID0gX3JlZjUkc3VicmVkZGl0TmFtZSA9PT0gdm9pZCAwID8gc3VicmVkZGl0X25hbWUgOiBfcmVmNSRzdWJyZWRkaXROYW1lLFxuICAgICAgICBuc2Z3ID0gX3JlZjUubnNmdyxcbiAgICAgICAgc3BvaWxlciA9IF9yZWY1LnNwb2lsZXIsXG4gICAgICAgIGZsYWlySWQgPSBfcmVmNS5mbGFpcklkLFxuICAgICAgICBmbGFpclRleHQgPSBfcmVmNS5mbGFpclRleHQsXG4gICAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjUsIFtcImNhcHRjaGFfcmVzcG9uc2VcIiwgXCJjYXB0Y2hhUmVzcG9uc2VcIiwgXCJjYXB0Y2hhX2lkZW5cIiwgXCJjYXB0Y2hhSWRlblwiLCBcImtpbmRcIiwgXCJyZXN1Ym1pdFwiLCBcInNlbmRfcmVwbGllc1wiLCBcInNlbmRSZXBsaWVzXCIsIFwiY3Jvc3Nwb3N0X2Z1bGxuYW1lXCIsIFwidGV4dFwiLCBcInRpdGxlXCIsIFwidXJsXCIsIFwic3VicmVkZGl0X25hbWVcIiwgXCJzdWJyZWRkaXROYW1lXCIsIFwibnNmd1wiLCBcInNwb2lsZXJcIiwgXCJmbGFpcklkXCIsIFwiZmxhaXJUZXh0XCJdKTtcblxuICAgIHJldHVybiB0aGlzLl9wb3N0KHtcbiAgICAgIHVyaTogJ2FwaS9zdWJtaXQnLFxuICAgICAgZm9ybTogX29iamVjdFNwcmVhZCh7XG4gICAgICAgIGFwaV90eXBlLFxuICAgICAgICBjYXB0Y2hhOiBjYXB0Y2hhUmVzcG9uc2UsXG4gICAgICAgIGlkZW46IGNhcHRjaGFJZGVuLFxuICAgICAgICBzZW5kcmVwbGllczogc2VuZFJlcGxpZXMsXG4gICAgICAgIHNyOiBzdWJyZWRkaXROYW1lLFxuICAgICAgICBraW5kLFxuICAgICAgICByZXN1Ym1pdCxcbiAgICAgICAgY3Jvc3Nwb3N0X2Z1bGxuYW1lLFxuICAgICAgICB0ZXh0LFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgdXJsLFxuICAgICAgICBzcG9pbGVyLFxuICAgICAgICBuc2Z3LFxuICAgICAgICBmbGFpcl9pZDogZmxhaXJJZCxcbiAgICAgICAgZmxhaXJfdGV4dDogZmxhaXJUZXh0XG4gICAgICB9LCBvcHRpb25zKVxuICAgIH0pLnRhcCgoMCwgX2hlbHBlcnMuaGFuZGxlSnNvbkVycm9ycykodGhpcykpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgcmV0dXJuIF90aGlzNS5nZXRTdWJtaXNzaW9uKHJlc3VsdC5qc29uLmRhdGEuaWQpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IHNlbGZwb3N0IG9uIHRoZSBnaXZlbiBzdWJyZWRkaXQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIEFuIG9iamVjdCBjb250YWluaW5nIGRldGFpbHMgYWJvdXQgdGhlIHN1Ym1pc3Npb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuc3VicmVkZGl0TmFtZSBUaGUgbmFtZSBvZiB0aGUgc3VicmVkZGl0IHRoYXQgdGhlIHBvc3Qgc2hvdWxkIGJlIHN1Ym1pdHRlZCB0b1xuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy50aXRsZSBUaGUgdGl0bGUgb2YgdGhlIHN1Ym1pc3Npb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnRleHRdIFRoZSBzZWxmdGV4dCBvZiB0aGUgc3VibWlzc2lvblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNlbmRSZXBsaWVzPXRydWVdIERldGVybWluZXMgd2hldGhlciBpbmJveCByZXBsaWVzIHNob3VsZCBiZSBlbmFibGVkIGZvciB0aGlzIHN1Ym1pc3Npb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmNhcHRjaGFJZGVuXSBBIGNhcHRjaGEgaWRlbnRpZmllci4gVGhpcyBpcyBvbmx5IG5lY2Vzc2FyeSBpZiB0aGUgYXV0aGVudGljYXRlZCBhY2NvdW50XG4gICByZXF1aXJlcyBhIGNhcHRjaGEgdG8gc3VibWl0IHBvc3RzIGFuZCBjb21tZW50cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmNhcHRjaGFSZXNwb25zZV0gVGhlIHJlc3BvbnNlIHRvIHRoZSBjYXB0Y2hhIHdpdGggdGhlIGdpdmVuIGlkZW50aWZpZXJcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBuZXdseS1jcmVhdGVkIFN1Ym1pc3Npb24gb2JqZWN0XG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuc3VibWl0U2VsZnBvc3Qoe1xuICAgKiAgIHN1YnJlZGRpdE5hbWU6ICdzbm9vd3JhcF90ZXN0aW5nJyxcbiAgICogICB0aXRsZTogJ1RoaXMgaXMgYSBzZWxmcG9zdCcsXG4gICAqICAgdGV4dDogJ1RoaXMgaXMgdGhlIHRleHQgYm9keSBvZiB0aGUgc2VsZnBvc3QnXG4gICAqIH0pLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IFN1Ym1pc3Npb24geyBuYW1lOiAndDNfNGFibXN6JyB9XG4gICAqIC8vIChuZXcgc2VsZnBvc3QgY3JlYXRlZCBvbiByZWRkaXQpXG4gICAqL1xuXG5cbiAgc3VibWl0U2VsZnBvc3Qob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9zdWJtaXQoX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucywge1xuICAgICAga2luZDogJ3NlbGYnXG4gICAgfSkpO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGxpbmsgc3VibWlzc2lvbiBvbiB0aGUgZ2l2ZW4gc3VicmVkZGl0LlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBBbiBvYmplY3QgY29udGFpbmluZyBkZXRhaWxzIGFib3V0IHRoZSBzdWJtaXNzaW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnN1YnJlZGRpdE5hbWUgVGhlIG5hbWUgb2YgdGhlIHN1YnJlZGRpdCB0aGF0IHRoZSBwb3N0IHNob3VsZCBiZSBzdWJtaXR0ZWQgdG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudGl0bGUgVGhlIHRpdGxlIG9mIHRoZSBzdWJtaXNzaW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnVybCBUaGUgdXJsIHRoYXQgdGhlIGxpbmsgc3VibWlzc2lvbiBzaG91bGQgcG9pbnQgdG9cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zZW5kUmVwbGllcz10cnVlXSBEZXRlcm1pbmVzIHdoZXRoZXIgaW5ib3ggcmVwbGllcyBzaG91bGQgYmUgZW5hYmxlZCBmb3IgdGhpcyBzdWJtaXNzaW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVzdWJtaXQ9dHJ1ZV0gSWYgdGhpcyBpcyBmYWxzZSBhbmQgc2FtZSBsaW5rIGhhcyBhbHJlYWR5IGJlZW4gc3VibWl0dGVkIHRvIHRoaXMgc3VicmVkZGl0IGluXG4gICB0aGUgcGFzdCwgcmVkZGl0IHdpbGwgcmV0dXJuIGFuIGVycm9yLiBUaGlzIGNvdWxkIGJlIHVzZWQgdG8gYXZvaWQgYWNjaWRlbnRhbCByZXBvc3RzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY2FwdGNoYUlkZW5dIEEgY2FwdGNoYSBpZGVudGlmaWVyLiBUaGlzIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIHRoZSBhdXRoZW50aWNhdGVkIGFjY291bnRcbiAgIHJlcXVpcmVzIGEgY2FwdGNoYSB0byBzdWJtaXQgcG9zdHMgYW5kIGNvbW1lbnRzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY2FwdGNoYVJlc3BvbnNlXSBUaGUgcmVzcG9uc2UgdG8gdGhlIGNhcHRjaGEgd2l0aCB0aGUgZ2l2ZW4gaWRlbnRpZmllclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIG5ld2x5LWNyZWF0ZWQgU3VibWlzc2lvbiBvYmplY3RcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5zdWJtaXRMaW5rKHtcbiAgICogICBzdWJyZWRkaXROYW1lOiAnc25vb3dyYXBfdGVzdGluZycsXG4gICAqICAgdGl0bGU6ICdJIGZvdW5kIGEgY29vbCB3ZWJzaXRlIScsXG4gICAqICAgdXJsOiAnaHR0cHM6Ly9nb29nbGUuY29tJ1xuICAgKiB9KS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBTdWJtaXNzaW9uIHsgbmFtZTogJ3QzXzRhYm5mZScgfVxuICAgKiAvLyAobmV3IGxpbmtwb3N0IGNyZWF0ZWQgb24gcmVkZGl0KVxuICAgKi9cblxuXG4gIHN1Ym1pdExpbmsob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9zdWJtaXQoX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucywge1xuICAgICAga2luZDogJ2xpbmsnXG4gICAgfSkpO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGNyb3NzcG9zdCBzdWJtaXNzaW9uIG9uIHRoZSBnaXZlbiBzdWJyZWRkaXRcbiAgICogQGRlc2MgKipOT1RFKio6IFRvIGNyZWF0ZSBhIGNyb3NzcG9zdCwgdGhlIGF1dGhlbnRpY2F0ZWQgYWNjb3VudCBtdXN0IGJlIHN1YnNjcmliZWQgdG8gdGhlIHN1YnJlZGRpdCB3aGVyZVxuICAgKiB0aGUgY3Jvc3Nwb3N0IGlzIGJlaW5nIHN1Ym1pdHRlZCwgYW5kIHRoYXQgc3VicmVkZGl0IGJlIGNvbmZpZ3VyZWQgdG8gYWxsb3cgY3Jvc3Nwb3N0cy5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZGV0YWlscyBhYm91dCB0aGUgc3VibWlzc2lvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5zdWJyZWRkaXROYW1lIFRoZSBuYW1lIG9mIHRoZSBzdWJyZWRkaXQgdGhhdCB0aGUgY3Jvc3Nwb3N0IHNob3VsZCBiZSBzdWJtaXR0ZWQgdG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudGl0bGUgVGhlIHRpdGxlIG9mIHRoZSBjcm9zc3Bvc3RcbiAgICogQHBhcmFtIHsoc3RyaW5nfFN1Ym1pc3Npb24pfSBvcHRpb25zLm9yaWdpbmFsUG9zdCBBIFN1Ym1pc3Npb24gb2JqZWN0IG9yIGEgcG9zdCBJRCBmb3IgdGhlIG9yaWdpbmFsIHBvc3Qgd2hpY2hcbiAgIGlzIGJlaW5nIGNyb3NzcG9zdGVkXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuc2VuZFJlcGxpZXM9dHJ1ZV0gRGV0ZXJtaW5lcyB3aGV0aGVyIGluYm94IHJlcGxpZXMgc2hvdWxkIGJlIGVuYWJsZWQgZm9yIHRoaXMgc3VibWlzc2lvblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJlc3VibWl0PXRydWVdIElmIHRoaXMgaXMgZmFsc2UgYW5kIHNhbWUgbGluayBoYXMgYWxyZWFkeSBiZWVuIHN1Ym1pdHRlZCB0byB0aGlzIHN1YnJlZGRpdCBpblxuICAgdGhlIHBhc3QsIHJlZGRpdCB3aWxsIHJldHVybiBhbiBlcnJvci4gVGhpcyBjb3VsZCBiZSB1c2VkIHRvIGF2b2lkIGFjY2lkZW50YWwgcmVwb3N0cy5cbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBuZXdseS1jcmVhdGVkIFN1Ym1pc3Npb24gb2JqZWN0XG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIGF3YWl0IHIuc3VibWl0Q3Jvc3Nwb3N0KHsgdGl0bGU6ICdJIGZvdW5kIGFuIGludGVyZXN0aW5nIHBvc3QnLCBvcmlnaW5hbFBvc3Q6ICc2dnRoczAnLCBzdWJyZWRkaXROYW1lOiAnc25vb3dyYXAnIH0pXG4gICAqL1xuXG5cbiAgc3VibWl0Q3Jvc3Nwb3N0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fc3VibWl0KF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMsIHtcbiAgICAgIGtpbmQ6ICdjcm9zc3Bvc3QnLFxuICAgICAgY3Jvc3Nwb3N0X2Z1bGxuYW1lOiBvcHRpb25zLm9yaWdpbmFsUG9zdCBpbnN0YW5jZW9mIHNub293cmFwLm9iamVjdHMuU3VibWlzc2lvbiA/IG9wdGlvbnMub3JpZ2luYWxQb3N0Lm5hbWUgOiAoMCwgX2hlbHBlcnMuYWRkRnVsbG5hbWVQcmVmaXgpKG9wdGlvbnMub3JpZ2luYWxQb3N0LCAndDNfJylcbiAgICB9KSk7XG4gIH1cblxuICBfZ2V0U29ydGVkRnJvbnRwYWdlKHNvcnRUeXBlLCBzdWJyZWRkaXROYW1lKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIC8vIEhhbmRsZSB0aGluZ3MgcHJvcGVybHkgaWYgb25seSBhIHRpbWUgcGFyYW1ldGVyIGlzIHByb3ZpZGVkIGJ1dCBub3QgdGhlIHN1YnJlZGRpdCBuYW1lXG4gICAgdmFyIG9wdHMgPSBvcHRpb25zO1xuICAgIHZhciBzdWJOYW1lID0gc3VicmVkZGl0TmFtZTtcblxuICAgIGlmICh0eXBlb2Ygc3VicmVkZGl0TmFtZSA9PT0gJ29iamVjdCcgJiYgKDAsIF9sb2Rhc2guaXNFbXB0eSkoKDAsIF9sb2Rhc2gub21pdEJ5KShvcHRzLCBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICByZXR1cm4gb3B0aW9uID09PSB1bmRlZmluZWQ7XG4gICAgfSkpKSB7XG4gICAgICAvKiBJbiB0aGlzIGNhc2UsIFwic3VicmVkZGl0TmFtZVwiIGVuZHMgdXAgcmVmZXJyaW5nIHRvIHRoZSBzZWNvbmQgYXJndW1lbnQsIHdoaWNoIGlzIG5vdCBhY3R1YWxseSBhIG5hbWUgc2luY2UgdGhlIHVzZXJcbiAgICAgIGRlY2lkZWQgdG8gb21pdCB0aGF0IHBhcmFtZXRlci4gKi9cbiAgICAgIG9wdHMgPSBzdWJyZWRkaXROYW1lO1xuICAgICAgc3ViTmFtZSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgcGFyc2VkT3B0aW9ucyA9ICgwLCBfbG9kYXNoLm9taXQpKF9vYmplY3RTcHJlYWQoe30sIG9wdHMsIHtcbiAgICAgIHQ6IG9wdHMudGltZSB8fCBvcHRzLnRcbiAgICB9KSwgJ3RpbWUnKTtcbiAgICByZXR1cm4gdGhpcy5fZ2V0TGlzdGluZyh7XG4gICAgICB1cmk6IChzdWJOYW1lID8gXCJyL1wiLmNvbmNhdChzdWJOYW1lLCBcIi9cIikgOiAnJykgKyBzb3J0VHlwZSxcbiAgICAgIHFzOiBwYXJzZWRPcHRpb25zXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgYSBMaXN0aW5nIG9mIGhvdCBwb3N0cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtzdWJyZWRkaXROYW1lXSBUaGUgc3VicmVkZGl0IHRvIGdldCBwb3N0cyBmcm9tLiBJZiBub3QgcHJvdmlkZWQsIHBvc3RzIGFyZSBmZXRjaGVkIGZyb21cbiAgIHRoZSBmcm9udCBwYWdlIG9mIHJlZGRpdC5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSBPcHRpb25zIGZvciB0aGUgcmVzdWx0aW5nIExpc3RpbmdcbiAgICogQHJldHVybnMge1Byb21pc2V9IEEgTGlzdGluZyBjb250YWluaW5nIHRoZSByZXRyaWV2ZWQgc3VibWlzc2lvbnNcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXRIb3QoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFtcbiAgICogLy8gIFN1Ym1pc3Npb24geyBkb21haW46ICdpbWd1ci5jb20nLCBiYW5uZWRfYnk6IG51bGwsIHN1YnJlZGRpdDogU3VicmVkZGl0IHsgZGlzcGxheV9uYW1lOiAncGljcycgfSwgLi4uIH0sXG4gICAqIC8vICBTdWJtaXNzaW9uIHsgZG9tYWluOiAnaS5pbWd1ci5jb20nLCBiYW5uZWRfYnk6IG51bGwsIHN1YnJlZGRpdDogU3VicmVkZGl0IHsgZGlzcGxheV9uYW1lOiAnZnVubnknIH0sIC4uLiB9LFxuICAgKiAvLyAgLi4uXG4gICAqIC8vIF1cbiAgICpcbiAgICogci5nZXRIb3QoJ2dpZnMnKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFtcbiAgICogLy8gIFN1Ym1pc3Npb24geyBkb21haW46ICdpLmltZ3VyLmNvbScsIGJhbm5lZF9ieTogbnVsbCwgc3VicmVkZGl0OiBTdWJyZWRkaXQgeyBkaXNwbGF5X25hbWU6ICdnaWZzJyB9LCAuLi4gfSxcbiAgICogLy8gIFN1Ym1pc3Npb24geyBkb21haW46ICdpLmltZ3VyLmNvbScsIGJhbm5lZF9ieTogbnVsbCwgc3VicmVkZGl0OiBTdWJyZWRkaXQgeyBkaXNwbGF5X25hbWU6ICdnaWZzJyB9LCAuLi4gfSxcbiAgICogLy8gIC4uLlxuICAgKiAvLyBdXG4gICAqXG4gICAqIHIuZ2V0SG90KCdyZWRkaXRkZXYnLCB7bGltaXQ6IDF9KS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFtcbiAgIC8vICAgU3VibWlzc2lvbiB7IGRvbWFpbjogJ3NlbGYucmVkZGl0ZGV2JywgYmFubmVkX2J5OiBudWxsLCBzdWJyZWRkaXQ6IFN1YnJlZGRpdCB7IGRpc3BsYXlfbmFtZTogJ3JlZGRpdGRldicgfSwgLi4ufVxuICAgKiAvLyBdXG4gICAqL1xuXG5cbiAgZ2V0SG90KHN1YnJlZGRpdE5hbWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0U29ydGVkRnJvbnRwYWdlKCdob3QnLCBzdWJyZWRkaXROYW1lLCBvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyBhIExpc3Rpbmcgb2YgYmVzdCBwb3N0cy5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSBPcHRpb25zIGZvciB0aGUgcmVzdWx0aW5nIExpc3RpbmdcbiAgICogQHJldHVybnMge1Byb21pc2U8TGlzdGluZz59IEEgTGlzdGluZyBjb250YWluaW5nIHRoZSByZXRyaWV2ZWQgc3VibWlzc2lvbnNcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXRCZXN0KCkudGhlbihjb25zb2xlLmxvZylcbiAgICogLy8gPT4gTGlzdGluZyBbXG4gICAqIC8vICBTdWJtaXNzaW9uIHsgZG9tYWluOiAnaW1ndXIuY29tJywgYmFubmVkX2J5OiBudWxsLCBzdWJyZWRkaXQ6IFN1YnJlZGRpdCB7IGRpc3BsYXlfbmFtZTogJ3BpY3MnIH0sIC4uLiB9LFxuICAgKiAvLyAgU3VibWlzc2lvbiB7IGRvbWFpbjogJ2kuaW1ndXIuY29tJywgYmFubmVkX2J5OiBudWxsLCBzdWJyZWRkaXQ6IFN1YnJlZGRpdCB7IGRpc3BsYXlfbmFtZTogJ2Z1bm55JyB9LCAuLi4gfSxcbiAgICogLy8gIC4uLlxuICAgKiAvLyBdXG4gICAqXG4gICAqIHIuZ2V0QmVzdCh7bGltaXQ6IDF9KS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFtcbiAgIC8vICAgU3VibWlzc2lvbiB7IGRvbWFpbjogJ3NlbGYucmVkZGl0ZGV2JywgYmFubmVkX2J5OiBudWxsLCBzdWJyZWRkaXQ6IFN1YnJlZGRpdCB7IGRpc3BsYXlfbmFtZTogJ3JlZGRpdGRldicgfSwgLi4ufVxuICAgKiAvLyBdXG4gICAqL1xuXG5cbiAgZ2V0QmVzdChvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFNvcnRlZEZyb250cGFnZSgnYmVzdCcsIHVuZGVmaW5lZCwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgYSBMaXN0aW5nIG9mIG5ldyBwb3N0cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtzdWJyZWRkaXROYW1lXSBUaGUgc3VicmVkZGl0IHRvIGdldCBwb3N0cyBmcm9tLiBJZiBub3QgcHJvdmlkZWQsIHBvc3RzIGFyZSBmZXRjaGVkIGZyb21cbiAgIHRoZSBmcm9udCBwYWdlIG9mIHJlZGRpdC5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSBPcHRpb25zIGZvciB0aGUgcmVzdWx0aW5nIExpc3RpbmdcbiAgICogQHJldHVybnMge1Byb21pc2V9IEEgTGlzdGluZyBjb250YWluaW5nIHRoZSByZXRyaWV2ZWQgc3VibWlzc2lvbnNcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXROZXcoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFtcbiAgICogLy8gIFN1Ym1pc3Npb24geyBkb21haW46ICdzZWxmLkpva2VzJywgYmFubmVkX2J5OiBudWxsLCBzdWJyZWRkaXQ6IFN1YnJlZGRpdCB7IGRpc3BsYXlfbmFtZTogJ0pva2VzJyB9LCAuLi4gfSxcbiAgICogLy8gIFN1Ym1pc3Npb24geyBkb21haW46ICdzZWxmLkFza1JlZGRpdCcsIGJhbm5lZF9ieTogbnVsbCwgc3VicmVkZGl0OiBTdWJyZWRkaXQgeyBkaXNwbGF5X25hbWU6ICdBc2tSZWRkaXQnIH0sIC4uLiB9LFxuICAgKiAvLyAgLi4uXG4gICAqIC8vIF1cbiAgICpcbiAgICovXG5cblxuICBnZXROZXcoc3VicmVkZGl0TmFtZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9nZXRTb3J0ZWRGcm9udHBhZ2UoJ25ldycsIHN1YnJlZGRpdE5hbWUsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBHZXRzIGEgTGlzdGluZyBvZiBuZXcgY29tbWVudHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc3VicmVkZGl0TmFtZV0gVGhlIHN1YnJlZGRpdCB0byBnZXQgY29tbWVudHMgZnJvbS4gSWYgbm90IHByb3ZpZGVkLCBwb3N0cyBhcmUgZmV0Y2hlZCBmcm9tXG4gICB0aGUgZnJvbnQgcGFnZSBvZiByZWRkaXQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gT3B0aW9ucyBmb3IgdGhlIHJlc3VsdGluZyBMaXN0aW5nXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIExpc3RpbmcgY29udGFpbmluZyB0aGUgcmV0cmlldmVkIGNvbW1lbnRzXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0TmV3Q29tbWVudHMoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFtcbiAgICogLy8gIENvbW1lbnQgeyBsaW5rX3RpdGxlOiAnV2hhdCBhbWF6aW5nIGJvb2sgc2hvdWxkIGJlIG1hZGUgaW50byBhIG1vdmllLCBidXQgaGFzblxcJ3QgYmVlbiB5ZXQ/JywgLi4uIH1cbiAgICogLy8gIENvbW1lbnQgeyBsaW5rX3RpdGxlOiAnSG93IGZhciBiYWNrIGluIHRpbWUgY291bGQgeW91IGdvIGFuZCBzdGlsbCB1bmRlcnN0YW5kIEVuZ2xpc2g/JywgLi4uIH1cbiAgICogLy8gXVxuICAgKi9cblxuXG4gIGdldE5ld0NvbW1lbnRzKHN1YnJlZGRpdE5hbWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0U29ydGVkRnJvbnRwYWdlKCdjb21tZW50cycsIHN1YnJlZGRpdE5hbWUsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiAgQHN1bW1hcnkgR2V0IGxpc3Qgb2YgY29udGVudCBieSBJRHMuIFJldHVybnMgYSBsaXN0aW5nIG9mIHRoZSByZXF1ZXN0ZWQgY29udGVudC5cbiAgICogIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN1Ym1pc3Npb258Q29tbWVudD59IGlkcyBBbiBhcnJheSBvZiBjb250ZW50IElEcy4gQ2FuIGluY2x1ZGUgdGhlIGlkIGl0c2VsZiwgb3IgYSBTdWJtaXNzaW9uIG9yIENvbW1lbnQgb2JqZWN0LlxuICBjYW4gZ2V0IGEgcG9zdCBhbmQgYSBjb21tZW50ICAgKiAgQHJldHVybnMge1Byb21pc2U8TGlzdGluZzxTdWJtaXNzaW9ufENvbW1lbnQ+Pn0gQSBsaXN0aW5nIG9mIGNvbnRlbnQgcmVxdWVzdGVkLCBjYW4gYmUgYW55IGNsYXNzIGZldGNoYWJsZSBieSBBUEkuIGUuZy4gQ29tbWVudCwgU3VibWlzc2lvblxuICAgKiAgQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXRDb250ZW50QnlJZHMoWyd0M185bDl2b2YnLCd0M185bGEzNDEnXSkudGhlbihjb25zb2xlLmxvZyk7XG4gICAqIC8vID0+IExpc3RpbmcgW1xuICAgKiAvLyAgU3VibWlzc2lvbiB7IGFwcHJvdmVkX2F0X3V0YzogbnVsbCwgLi4uIH1cbiAgICogLy8gIFN1Ym1pc3Npb24geyBhcHByb3ZlZF9hdF91dGM6IG51bGwsIC4uLiB9XG4gICAqIC8vIF1cbiAgICpcbiAgICogci5nZXRDb250ZW50QnlJZHMoW3IuZ2V0U3VibWlzc2lvbignOWw5dm9mJyksIHIuZ2V0U3VibWlzc2lvbignOWxhMzQxJyldKS50aGVuKGNvbnNvbGUubG9nKTtcbiAgICogLy8gPT4gTGlzdGluZyBbXG4gICAqIC8vICBTdWJtaXNzaW9uIHsgYXBwcm92ZWRfYXRfdXRjOiBudWxsLCAuLi4gfVxuICAgKiAvLyAgU3VibWlzc2lvbiB7IGFwcHJvdmVkX2F0X3V0YzogbnVsbCwgLi4uIH1cbiAgICogLy8gXVxuICAqL1xuXG5cbiAgZ2V0Q29udGVudEJ5SWRzKGlkcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpZHMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGFyZ3VtZW50OiBBcmd1bWVudCBuZWVkcyB0byBiZSBhbiBhcnJheS4nKTtcbiAgICB9XG5cbiAgICB2YXIgcHJlZml4ZWRJZHMgPSBpZHMubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgICAgaWYgKGlkIGluc3RhbmNlb2Ygc25vb3dyYXAub2JqZWN0cy5TdWJtaXNzaW9uIHx8IGlkIGluc3RhbmNlb2Ygc25vb3dyYXAub2JqZWN0cy5Db21tZW50KSB7XG4gICAgICAgIHJldHVybiBpZC5uYW1lO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICghL3QoMXwzKV8vZy50ZXN0KGlkcykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGFyZ3VtZW50OiBJZHMgbmVlZCB0byBpbmNsdWRlIFN1Ym1pc3Npb24gb3IgQ29tbWVudCBwcmVmaXgsIGUuZy4gdDFfLCB0M18uJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaWQ7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0lkIG11c3QgYmUgZWl0aGVyIGEgc3RyaW5nLCBTdWJtaXNzaW9uLCBvciBDb21tZW50LicpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLl9nZXQoe1xuICAgICAgdXJpOiAnL2FwaS9pbmZvJyxcbiAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICBxczoge1xuICAgICAgICBpZDogcHJlZml4ZWRJZHMuam9pbignLCcpXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgYSBzaW5nbGUgcmFuZG9tIFN1Ym1pc3Npb24uXG4gICAqIEBkZXNjICoqTm90ZSoqOiBUaGlzIGZ1bmN0aW9uIHdpbGwgbm90IHdvcmsgd2hlbiBzbm9vd3JhcCBpcyBydW5uaW5nIGluIGEgYnJvd3NlciwgYmVjYXVzZSB0aGUgcmVkZGl0IHNlcnZlciBzZW5kcyBhXG4gICByZWRpcmVjdCB3aGljaCBjYW5ub3QgYmUgZm9sbG93ZWQgYnkgYSBDT1JTIHJlcXVlc3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc3VicmVkZGl0TmFtZV0gVGhlIHN1YnJlZGRpdCB0byBnZXQgdGhlIHJhbmRvbSBzdWJtaXNzaW9uLiBJZiBub3QgcHJvdmlkZWQsIHRoZSBwb3N0IGlzIGZldGNoZWQgZnJvbVxuICAgdGhlIGZyb250IHBhZ2Ugb2YgcmVkZGl0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIHJldHJpZXZlZCBTdWJtaXNzaW9uIG9iamVjdFxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldFJhbmRvbVN1Ym1pc3Npb24oJ2F3dycpLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IFN1Ym1pc3Npb24geyBkb21haW46ICdpLmltZ3VyLmNvbScsIGJhbm5lZF9ieTogbnVsbCwgc3VicmVkZGl0OiBTdWJyZWRkaXQgeyBkaXNwbGF5X25hbWU6ICdhd3cnIH0sIC4uLiB9XG4gICAqL1xuXG5cbiAgZ2V0UmFuZG9tU3VibWlzc2lvbihzdWJyZWRkaXROYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldCh7XG4gICAgICB1cmk6IFwiXCIuY29uY2F0KHN1YnJlZGRpdE5hbWUgPyBcInIvXCIuY29uY2F0KHN1YnJlZGRpdE5hbWUsIFwiL1wiKSA6ICcnLCBcInJhbmRvbVwiKVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBHZXRzIGEgTGlzdGluZyBvZiB0b3AgcG9zdHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc3VicmVkZGl0TmFtZV0gVGhlIHN1YnJlZGRpdCB0byBnZXQgcG9zdHMgZnJvbS4gSWYgbm90IHByb3ZpZGVkLCBwb3N0cyBhcmUgZmV0Y2hlZCBmcm9tXG4gICB0aGUgZnJvbnQgcGFnZSBvZiByZWRkaXQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gT3B0aW9ucyBmb3IgdGhlIHJlc3VsdGluZyBMaXN0aW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50aW1lXSBEZXNjcmliZXMgdGhlIHRpbWVzcGFuIHRoYXQgcG9zdHMgc2hvdWxkIGJlIHJldHJpZXZlZCBmcm9tLiBTaG91bGQgYmUgb25lIG9mXG4gICBgaG91ciwgZGF5LCB3ZWVrLCBtb250aCwgeWVhciwgYWxsYFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBMaXN0aW5nIGNvbnRhaW5pbmcgdGhlIHJldHJpZXZlZCBzdWJtaXNzaW9uc1xuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldFRvcCh7dGltZTogJ2FsbCcsIGxpbWl0OiAyfSkudGhlbihjb25zb2xlLmxvZylcbiAgICogLy8gPT4gTGlzdGluZyBbXG4gICAqIC8vICBTdWJtaXNzaW9uIHsgZG9tYWluOiAnc2VsZi5Bc2tSZWRkaXQnLCBiYW5uZWRfYnk6IG51bGwsIHN1YnJlZGRpdDogU3VicmVkZGl0IHsgZGlzcGxheV9uYW1lOiAnQXNrUmVkZGl0JyB9LCAuLi4gfSxcbiAgICogLy8gIFN1Ym1pc3Npb24geyBkb21haW46ICdpbWd1ci5jb20nLCBiYW5uZWRfYnk6IG51bGwsIHN1YnJlZGRpdDogU3VicmVkZGl0IHsgZGlzcGxheV9uYW1lOiAnZnVubnknIH0sIC4uLiB9XG4gICAqIC8vIF1cbiAgICpcbiAgICogci5nZXRUb3AoJ0Fza1JlZGRpdCcpLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IExpc3RpbmcgW1xuICAgKiAvLyAgU3VibWlzc2lvbiB7IGRvbWFpbjogJ3NlbGYuQXNrUmVkZGl0JywgYmFubmVkX2J5OiBudWxsLCBzdWJyZWRkaXQ6IFN1YnJlZGRpdCB7IGRpc3BsYXlfbmFtZTogJ0Fza1JlZGRpdCcgfSwgLi4uIH0sXG4gICAqIC8vICBTdWJtaXNzaW9uIHsgZG9tYWluOiAnc2VsZi5Bc2tSZWRkaXQnLCBiYW5uZWRfYnk6IG51bGwsIHN1YnJlZGRpdDogU3VicmVkZGl0IHsgZGlzcGxheV9uYW1lOiAnQXNrUmVkZGl0JyB9LCAuLi4gfSxcbiAgICogLy8gIFN1Ym1pc3Npb24geyBkb21haW46ICdzZWxmLkFza1JlZGRpdCcsIGJhbm5lZF9ieTogbnVsbCwgc3VicmVkZGl0OiBTdWJyZWRkaXQgeyBkaXNwbGF5X25hbWU6ICdBc2tSZWRkaXQnIH0sIC4uLiB9LFxuICAgKiAvLyAgLi4uXG4gICAqIC8vIF1cbiAgICovXG5cblxuICBnZXRUb3Aoc3VicmVkZGl0TmFtZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9nZXRTb3J0ZWRGcm9udHBhZ2UoJ3RvcCcsIHN1YnJlZGRpdE5hbWUsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBHZXRzIGEgTGlzdGluZyBvZiBjb250cm92ZXJzaWFsIHBvc3RzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3N1YnJlZGRpdE5hbWVdIFRoZSBzdWJyZWRkaXQgdG8gZ2V0IHBvc3RzIGZyb20uIElmIG5vdCBwcm92aWRlZCwgcG9zdHMgYXJlIGZldGNoZWQgZnJvbVxuICAgdGhlIGZyb250IHBhZ2Ugb2YgcmVkZGl0LlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dIE9wdGlvbnMgZm9yIHRoZSByZXN1bHRpbmcgTGlzdGluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudGltZV0gRGVzY3JpYmVzIHRoZSB0aW1lc3BhbiB0aGF0IHBvc3RzIHNob3VsZCBiZSByZXRyaWV2ZWQgZnJvbS4gU2hvdWxkIGJlIG9uZSBvZlxuICAgYGhvdXIsIGRheSwgd2VlaywgbW9udGgsIHllYXIsIGFsbGBcbiAgICogQHJldHVybnMge1Byb21pc2V9IEEgTGlzdGluZyBjb250YWluaW5nIHRoZSByZXRyaWV2ZWQgc3VibWlzc2lvbnNcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXRDb250cm92ZXJzaWFsKCd0ZWNobm9sb2d5JykudGhlbihjb25zb2xlLmxvZylcbiAgICogLy8gPT4gTGlzdGluZyBbXG4gICAqIC8vICBTdWJtaXNzaW9uIHsgZG9tYWluOiAndGhlbmV4dHdlYi5jb20nLCBiYW5uZWRfYnk6IG51bGwsIHN1YnJlZGRpdDogU3VicmVkZGl0IHsgZGlzcGxheV9uYW1lOiAndGVjaG5vbG9neScgfSwgLi4uIH0sXG4gICAqIC8vICBTdWJtaXNzaW9uIHsgZG9tYWluOiAncGNtYWcuY29tJywgYmFubmVkX2J5OiBudWxsLCBzdWJyZWRkaXQ6IFN1YnJlZGRpdCB7IGRpc3BsYXlfbmFtZTogJ3RlY2hub2xvZ3knIH0sIC4uLiB9XG4gICAqIC8vIF1cbiAgICovXG5cblxuICBnZXRDb250cm92ZXJzaWFsKHN1YnJlZGRpdE5hbWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0U29ydGVkRnJvbnRwYWdlKCdjb250cm92ZXJzaWFsJywgc3VicmVkZGl0TmFtZSwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgYSBMaXN0aW5nIG9mIGNvbnRyb3ZlcnNpYWwgcG9zdHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc3VicmVkZGl0TmFtZV0gVGhlIHN1YnJlZGRpdCB0byBnZXQgcG9zdHMgZnJvbS4gSWYgbm90IHByb3ZpZGVkLCBwb3N0cyBhcmUgZmV0Y2hlZCBmcm9tXG4gICB0aGUgZnJvbnQgcGFnZSBvZiByZWRkaXQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBmb3IgdGhlIHJlc3VsdGluZyBMaXN0aW5nXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIExpc3RpbmcgY29udGFpbmluZyB0aGUgcmV0cmlldmVkIHN1Ym1pc3Npb25zXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0UmlzaW5nKCd0ZWNobm9sb2d5JykudGhlbihjb25zb2xlLmxvZylcbiAgICogLy8gPT4gTGlzdGluZyBbXG4gICAqIC8vICBTdWJtaXNzaW9uIHsgZG9tYWluOiAndGhlbmV4dHdlYi5jb20nLCBiYW5uZWRfYnk6IG51bGwsIHN1YnJlZGRpdDogU3VicmVkZGl0IHsgZGlzcGxheV9uYW1lOiAndGVjaG5vbG9neScgfSwgLi4uIH0sXG4gICAqIC8vICBTdWJtaXNzaW9uIHsgZG9tYWluOiAncGNtYWcuY29tJywgYmFubmVkX2J5OiBudWxsLCBzdWJyZWRkaXQ6IFN1YnJlZGRpdCB7IGRpc3BsYXlfbmFtZTogJ3RlY2hub2xvZ3knIH0sIC4uLiB9XG4gICAqIC8vIF1cbiAgICovXG5cblxuICBnZXRSaXNpbmcoc3VicmVkZGl0TmFtZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9nZXRTb3J0ZWRGcm9udHBhZ2UoJ3Jpc2luZycsIHN1YnJlZGRpdE5hbWUsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIncyB1bnJlYWQgbWVzc2FnZXMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gT3B0aW9ucyBmb3IgdGhlIHJlc3VsdGluZyBMaXN0aW5nXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIExpc3RpbmcgY29udGFpbmluZyB1bnJlYWQgaXRlbXMgaW4gdGhlIHVzZXIncyBpbmJveFxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldFVucmVhZE1lc3NhZ2VzKCkudGhlbihjb25zb2xlLmxvZylcbiAgICogLy8gPT4gTGlzdGluZyBbXG4gICAqIC8vICBQcml2YXRlTWVzc2FnZSB7IGJvZHk6ICdoaSEnLCB3YXNfY29tbWVudDogZmFsc2UsIGZpcnN0X21lc3NhZ2U6IG51bGwsIC4uLiB9LFxuICAgKiAvLyAgQ29tbWVudCB7IGJvZHk6ICd0aGlzIGlzIGEgcmVwbHknLCBsaW5rX3RpdGxlOiAnWWF5LCBhIHNlbGZwb3N0IScsIHdhc19jb21tZW50OiB0cnVlLCAuLi4gfVxuICAgKiAvLyBdXG4gICAqL1xuXG5cbiAgZ2V0VW5yZWFkTWVzc2FnZXMoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHJldHVybiB0aGlzLl9nZXRMaXN0aW5nKHtcbiAgICAgIHVyaTogJ21lc3NhZ2UvdW5yZWFkJyxcbiAgICAgIHFzOiBvcHRpb25zXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgdGhlIGl0ZW1zIGluIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIncyBpbmJveC5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSBGaWx0ZXIgb3B0aW9ucy4gQ2FuIGFsc28gY29udGFpbiBvcHRpb25zIGZvciB0aGUgcmVzdWx0aW5nIExpc3RpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5maWx0ZXJdIEEgZmlsdGVyIGZvciB0aGUgaW5ib3ggaXRlbXMuIElmIHByb3ZpZGVkLCBpdCBzaG91bGQgYmUgb25lIG9mIGB1bnJlYWRgLCAodW5yZWFkXG4gICBpdGVtcyksIGBtZXNzYWdlc2AgKGkuZS4gUE1zKSwgYGNvbW1lbnRzYCAoY29tbWVudCByZXBsaWVzKSwgYHNlbGZyZXBseWAgKHNlbGZwb3N0IHJlcGxpZXMpLCBvciBgbWVudGlvbnNgICh1c2VybmFtZVxuICAgbWVudGlvbnMpLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBMaXN0aW5nIGNvbnRhaW5pbmcgaXRlbXMgaW4gdGhlIHVzZXIncyBpbmJveFxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldEluYm94KCkudGhlbihjb25zb2xlLmxvZylcbiAgICogLy8gPT4gTGlzdGluZyBbXG4gICAqIC8vICBQcml2YXRlTWVzc2FnZSB7IGJvZHk6ICdoaSEnLCB3YXNfY29tbWVudDogZmFsc2UsIGZpcnN0X21lc3NhZ2U6IG51bGwsIC4uLiB9LFxuICAgKiAvLyAgQ29tbWVudCB7IGJvZHk6ICd0aGlzIGlzIGEgcmVwbHknLCBsaW5rX3RpdGxlOiAnWWF5LCBhIHNlbGZwb3N0IScsIHdhc19jb21tZW50OiB0cnVlLCAuLi4gfVxuICAgKiAvLyBdXG4gICAqL1xuXG5cbiAgZ2V0SW5ib3goKSB7XG4gICAgdmFyIF9yZWY2ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgZmlsdGVyID0gX3JlZjYuZmlsdGVyLFxuICAgICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWY2LCBbXCJmaWx0ZXJcIl0pO1xuXG4gICAgcmV0dXJuIHRoaXMuX2dldExpc3Rpbmcoe1xuICAgICAgdXJpOiBcIm1lc3NhZ2UvXCIuY29uY2F0KGZpbHRlciB8fCAnaW5ib3gnKSxcbiAgICAgIHFzOiBvcHRpb25zXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlcidzIG1vZG1haWwuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gT3B0aW9ucyBmb3IgdGhlIHJlc3VsdGluZyBMaXN0aW5nXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIExpc3Rpbmcgb2YgdGhlIHVzZXIncyBtb2RtYWlsXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0TW9kbWFpbCh7bGltaXQ6IDJ9KS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFtcbiAgICogLy8gIFByaXZhdGVNZXNzYWdlIHsgYm9keTogJy91L25vdF9hbl9hYXJkdmFyayBoYXMgYWNjZXB0ZWQgYW4gaW52aXRhdGlvbiB0byBiZWNvbWUgbW9kZXJhdG9yIC4uLiAnLCAuLi4gfSxcbiAgICogLy8gIFByaXZhdGVNZXNzYWdlIHsgYm9keTogJy91L25vdF9hbl9hYXJkdmFyayBoYXMgYmVlbiBpbnZpdGVkIGJ5IC91L2FjdHVhbGx5X2FuX2FhcmR2YXJrIHRvIC4uLicsIC4uLiB9XG4gICAqIC8vIF1cbiAgICovXG5cblxuICBnZXRNb2RtYWlsKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICByZXR1cm4gdGhpcy5fZ2V0TGlzdGluZyh7XG4gICAgICB1cmk6ICdtZXNzYWdlL21vZGVyYXRvcicsXG4gICAgICBxczogb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBHZXRzIGEgbGlzdCBvZiBNb2RtYWlsQ29udmVyc2F0aW9ucyBmcm9tIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIncyBzdWJyZWRkaXRzLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgZm9yIHRoZSByZXN1bHRpbmcgTGlzdGluZ1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMaXN0aW5nPE1vZG1haWxDb252ZXJzYXRpb24+Pn0gQSBMaXN0aW5nIGNvbnRhaW5pbmcgU3VicmVkZGl0c1xuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldE5ld01vZG1haWxDb252ZXJzYXRpb25zKHtsaW1pdDogMn0pLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IExpc3RpbmcgW1xuICAgKiAvLyAgTW9kbWFpbENvbnZlcnNhdGlvbiB7IG1lc3NhZ2VzOiBbLi4uXSwgb2JqSWRzOiBbLi4uXSwgc3ViamVjdDogJ3Rlc3Qgc3ViamVjdCcsIC4uLiB9LFxuICAgKiAvLyAgTW9kbWFpbENvbnZlcnNhdGlvbiB7IG1lc3NhZ2VzOiBbLi4uXSwgb2JqSWRzOiBbLi4uXSwgc3ViamVjdDogJ3Rlc3Qgc3ViamVjdCcsIC4uLiB9XG4gICAqIC8vIF1cbiAgICovXG5cblxuICBnZXROZXdNb2RtYWlsQ29udmVyc2F0aW9ucygpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICByZXR1cm4gdGhpcy5fZ2V0TGlzdGluZyh7XG4gICAgICB1cmk6ICdhcGkvbW9kL2NvbnZlcnNhdGlvbnMnLFxuICAgICAgcXM6IG9wdGlvbnMsXG4gICAgICBfbmFtZTogJ01vZG1haWxDb252ZXJzYXRpb24nLFxuICAgICAgX3RyYW5zZm9ybTogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHJlc3BvbnNlLmFmdGVyID0gbnVsbDtcbiAgICAgICAgcmVzcG9uc2UuYmVmb3JlID0gbnVsbDtcbiAgICAgICAgcmVzcG9uc2UuY2hpbGRyZW4gPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBjb252ZXJzYXRpb24gb2YgcmVzcG9uc2UuY29udmVyc2F0aW9uSWRzKSB7XG4gICAgICAgICAgcmVzcG9uc2UuY29udmVyc2F0aW9uc1tjb252ZXJzYXRpb25dLnBhcnRpY2lwYW50ID0gX3RoaXM2Ll9uZXdPYmplY3QoJ01vZG1haWxDb252ZXJzYXRpb25BdXRob3InLCBfb2JqZWN0U3ByZWFkKHt9LCByZXNwb25zZS5jb252ZXJzYXRpb25zW2NvbnZlcnNhdGlvbl0ucGFydGljaXBhbnQpKTtcblxuICAgICAgICAgIHZhciBjb252ZXJzYXRpb25PYmplY3RzID0gb2JqZWN0cy5Nb2RtYWlsQ29udmVyc2F0aW9uLl9nZXRDb252ZXJzYXRpb25PYmplY3RzKHJlc3BvbnNlLmNvbnZlcnNhdGlvbnNbY29udmVyc2F0aW9uXSwgcmVzcG9uc2UpO1xuXG4gICAgICAgICAgdmFyIGRhdGEgPSBfb2JqZWN0U3ByZWFkKHt9LCBjb252ZXJzYXRpb25PYmplY3RzLCB7fSwgcmVzcG9uc2UuY29udmVyc2F0aW9uc1tjb252ZXJzYXRpb25dKTtcblxuICAgICAgICAgIHJlc3BvbnNlLmNoaWxkcmVuLnB1c2goX3RoaXM2Ll9uZXdPYmplY3QoJ01vZG1haWxDb252ZXJzYXRpb24nLCBkYXRhKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3RoaXM2Ll9uZXdPYmplY3QoJ0xpc3RpbmcnLCByZXNwb25zZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IENyZWF0ZSBhIG5ldyBtb2RtYWlsIGRpc2N1c3Npb24gYmV0d2VlbiBtb2RlcmF0b3JzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmJvZHkgQm9keSBvZiB0aGUgZGlzY3Vzc2lvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5zdWJqZWN0IFRpdGxlIG9yIHN1YmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuc3JOYW1lIFN1YnJlZGRpdCBuYW1lIHdpdGhvdXQgZnVsbG5hbWVcbiAgICogQHJldHVybnMge1Byb21pc2U8TW9kbWFpbENvbnZlcnNhdGlvbj59IHRoZSBjcmVhdGVkIE1vZG1haWxDb252ZXJzYXRpb25cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5jcmVhdGVNb2RlcmF0b3JEaXNjdXNzaW9uKHtcbiAgICogICBib2R5OiAndGVzdCBib2R5JyxcbiAgICogICBzdWJqZWN0OiAndGVzdCBzdWJqZWN0JyxcbiAgICogICBzck5hbWU6ICdBc2tSZWRkaXQnXG4gICAqIH0pLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vIE1vZG1haWxDb252ZXJzYXRpb24geyBtZXNzYWdlczogWy4uLl0sIG9iaklkczogWy4uLl0sIHN1YmplY3Q6ICd0ZXN0IHN1YmplY3QnLCAuLi4gfVxuICAgKi9cblxuXG4gIGNyZWF0ZU1vZG1haWxEaXNjdXNzaW9uKF9yZWY3KSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICB2YXIgYm9keSA9IF9yZWY3LmJvZHksXG4gICAgICAgIHN1YmplY3QgPSBfcmVmNy5zdWJqZWN0LFxuICAgICAgICBzck5hbWUgPSBfcmVmNy5zck5hbWU7XG4gICAgdmFyIHBhcnNlZEZyb21TciA9IHNyTmFtZS5yZXBsYWNlKC9eXFwvP3JcXC8vLCAnJyk7IC8vIENvbnZlcnQgJy9yL3N1YnJlZGRpdF9uYW1lJyB0byAnc3VicmVkZGl0X25hbWUnXG4gICAgLy8gX25ld09iamVjdCBpZ25vcmVzIG1vc3Qgb2YgdGhlIHJlc3BvbnNlLCBubyBwcmFjdGljYWwgd2F5IHRvIHBhcnNlIHRoZSByZXR1cm5lZCBjb250ZW50IHlldFxuXG4gICAgcmV0dXJuIHRoaXMuX3Bvc3Qoe1xuICAgICAgdXJpOiAnYXBpL21vZC9jb252ZXJzYXRpb25zJyxcbiAgICAgIGZvcm06IHtcbiAgICAgICAgYm9keSxcbiAgICAgICAgc3ViamVjdCxcbiAgICAgICAgc3JOYW1lOiBwYXJzZWRGcm9tU3JcbiAgICAgIH1cbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIHJldHVybiBfdGhpczcuX25ld09iamVjdCgnTW9kbWFpbENvbnZlcnNhdGlvbicsIHtcbiAgICAgICAgaWQ6IHJlcy5jb252ZXJzYXRpb24uaWRcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBHZXQgYSBNb2RtYWlsQ29udmVyc2F0aW9uIGJ5IGl0cyBpZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgb2YgdGhlIE1vZG1haWxDb252ZXJzYXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8TW9kbWFpbENvbnZlcnNhdGlvbj59IHRoZSByZXF1ZXN0ZWQgTW9kbWFpbENvbnZlcnNhdGlvblxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldE5ld01vZG1haWxDb252ZXJzYXRpb24oJzc1aHh0JykudGhlbihjb25zb2xlLmxvZylcbiAgICogLy8gTW9kbWFpbENvbnZlcnNhdGlvbiB7IG1lc3NhZ2VzOiBbLi4uXSwgb2JqSWRzOiBbLi4uXSwgLi4uIH1cbiAgICovXG5cblxuICBnZXROZXdNb2RtYWlsQ29udmVyc2F0aW9uKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX25ld09iamVjdCgnTW9kbWFpbENvbnZlcnNhdGlvbicsIHtcbiAgICAgIGlkXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IE1hcmtzIGFsbCBjb252ZXJzYXRpb25zIGluIGFycmF5IGFzIHJlYWQuXG4gICAqIEBwYXJhbSB7TW9kbWFpbENvbnZlcnNhdGlvbltdfSBjb252ZXJzYXRpb25zIHRvIG1hcmsgYXMgcmVhZFxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLm1hcmtOZXdNb2RtYWlsQ29udmVyc2F0aW9uc0FzUmVhZChbJ3BpY3MnLCAnc3dlZGVuJ10pXG4gICAqL1xuXG5cbiAgbWFya05ld01vZG1haWxDb252ZXJzYXRpb25zQXNSZWFkKGNvbnZlcnNhdGlvbnMpIHtcbiAgICB2YXIgY29udmVyc2F0aW9uSWRzID0gY29udmVyc2F0aW9ucy5tYXAoZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiAoMCwgX2hlbHBlcnMuYWRkRnVsbG5hbWVQcmVmaXgpKG1lc3NhZ2UsICcnKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5fcG9zdCh7XG4gICAgICB1cmk6ICdhcGkvbW9kL2NvbnZlcnNhdGlvbnMvcmVhZCcsXG4gICAgICBmb3JtOiB7XG4gICAgICAgIGNvbnZlcnNhdGlvbklkczogY29udmVyc2F0aW9uSWRzLmpvaW4oJywnKVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBNYXJrcyBhbGwgY29udmVyc2F0aW9ucyBpbiBhcnJheSBhcyB1bnJlYWQuXG4gICAqIEBwYXJhbSB7TW9kbWFpbENvbnZlcnNhdGlvbltdfSBjb252ZXJzYXRpb25zIHRvIG1hcmsgYXMgdW5yZWFkXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIubWFya05ld01vZG1haWxDb252ZXJzYXRpb25zQXNVbnJlYWQoWydwaWNzJywgJ3N3ZWRlbiddKVxuICAgKi9cblxuXG4gIG1hcmtOZXdNb2RtYWlsQ29udmVyc2F0aW9uc0FzVW5yZWFkKGNvbnZlcnNhdGlvbnMpIHtcbiAgICB2YXIgY29udmVyc2F0aW9uSWRzID0gY29udmVyc2F0aW9ucy5tYXAoZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiAoMCwgX2hlbHBlcnMuYWRkRnVsbG5hbWVQcmVmaXgpKG1lc3NhZ2UsICcnKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5fcG9zdCh7XG4gICAgICB1cmk6ICdhcGkvbW9kL2NvbnZlcnNhdGlvbnMvdW5yZWFkJyxcbiAgICAgIGZvcm06IHtcbiAgICAgICAgY29udmVyc2F0aW9uSWRzOiBjb252ZXJzYXRpb25JZHMuam9pbignLCcpXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgYWxsIG1vZGVyYXRlZCBzdWJyZWRkaXRzIHRoYXQgaGF2ZSBuZXcgTW9kbWFpbCBhY3RpdmF0ZWRcbiAgICogQHJldHVybnMge1Byb21pc2U8TGlzdGluZzxTdWJyZWRkaXQ+Pn0gYSBMaXN0aW5nIG9mIE1vZG1haWxDb252ZXJzYXRpb25zIG1hcmtlZCBhcyByZWFkXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0TmV3TW9kbWFpbFN1YnJlZGRpdHMoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFtcbiAgICogLy8gIFN1YnJlZGRpdCB7IGRpc3BsYXlfbmFtZTogJ3RpcG9mbXl0b25ndWUnLCAuLi4gfSxcbiAgICogLy8gIFN1YnJlZGRpdCB7IGRpc3BsYXlfbmFtZTogJ0VhcnRoUG9ybicsIC4uLiB9LFxuICAgKiAvLyBdXG4gICAqL1xuXG5cbiAgZ2V0TmV3TW9kbWFpbFN1YnJlZGRpdHMoKSB7XG4gICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICByZXR1cm4gdGhpcy5fZ2V0KHtcbiAgICAgIHVyaTogJ2FwaS9tb2QvY29udmVyc2F0aW9ucy9zdWJyZWRkaXRzJ1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXNwb25zZS5zdWJyZWRkaXRzKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzOC5fbmV3T2JqZWN0KCdTdWJyZWRkaXQnLCBzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBSZXByZXNlbnRzIHRoZSB1bnJlYWQgY291bnQgaW4gYSB7QGxpbmsgTW9kbWFpbENvbnZlcnNhdGlvbn0uIEVhY2ggb2YgdGhlc2UgcHJvcGVydGllc1xuICAgKiBjb3JyZXNwb25kIHRvIHRoZSBhbW91bnQgb2YgdW5yZWFkIGNvbnZlcnNhdGlvbnMgb2YgdGhhdCB0eXBlLlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBVbnJlYWRDb3VudFxuICAgKiBAcHJvcGVydHkge251bWJlcn0gaGlnaGxpZ2h0ZWRcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IG5vdGlmaWNhdGlvbnNcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGFyY2hpdmVkXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBuZXdcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGlucHJvZ3Jlc3NcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IG1vZFxuICAgKi9cblxuICAvKipcbiAgICogQHN1bW1hcnkgUmV0cmlldmVzIGFuIG9iamVjdCBvZiB1bnJlYWQgTW9kbWFpbCBjb252ZXJzYXRpb25zIGZvciBlYWNoIHN0YXRlLlxuICAgKiBAcmV0dXJucyB7VW5yZWFkQ291bnR9IHVucmVhZENvdW50XG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0VW5yZWFkTmV3TW9kbWFpbENvbnZlcnNhdGlvbnNDb3VudCgpLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IHtcbiAgICogLy8gIGFyY2hpdmVkOiAxLFxuICAgKiAvLyAgYXBwZWFsczogMSxcbiAgICogLy8gIGhpZ2hsaWdodGVkOiAwLFxuICAgKiAvLyAgbm90aWZpY2F0aW9uczogMCxcbiAgICogLy8gIGpvaW5fcmVxdWVzdHM6IDAsXG4gICAqIC8vICBuZXc6IDIsXG4gICAqIC8vICBpbnByb2dyZXNzOiA1LFxuICAgKiAvLyAgbW9kOiAxLFxuICAgKiAvLyB9XG4gICAqL1xuXG5cbiAgZ2V0VW5yZWFkTmV3TW9kbWFpbENvbnZlcnNhdGlvbnNDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0KHtcbiAgICAgIHVyaTogJ2FwaS9tb2QvY29udmVyc2F0aW9ucy91bnJlYWQvY291bnQnXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IE1hcmsgTW9kbWFpbCBjb252ZXJzYXRpb25zIGFzIHJlYWQgZ2l2ZW4gdGhlIHN1YnJlZGRpdChzKSBhbmQgc3RhdGUuXG4gICAqIEBwYXJhbSB7U3VicmVkZGl0W118U3RyaW5nW119IHN1YnJlZGRpdHNcbiAgICogQHBhcmFtIHsoJ2FyY2hpdmVkJ3wnYXBwZWFscyd8J2hpZ2hsaWdodGVkJ3wnbm90aWZpY2F0aW9ucyd8J2pvaW5fcmVxdWVzdHMnfCduZXcnfCdpbnByb2dyZXNzJ3wnbW9kJ3wnYWxsJyl9IHN0YXRlIHNlbGVjdGVkIHN0YXRlIHRvIG1hcmsgYXMgcmVhZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMaXN0aW5nPE1vZG1haWxDb252ZXJzYXRpb24+Pn0gYSBMaXN0aW5nIG9mIE1vZG1haWxDb252ZXJzYXRpb25zIG1hcmtlZCBhcyByZWFkXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuYnVsa1JlYWROZXdNb2RtYWlsKFsnQXNrUmVkZGl0J10sICdhbGwnKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFtcbiAgICogLy8gIE1vZG1haWxDb252ZXJzYXRpb24geyBpZDogJzc1aHh0JyB9LFxuICAgKiAvLyAgTW9kbWFpbENvbnZlcnNhdGlvbiB7IGlkOiAnNzVoeGcnIH1cbiAgICogLy8gXVxuICAgKlxuICAgKiByLmJ1bGtSZWFkTmV3TW9kbWFpbChbci5nZXRTdWJyZWRkaXQoJ0Fza1JlZGRpdCcpXSwgJ2FsbCcpLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IExpc3RpbmcgW1xuICAgKiAvLyAgTW9kbWFpbENvbnZlcnNhdGlvbiB7IGlkOiAnNzVoeHQnIH0sXG4gICAqIC8vICBNb2RtYWlsQ29udmVyc2F0aW9uIHsgaWQ6ICc3NWh4ZycgfVxuICAgKiAvLyBdXG4gICAqL1xuXG5cbiAgYnVsa1JlYWROZXdNb2RtYWlsKHN1YnJlZGRpdHMsIHN0YXRlKSB7XG4gICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICB2YXIgc3VicmVkZGl0TmFtZXMgPSBzdWJyZWRkaXRzLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJyA/IHMucmVwbGFjZSgvXlxcLz9yXFwvLywgJycpIDogcy5kaXNwbGF5X25hbWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX3Bvc3Qoe1xuICAgICAgdXJpOiAnYXBpL21vZC9jb252ZXJzYXRpb25zL2J1bGsvcmVhZCcsXG4gICAgICBmb3JtOiB7XG4gICAgICAgIGVudGl0eTogc3VicmVkZGl0TmFtZXMuam9pbignLCcpLFxuICAgICAgICBzdGF0ZVxuICAgICAgfVxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgcmV0dXJuIF90aGlzOS5fbmV3T2JqZWN0KCdMaXN0aW5nJywge1xuICAgICAgICBhZnRlcjogbnVsbCxcbiAgICAgICAgYmVmb3JlOiBudWxsLFxuICAgICAgICBjaGlsZHJlbjogcmVzLmNvbnZlcnNhdGlvbl9pZHMubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczkuX25ld09iamVjdCgnTW9kbWFpbENvbnZlcnNhdGlvbicsIHtcbiAgICAgICAgICAgIGlkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyB0aGUgdXNlcidzIHNlbnQgbWVzc2FnZXMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gb3B0aW9ucyBmb3IgdGhlIHJlc3VsdGluZyBMaXN0aW5nXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIExpc3Rpbmcgb2YgdGhlIHVzZXIncyBzZW50IG1lc3NhZ2VzXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0U2VudE1lc3NhZ2VzKCkudGhlbihjb25zb2xlLmxvZylcbiAgICogLy8gPT4gTGlzdGluZyBbXG4gICAqIC8vICBQcml2YXRlTWVzc2FnZSB7IGJvZHk6ICd5b3UgaGF2ZSBiZWVuIGFkZGVkIGFzIGFuIGFwcHJvdmVkIHN1Ym1pdHRlciB0byAuLi4nLCAuLi4gfSxcbiAgICogLy8gIFByaXZhdGVNZXNzYWdlIHsgYm9keTogJ3lvdSBoYXZlIGJlZW4gYmFubmVkIGZyb20gcG9zdGluZyB0byAuLi4nIC4uLiB9XG4gICAqIC8vIF1cbiAgICovXG5cblxuICBnZXRTZW50TWVzc2FnZXMoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHJldHVybiB0aGlzLl9nZXRMaXN0aW5nKHtcbiAgICAgIHVyaTogJ21lc3NhZ2Uvc2VudCcsXG4gICAgICBxczogb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBNYXJrcyBhbGwgb2YgdGhlIGdpdmVuIG1lc3NhZ2VzIGFzIHJlYWQuXG4gICAqIEBwYXJhbSB7UHJpdmF0ZU1lc3NhZ2VbXXxTdHJpbmdbXX0gbWVzc2FnZXMgQW4gQXJyYXkgb2YgUHJpdmF0ZU1lc3NhZ2Ugb3IgQ29tbWVudCBvYmplY3RzLiBDYW4gYWxzbyBjb250YWluIHN0cmluZ3NcbiAgIHJlcHJlc2VudGluZyBtZXNzYWdlIG9yIGNvbW1lbnQgSURzLiBJZiBzdHJpbmdzIGFyZSBwcm92aWRlZCwgdGhleSBhcmUgYXNzdW1lZCB0byByZXByZXNlbnQgUHJpdmF0ZU1lc3NhZ2VzIHVubGVzcyBhIGZ1bGxuYW1lXG4gICBwcmVmaXggc3VjaCBhcyBgdDFfYCBpcyBzcGVjaWZpZWQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCBmdWxmaWxscyB3aGVuIHRoZSByZXF1ZXN0IGlzIGNvbXBsZXRlXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIubWFya01lc3NhZ2VzQXNSZWFkKFsnNTFzaHNkJywgJzUxc2h4diddKVxuICAgKlxuICAgKiAvLyBUbyByZWZlcmVuY2UgYSBjb21tZW50IGJ5IElELCBiZSBzdXJlIHRvIHVzZSB0aGUgYHQxX2AgcHJlZml4LCBvdGhlcndpc2Ugc25vb3dyYXAgd2lsbCBiZSB1bmFibGUgdG8gZGlzdGluZ3Vpc2ggdGhlXG4gICAqIC8vIGNvbW1lbnQgSUQgZnJvbSBhIFByaXZhdGVNZXNzYWdlIElELlxuICAgKiByLm1hcmtNZXNzYWdlc0FzUmVhZChbJ3Q1XzUxc2hzZCcsICd0MV9kM3poYjVrJ10pXG4gICAqXG4gICAqIC8vIEFsdGVybmF0aXZlbHksIGp1c3QgcGFzcyBpbiBhIGNvbW1lbnQgb2JqZWN0IGRpcmVjdGx5LlxuICAgKiByLm1hcmtNZXNzYWdlc0FzUmVhZChbci5nZXRNZXNzYWdlKCc1MXNoc2QnKSwgci5nZXRDb21tZW50KCdkM3poYjVrJyldKVxuICAgKi9cblxuXG4gIG1hcmtNZXNzYWdlc0FzUmVhZChtZXNzYWdlcykge1xuICAgIHZhciBtZXNzYWdlSWRzID0gbWVzc2FnZXMubWFwKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICByZXR1cm4gKDAsIF9oZWxwZXJzLmFkZEZ1bGxuYW1lUHJlZml4KShtZXNzYWdlLCAndDRfJyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX3Bvc3Qoe1xuICAgICAgdXJpOiAnYXBpL3JlYWRfbWVzc2FnZScsXG4gICAgICBmb3JtOiB7XG4gICAgICAgIGlkOiBtZXNzYWdlSWRzLmpvaW4oJywnKVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBNYXJrcyBhbGwgb2YgdGhlIGdpdmVuIG1lc3NhZ2VzIGFzIHVucmVhZC5cbiAgICogQHBhcmFtIHtQcml2YXRlTWVzc2FnZVtdfFN0cmluZ1tdfSBtZXNzYWdlcyBBbiBBcnJheSBvZiBQcml2YXRlTWVzc2FnZSBvciBDb21tZW50IG9iamVjdHMuIENhbiBhbHNvIGNvbnRhaW4gc3RyaW5nc1xuICAgcmVwcmVzZW50aW5nIG1lc3NhZ2UgSURzLiBJZiBzdHJpbmdzIGFyZSBwcm92aWRlZCwgdGhleSBhcmUgYXNzdW1lZCB0byByZXByZXNlbnQgUHJpdmF0ZU1lc3NhZ2VzIHVubGVzcyBhIGZ1bGxuYW1lIHByZWZpeCBzdWNoXG4gICBhcyBgdDFfYCBpcyBpbmNsdWRlZC5cbiAgICogQHJldHVybnMge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdoZW4gdGhlIHJlcXVlc3QgaXMgY29tcGxldGVcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5tYXJrTWVzc2FnZXNBc1VucmVhZChbJzUxc2hzZCcsICc1MXNoeHYnXSlcbiAgICpcbiAgICogLy8gVG8gcmVmZXJlbmNlIGEgY29tbWVudCBieSBJRCwgYmUgc3VyZSB0byB1c2UgdGhlIGB0MV9gIHByZWZpeCwgb3RoZXJ3aXNlIHNub293cmFwIHdpbGwgYmUgdW5hYmxlIHRvIGRpc3Rpbmd1aXNoIHRoZVxuICAgKiAvLyBjb21tZW50IElEIGZyb20gYSBQcml2YXRlTWVzc2FnZSBJRC5cbiAgICogci5tYXJrTWVzc2FnZXNBc1VucmVhZChbJ3Q1XzUxc2hzZCcsICd0MV9kM3poYjVrJ10pXG4gICAqXG4gICAqIC8vIEFsdGVybmF0aXZlbHksIGp1c3QgcGFzcyBpbiBhIGNvbW1lbnQgb2JqZWN0IGRpcmVjdGx5LlxuICAgKiByLm1hcmtNZXNzYWdlc0FzUmVhZChbci5nZXRNZXNzYWdlKCc1MXNoc2QnKSwgci5nZXRDb21tZW50KCdkM3poYjVrJyldKVxuICAgKi9cblxuXG4gIG1hcmtNZXNzYWdlc0FzVW5yZWFkKG1lc3NhZ2VzKSB7XG4gICAgdmFyIG1lc3NhZ2VJZHMgPSBtZXNzYWdlcy5tYXAoZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiAoMCwgX2hlbHBlcnMuYWRkRnVsbG5hbWVQcmVmaXgpKG1lc3NhZ2UsICd0NF8nKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5fcG9zdCh7XG4gICAgICB1cmk6ICdhcGkvdW5yZWFkX21lc3NhZ2UnLFxuICAgICAgZm9ybToge1xuICAgICAgICBpZDogbWVzc2FnZUlkcy5qb2luKCcsJylcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgTWFya3MgYWxsIG9mIHRoZSB1c2VyJ3MgbWVzc2FnZXMgYXMgcmVhZC5cbiAgICogQGRlc2MgKipOb3RlOioqIFRoZSByZWRkaXQuY29tIHNpdGUgaW1wb3NlcyBhIHJhdGVsaW1pdCBvZiBhcHByb3hpbWF0ZWx5IDEgcmVxdWVzdCBldmVyeSAxMCBtaW51dGVzIG9uIHRoaXMgZW5kcG9pbnQuXG4gICBGdXJ0aGVyIHJlcXVlc3RzIHdpbGwgY2F1c2UgdGhlIEFQSSB0byByZXR1cm4gYSA0MjkgZXJyb3IuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSByZXF1ZXN0IGlzIGNvbXBsZXRlXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIucmVhZEFsbE1lc3NhZ2VzKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAqICAgci5nZXRVbnJlYWRNZXNzYWdlcygpLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIH0pXG4gICAqIC8vID0+IExpc3RpbmcgW11cbiAgICogLy8gKG1lc3NhZ2VzIG1hcmtlZCBhcyAncmVhZCcgb24gcmVkZGl0KVxuICAgKi9cblxuXG4gIHJlYWRBbGxNZXNzYWdlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zdCh7XG4gICAgICB1cmk6ICdhcGkvcmVhZF9hbGxfbWVzc2FnZXMnXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IENvbXBvc2VzIGEgbmV3IHByaXZhdGUgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtSZWRkaXRVc2VyfFN1YnJlZGRpdHxzdHJpbmd9IG9wdGlvbnMudG8gVGhlIHJlY2lwaWVudCBvZiB0aGUgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuc3ViamVjdCBUaGUgbWVzc2FnZSBzdWJqZWN0ICgxMDAgY2hhcmFjdGVycyBtYXgpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnRleHQgVGhlIGJvZHkgb2YgdGhlIG1lc3NhZ2UsIGluIHJhdyBtYXJrZG93biB0ZXh0XG4gICAqIEBwYXJhbSB7U3VicmVkZGl0fHN0cmluZ30gW29wdGlvbnMuZnJvbVN1YnJlZGRpdF0gSWYgcHJvdmlkZWQsIHRoZSBtZXNzYWdlIGlzIHNlbnQgYXMgYSBtb2RtYWlsIGZyb20gdGhlIHNwZWNpZmllZFxuICAgc3VicmVkZGl0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY2FwdGNoYUlkZW5dIEEgY2FwdGNoYSBpZGVudGlmaWVyLiBUaGlzIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIHRoZSBhdXRoZW50aWNhdGVkIGFjY291bnRcbiAgIHJlcXVpcmVzIGEgY2FwdGNoYSB0byBzdWJtaXQgcG9zdHMgYW5kIGNvbW1lbnRzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY2FwdGNoYVJlc3BvbnNlXSBUaGUgcmVzcG9uc2UgdG8gdGhlIGNhcHRjaGEgd2l0aCB0aGUgZ2l2ZW4gaWRlbnRpZmllclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgZnVsZmlsbHMgd2hlbiB0aGUgcmVxdWVzdCBpcyBjb21wbGV0ZVxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmNvbXBvc2VNZXNzYWdlKHtcbiAgICogICB0bzogJ2FjdHVhbGx5X2FuX2FhcmR2YXJrJyxcbiAgICogICBzdWJqZWN0OiBcIkhpLCBob3cncyBpdCBnb2luZz9cIixcbiAgICogICB0ZXh0OiAnTG9uZyB0aW1lIG5vIHNlZSdcbiAgICogfSlcbiAgICogLy8gKG1lc3NhZ2UgY3JlYXRlZCBvbiByZWRkaXQpXG4gICAqL1xuXG5cbiAgY29tcG9zZU1lc3NhZ2UoX3JlZjgpIHtcbiAgICB2YXIgY2FwdGNoYSA9IF9yZWY4LmNhcHRjaGEsXG4gICAgICAgIGZyb21fc3VicmVkZGl0ID0gX3JlZjguZnJvbV9zdWJyZWRkaXQsXG4gICAgICAgIF9yZWY4JGZyb21TdWJyZWRkaXQgPSBfcmVmOC5mcm9tU3VicmVkZGl0LFxuICAgICAgICBmcm9tU3VicmVkZGl0ID0gX3JlZjgkZnJvbVN1YnJlZGRpdCA9PT0gdm9pZCAwID8gZnJvbV9zdWJyZWRkaXQgOiBfcmVmOCRmcm9tU3VicmVkZGl0LFxuICAgICAgICBjYXB0Y2hhX2lkZW4gPSBfcmVmOC5jYXB0Y2hhX2lkZW4sXG4gICAgICAgIF9yZWY4JGNhcHRjaGFJZGVuID0gX3JlZjguY2FwdGNoYUlkZW4sXG4gICAgICAgIGNhcHRjaGFJZGVuID0gX3JlZjgkY2FwdGNoYUlkZW4gPT09IHZvaWQgMCA/IGNhcHRjaGFfaWRlbiA6IF9yZWY4JGNhcHRjaGFJZGVuLFxuICAgICAgICBzdWJqZWN0ID0gX3JlZjguc3ViamVjdCxcbiAgICAgICAgdGV4dCA9IF9yZWY4LnRleHQsXG4gICAgICAgIHRvID0gX3JlZjgudG87XG4gICAgdmFyIHBhcnNlZFRvID0gdG87XG4gICAgdmFyIHBhcnNlZEZyb21TciA9IGZyb21TdWJyZWRkaXQ7XG5cbiAgICBpZiAodG8gaW5zdGFuY2VvZiBzbm9vd3JhcC5vYmplY3RzLlJlZGRpdFVzZXIpIHtcbiAgICAgIHBhcnNlZFRvID0gdG8ubmFtZTtcbiAgICB9IGVsc2UgaWYgKHRvIGluc3RhbmNlb2Ygc25vb3dyYXAub2JqZWN0cy5TdWJyZWRkaXQpIHtcbiAgICAgIHBhcnNlZFRvID0gXCIvci9cIi5jb25jYXQodG8uZGlzcGxheV9uYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoZnJvbVN1YnJlZGRpdCBpbnN0YW5jZW9mIHNub293cmFwLm9iamVjdHMuU3VicmVkZGl0KSB7XG4gICAgICBwYXJzZWRGcm9tU3IgPSBmcm9tU3VicmVkZGl0LmRpc3BsYXlfbmFtZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBmcm9tU3VicmVkZGl0ID09PSAnc3RyaW5nJykge1xuICAgICAgcGFyc2VkRnJvbVNyID0gZnJvbVN1YnJlZGRpdC5yZXBsYWNlKC9eXFwvP3JcXC8vLCAnJyk7IC8vIENvbnZlcnQgJy9yL3N1YnJlZGRpdF9uYW1lJyB0byAnc3VicmVkZGl0X25hbWUnXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3Bvc3Qoe1xuICAgICAgdXJpOiAnYXBpL2NvbXBvc2UnLFxuICAgICAgZm9ybToge1xuICAgICAgICBhcGlfdHlwZSxcbiAgICAgICAgY2FwdGNoYSxcbiAgICAgICAgaWRlbjogY2FwdGNoYUlkZW4sXG4gICAgICAgIGZyb21fc3I6IHBhcnNlZEZyb21TcixcbiAgICAgICAgc3ViamVjdCxcbiAgICAgICAgdGV4dCxcbiAgICAgICAgdG86IHBhcnNlZFRvXG4gICAgICB9XG4gICAgfSkudGFwKCgwLCBfaGVscGVycy5oYW5kbGVKc29uRXJyb3JzKSh0aGlzKSkucmV0dXJuKHt9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyBhIGxpc3Qgb2YgYWxsIG9hdXRoIHNjb3BlcyBzdXBwb3J0ZWQgYnkgdGhlIHJlZGRpdCBBUEkuXG4gICAqIEBkZXNjICoqTm90ZSoqOiBUaGlzIGxpc3RzIGV2ZXJ5IHNpbmdsZSBvYXV0aCBzY29wZS4gVG8gZ2V0IHRoZSBzY29wZSBvZiB0aGlzIHJlcXVlc3RlciwgdXNlIHRoZSBgc2NvcGVgIHByb3BlcnR5IGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBbiBvYmplY3QgY29udGFpbmluZyBvYXV0aCBzY29wZXMuXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0T2F1dGhTY29wZUxpc3QoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiB7XG4gICAqIC8vICBjcmVkZGl0czoge1xuICAgKiAvLyAgICBkZXNjcmlwdGlvbjogJ1NwZW5kIG15IHJlZGRpdCBnb2xkIGNyZWRkaXRzIG9uIGdpdmluZyBnb2xkIHRvIG90aGVyIHVzZXJzLicsXG4gICAqIC8vICAgIGlkOiAnY3JlZGRpdHMnLFxuICAgKiAvLyAgICBuYW1lOiAnU3BlbmQgcmVkZGl0IGdvbGQgY3JlZGRpdHMnXG4gICAqIC8vICB9LFxuICAgKiAvLyAgbW9kY29udHJpYnV0b3JzOiB7XG4gICAqIC8vICAgIGRlc2NyaXB0aW9uOiAnQWRkL3JlbW92ZSB1c2VycyB0byBhcHByb3ZlZCBzdWJtaXR0ZXIgbGlzdHMgYW5kIGJhbi91bmJhbiBvciBtdXRlL3VubXV0ZSB1c2VycyBmcm9tIC4uLicsXG4gICAqIC8vICAgIGlkOiAnbW9kY29udHJpYnV0b3JzJyxcbiAgICogLy8gICAgbmFtZTogJ0FwcHJvdmUgc3VibWl0dGVycyBhbmQgYmFuIHVzZXJzJ1xuICAgKiAvLyAgfSxcbiAgICogLy8gIC4uLlxuICAgKiAvLyB9XG4gICAqL1xuXG5cbiAgZ2V0T2F1dGhTY29wZUxpc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldCh7XG4gICAgICB1cmk6ICdhcGkvdjEvc2NvcGVzJ1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBDb25kdWN0cyBhIHNlYXJjaCBvZiByZWRkaXQgc3VibWlzc2lvbnMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFNlYXJjaCBvcHRpb25zLiBDYW4gYWxzbyBjb250YWluIG9wdGlvbnMgZm9yIHRoZSByZXN1bHRpbmcgTGlzdGluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMucXVlcnkgVGhlIHNlYXJjaCBxdWVyeVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudGltZV0gRGVzY3JpYmVzIHRoZSB0aW1lc3BhbiB0aGF0IHBvc3RzIHNob3VsZCBiZSByZXRyaWV2ZWQgZnJvbS4gT25lIG9mXG4gICBgaG91ciwgZGF5LCB3ZWVrLCBtb250aCwgeWVhciwgYWxsYFxuICAgKiBAcGFyYW0ge1N1YnJlZGRpdHxzdHJpbmd9IFtvcHRpb25zLnN1YnJlZGRpdF0gVGhlIHN1YnJlZGRpdCB0byBjb25kdWN0IHRoZSBzZWFyY2ggb24uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVzdHJpY3RTcj10cnVlXSBSZXN0cmljdHMgc2VhcmNoIHJlc3VsdHMgdG8gdGhlIGdpdmVuIHN1YnJlZGRpdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc29ydF0gRGV0ZXJtaW5lcyBob3cgdGhlIHJlc3VsdHMgc2hvdWxkIGJlIHNvcnRlZC4gT25lIG9mIGByZWxldmFuY2UsIGhvdCwgdG9wLCBuZXcsIGNvbW1lbnRzYFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc3ludGF4PSdwbGFpbiddIFNwZWNpZmllcyBhIHN5bnRheCBmb3IgdGhlIHNlYXJjaC4gT25lIG9mIGBjbG91ZHNlYXJjaCwgbHVjZW5lLCBwbGFpbmBcbiAgICogQHJldHVybnMge1Byb21pc2V9IEEgTGlzdGluZyBjb250YWluaW5nIHRoZSBzZWFyY2ggcmVzdWx0cy5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5zZWFyY2goe1xuICAgKiAgIHF1ZXJ5OiAnQ3V0ZSBraXR0ZW5zJyxcbiAgICogICBzdWJyZWRkaXQ6ICdhd3cnLFxuICAgKiAgIHNvcnQ6ICd0b3AnXG4gICAqIH0pLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IExpc3RpbmcgW1xuICAgKiAvLyAgU3VibWlzc2lvbiB7IGRvbWFpbjogJ2kuaW1ndXIuY29tJywgYmFubmVkX2J5OiBudWxsLCAuLi4gfSxcbiAgICogLy8gIFN1Ym1pc3Npb24geyBkb21haW46ICdpbWd1ci5jb20nLCBiYW5uZWRfYnk6IG51bGwsIC4uLiB9LFxuICAgKiAvLyAgLi4uXG4gICAqIC8vIF1cbiAgICovXG5cblxuICBzZWFyY2gob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnN1YnJlZGRpdCBpbnN0YW5jZW9mIHNub293cmFwLm9iamVjdHMuU3VicmVkZGl0KSB7XG4gICAgICBvcHRpb25zLnN1YnJlZGRpdCA9IG9wdGlvbnMuc3VicmVkZGl0LmRpc3BsYXlfbmFtZTtcbiAgICB9XG5cbiAgICAoMCwgX2xvZGFzaC5kZWZhdWx0cykob3B0aW9ucywge1xuICAgICAgcmVzdHJpY3RTcjogdHJ1ZSxcbiAgICAgIHN5bnRheDogJ3BsYWluJ1xuICAgIH0pO1xuICAgIHZhciBwYXJzZWRRdWVyeSA9ICgwLCBfbG9kYXNoLm9taXQpKF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMsIHtcbiAgICAgIHQ6IG9wdGlvbnMudGltZSxcbiAgICAgIHE6IG9wdGlvbnMucXVlcnksXG4gICAgICByZXN0cmljdF9zcjogb3B0aW9ucy5yZXN0cmljdFNyXG4gICAgfSksIFsndGltZScsICdxdWVyeSddKTtcbiAgICByZXR1cm4gdGhpcy5fZ2V0TGlzdGluZyh7XG4gICAgICB1cmk6IFwiXCIuY29uY2F0KG9wdGlvbnMuc3VicmVkZGl0ID8gXCJyL1wiLmNvbmNhdChvcHRpb25zLnN1YnJlZGRpdCwgXCIvXCIpIDogJycsIFwic2VhcmNoXCIpLFxuICAgICAgcXM6IHBhcnNlZFF1ZXJ5XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IFNlYXJjaGVzIGZvciBzdWJyZWRkaXRzIGdpdmVuIGEgcXVlcnkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnF1ZXJ5IEEgc2VhcmNoIHF1ZXJ5ICg1MCBjaGFyYWN0ZXJzIG1heClcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5leGFjdD1mYWxzZV0gRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSByZXN1bHRzIHNob3VsZGJlIGxpbWl0ZWQgdG8gZXhhY3QgbWF0Y2hlcy5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pbmNsdWRlTnNmdz10cnVlXSBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHJlc3VsdHMgc2hvdWxkIGluY2x1ZGUgTlNGVyBzdWJyZWRkaXRzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQW4gQXJyYXkgY29udGFpbmluZyBzdWJyZWRkaXQgbmFtZXNcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5zZWFyY2hTdWJyZWRkaXROYW1lcyh7cXVlcnk6ICdwcm9ncmFtbWluZyd9KS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBbXG4gICAqIC8vICAncHJvZ3JhbW1pbmcnLFxuICAgKiAvLyAgJ3Byb2dyYW1taW5nY2lyY2xlamVyaycsXG4gICAqIC8vICAncHJvZ3JhbW1pbmdob3Jyb3InLFxuICAgKiAvLyAgLi4uXG4gICAqIC8vIF1cbiAgICovXG5cblxuICBzZWFyY2hTdWJyZWRkaXROYW1lcyhfcmVmOSkge1xuICAgIHZhciBfcmVmOSRleGFjdCA9IF9yZWY5LmV4YWN0LFxuICAgICAgICBleGFjdCA9IF9yZWY5JGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY5JGV4YWN0LFxuICAgICAgICBfcmVmOSRpbmNsdWRlX25zZncgPSBfcmVmOS5pbmNsdWRlX25zZncsXG4gICAgICAgIGluY2x1ZGVfbnNmdyA9IF9yZWY5JGluY2x1ZGVfbnNmdyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWY5JGluY2x1ZGVfbnNmdyxcbiAgICAgICAgX3JlZjkkaW5jbHVkZU5zZncgPSBfcmVmOS5pbmNsdWRlTnNmdyxcbiAgICAgICAgaW5jbHVkZU5zZncgPSBfcmVmOSRpbmNsdWRlTnNmdyA9PT0gdm9pZCAwID8gaW5jbHVkZV9uc2Z3IDogX3JlZjkkaW5jbHVkZU5zZncsXG4gICAgICAgIHF1ZXJ5ID0gX3JlZjkucXVlcnk7XG4gICAgcmV0dXJuIHRoaXMuX3Bvc3Qoe1xuICAgICAgdXJpOiAnYXBpL3NlYXJjaF9yZWRkaXRfbmFtZXMnLFxuICAgICAgcXM6IHtcbiAgICAgICAgZXhhY3QsXG4gICAgICAgIGluY2x1ZGVfb3Zlcl8xODogaW5jbHVkZU5zZncsXG4gICAgICAgIHF1ZXJ5XG4gICAgICB9XG4gICAgfSkuZ2V0KCduYW1lcycpO1xuICB9XG5cbiAgX2NyZWF0ZU9yRWRpdFN1YnJlZGRpdChfcmVmMTApIHtcbiAgICB2YXIgX3JlZjEwJGFsbG93X2ltYWdlcyA9IF9yZWYxMC5hbGxvd19pbWFnZXMsXG4gICAgICAgIGFsbG93X2ltYWdlcyA9IF9yZWYxMCRhbGxvd19pbWFnZXMgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMTAkYWxsb3dfaW1hZ2VzLFxuICAgICAgICBfcmVmMTAkYWxsb3dfdG9wID0gX3JlZjEwLmFsbG93X3RvcCxcbiAgICAgICAgYWxsb3dfdG9wID0gX3JlZjEwJGFsbG93X3RvcCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYxMCRhbGxvd190b3AsXG4gICAgICAgIGNhcHRjaGEgPSBfcmVmMTAuY2FwdGNoYSxcbiAgICAgICAgY2FwdGNoYV9pZGVuID0gX3JlZjEwLmNhcHRjaGFfaWRlbixcbiAgICAgICAgX3JlZjEwJGNvbGxhcHNlX2RlbGV0ID0gX3JlZjEwLmNvbGxhcHNlX2RlbGV0ZWRfY29tbWVudHMsXG4gICAgICAgIGNvbGxhcHNlX2RlbGV0ZWRfY29tbWVudHMgPSBfcmVmMTAkY29sbGFwc2VfZGVsZXQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjEwJGNvbGxhcHNlX2RlbGV0LFxuICAgICAgICBfcmVmMTAkY29tbWVudF9zY29yZV8gPSBfcmVmMTAuY29tbWVudF9zY29yZV9oaWRlX21pbnMsXG4gICAgICAgIGNvbW1lbnRfc2NvcmVfaGlkZV9taW5zID0gX3JlZjEwJGNvbW1lbnRfc2NvcmVfID09PSB2b2lkIDAgPyAwIDogX3JlZjEwJGNvbW1lbnRfc2NvcmVfLFxuICAgICAgICBkZXNjcmlwdGlvbiA9IF9yZWYxMC5kZXNjcmlwdGlvbixcbiAgICAgICAgX3JlZjEwJGV4Y2x1ZGVfYmFubmVkID0gX3JlZjEwLmV4Y2x1ZGVfYmFubmVkX21vZHF1ZXVlLFxuICAgICAgICBleGNsdWRlX2Jhbm5lZF9tb2RxdWV1ZSA9IF9yZWYxMCRleGNsdWRlX2Jhbm5lZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTAkZXhjbHVkZV9iYW5uZWQsXG4gICAgICAgIGhlYWRlcl90aXRsZSA9IF9yZWYxMFsnaGVhZGVyLXRpdGxlJ10sXG4gICAgICAgIF9yZWYxMCRoaWRlX2FkcyA9IF9yZWYxMC5oaWRlX2FkcyxcbiAgICAgICAgaGlkZV9hZHMgPSBfcmVmMTAkaGlkZV9hZHMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjEwJGhpZGVfYWRzLFxuICAgICAgICBfcmVmMTAkbGFuZyA9IF9yZWYxMC5sYW5nLFxuICAgICAgICBsYW5nID0gX3JlZjEwJGxhbmcgPT09IHZvaWQgMCA/ICdlbicgOiBfcmVmMTAkbGFuZyxcbiAgICAgICAgX3JlZjEwJGxpbmtfdHlwZSA9IF9yZWYxMC5saW5rX3R5cGUsXG4gICAgICAgIGxpbmtfdHlwZSA9IF9yZWYxMCRsaW5rX3R5cGUgPT09IHZvaWQgMCA/ICdhbnknIDogX3JlZjEwJGxpbmtfdHlwZSxcbiAgICAgICAgbmFtZSA9IF9yZWYxMC5uYW1lLFxuICAgICAgICBfcmVmMTAkb3Zlcl8gPSBfcmVmMTAub3Zlcl8xOCxcbiAgICAgICAgb3Zlcl8xOCA9IF9yZWYxMCRvdmVyXyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTAkb3Zlcl8sXG4gICAgICAgIHB1YmxpY19kZXNjcmlwdGlvbiA9IF9yZWYxMC5wdWJsaWNfZGVzY3JpcHRpb24sXG4gICAgICAgIF9yZWYxMCRwdWJsaWNfdHJhZmZpYyA9IF9yZWYxMC5wdWJsaWNfdHJhZmZpYyxcbiAgICAgICAgcHVibGljX3RyYWZmaWMgPSBfcmVmMTAkcHVibGljX3RyYWZmaWMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjEwJHB1YmxpY190cmFmZmljLFxuICAgICAgICBfcmVmMTAkc2hvd19tZWRpYSA9IF9yZWYxMC5zaG93X21lZGlhLFxuICAgICAgICBzaG93X21lZGlhID0gX3JlZjEwJHNob3dfbWVkaWEgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjEwJHNob3dfbWVkaWEsXG4gICAgICAgIF9yZWYxMCRzaG93X21lZGlhX3ByZSA9IF9yZWYxMC5zaG93X21lZGlhX3ByZXZpZXcsXG4gICAgICAgIHNob3dfbWVkaWFfcHJldmlldyA9IF9yZWYxMCRzaG93X21lZGlhX3ByZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYxMCRzaG93X21lZGlhX3ByZSxcbiAgICAgICAgX3JlZjEwJHNwYW1fY29tbWVudHMgPSBfcmVmMTAuc3BhbV9jb21tZW50cyxcbiAgICAgICAgc3BhbV9jb21tZW50cyA9IF9yZWYxMCRzcGFtX2NvbW1lbnRzID09PSB2b2lkIDAgPyAnaGlnaCcgOiBfcmVmMTAkc3BhbV9jb21tZW50cyxcbiAgICAgICAgX3JlZjEwJHNwYW1fbGlua3MgPSBfcmVmMTAuc3BhbV9saW5rcyxcbiAgICAgICAgc3BhbV9saW5rcyA9IF9yZWYxMCRzcGFtX2xpbmtzID09PSB2b2lkIDAgPyAnaGlnaCcgOiBfcmVmMTAkc3BhbV9saW5rcyxcbiAgICAgICAgX3JlZjEwJHNwYW1fc2VsZnBvc3RzID0gX3JlZjEwLnNwYW1fc2VsZnBvc3RzLFxuICAgICAgICBzcGFtX3NlbGZwb3N0cyA9IF9yZWYxMCRzcGFtX3NlbGZwb3N0cyA9PT0gdm9pZCAwID8gJ2hpZ2gnIDogX3JlZjEwJHNwYW1fc2VsZnBvc3RzLFxuICAgICAgICBfcmVmMTAkc3BvaWxlcnNfZW5hYmwgPSBfcmVmMTAuc3BvaWxlcnNfZW5hYmxlZCxcbiAgICAgICAgc3BvaWxlcnNfZW5hYmxlZCA9IF9yZWYxMCRzcG9pbGVyc19lbmFibCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTAkc3BvaWxlcnNfZW5hYmwsXG4gICAgICAgIHNyID0gX3JlZjEwLnNyLFxuICAgICAgICBfcmVmMTAkc3VibWl0X2xpbmtfbGEgPSBfcmVmMTAuc3VibWl0X2xpbmtfbGFiZWwsXG4gICAgICAgIHN1Ym1pdF9saW5rX2xhYmVsID0gX3JlZjEwJHN1Ym1pdF9saW5rX2xhID09PSB2b2lkIDAgPyAnJyA6IF9yZWYxMCRzdWJtaXRfbGlua19sYSxcbiAgICAgICAgX3JlZjEwJHN1Ym1pdF90ZXh0X2xhID0gX3JlZjEwLnN1Ym1pdF90ZXh0X2xhYmVsLFxuICAgICAgICBzdWJtaXRfdGV4dF9sYWJlbCA9IF9yZWYxMCRzdWJtaXRfdGV4dF9sYSA9PT0gdm9pZCAwID8gJycgOiBfcmVmMTAkc3VibWl0X3RleHRfbGEsXG4gICAgICAgIF9yZWYxMCRzdWJtaXRfdGV4dCA9IF9yZWYxMC5zdWJtaXRfdGV4dCxcbiAgICAgICAgc3VibWl0X3RleHQgPSBfcmVmMTAkc3VibWl0X3RleHQgPT09IHZvaWQgMCA/ICcnIDogX3JlZjEwJHN1Ym1pdF90ZXh0LFxuICAgICAgICBfcmVmMTAkc3VnZ2VzdGVkX2NvbW0gPSBfcmVmMTAuc3VnZ2VzdGVkX2NvbW1lbnRfc29ydCxcbiAgICAgICAgc3VnZ2VzdGVkX2NvbW1lbnRfc29ydCA9IF9yZWYxMCRzdWdnZXN0ZWRfY29tbSA9PT0gdm9pZCAwID8gJ2NvbmZpZGVuY2UnIDogX3JlZjEwJHN1Z2dlc3RlZF9jb21tLFxuICAgICAgICB0aXRsZSA9IF9yZWYxMC50aXRsZSxcbiAgICAgICAgX3JlZjEwJHR5cGUgPSBfcmVmMTAudHlwZSxcbiAgICAgICAgdHlwZSA9IF9yZWYxMCR0eXBlID09PSB2b2lkIDAgPyAncHVibGljJyA6IF9yZWYxMCR0eXBlLFxuICAgICAgICB3aWtpX2VkaXRfYWdlID0gX3JlZjEwLndpa2lfZWRpdF9hZ2UsXG4gICAgICAgIHdpa2lfZWRpdF9rYXJtYSA9IF9yZWYxMC53aWtpX2VkaXRfa2FybWEsXG4gICAgICAgIF9yZWYxMCR3aWtpbW9kZSA9IF9yZWYxMC53aWtpbW9kZSxcbiAgICAgICAgd2lraW1vZGUgPSBfcmVmMTAkd2lraW1vZGUgPT09IHZvaWQgMCA/ICdtb2Rvbmx5JyA6IF9yZWYxMCR3aWtpbW9kZSxcbiAgICAgICAgb3RoZXJLZXlzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYxMCwgW1wiYWxsb3dfaW1hZ2VzXCIsIFwiYWxsb3dfdG9wXCIsIFwiY2FwdGNoYVwiLCBcImNhcHRjaGFfaWRlblwiLCBcImNvbGxhcHNlX2RlbGV0ZWRfY29tbWVudHNcIiwgXCJjb21tZW50X3Njb3JlX2hpZGVfbWluc1wiLCBcImRlc2NyaXB0aW9uXCIsIFwiZXhjbHVkZV9iYW5uZWRfbW9kcXVldWVcIiwgXCJoZWFkZXItdGl0bGVcIiwgXCJoaWRlX2Fkc1wiLCBcImxhbmdcIiwgXCJsaW5rX3R5cGVcIiwgXCJuYW1lXCIsIFwib3Zlcl8xOFwiLCBcInB1YmxpY19kZXNjcmlwdGlvblwiLCBcInB1YmxpY190cmFmZmljXCIsIFwic2hvd19tZWRpYVwiLCBcInNob3dfbWVkaWFfcHJldmlld1wiLCBcInNwYW1fY29tbWVudHNcIiwgXCJzcGFtX2xpbmtzXCIsIFwic3BhbV9zZWxmcG9zdHNcIiwgXCJzcG9pbGVyc19lbmFibGVkXCIsIFwic3JcIiwgXCJzdWJtaXRfbGlua19sYWJlbFwiLCBcInN1Ym1pdF90ZXh0X2xhYmVsXCIsIFwic3VibWl0X3RleHRcIiwgXCJzdWdnZXN0ZWRfY29tbWVudF9zb3J0XCIsIFwidGl0bGVcIiwgXCJ0eXBlXCIsIFwid2lraV9lZGl0X2FnZVwiLCBcIndpa2lfZWRpdF9rYXJtYVwiLCBcIndpa2ltb2RlXCJdKTtcblxuICAgIHJldHVybiB0aGlzLl9wb3N0KHtcbiAgICAgIHVyaTogJ2FwaS9zaXRlX2FkbWluJyxcbiAgICAgIGZvcm06IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBhbGxvd19pbWFnZXMsXG4gICAgICAgIGFsbG93X3RvcCxcbiAgICAgICAgYXBpX3R5cGUsXG4gICAgICAgIGNhcHRjaGEsXG4gICAgICAgIGNvbGxhcHNlX2RlbGV0ZWRfY29tbWVudHMsXG4gICAgICAgIGNvbW1lbnRfc2NvcmVfaGlkZV9taW5zLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgZXhjbHVkZV9iYW5uZWRfbW9kcXVldWUsXG4gICAgICAgICdoZWFkZXItdGl0bGUnOiBoZWFkZXJfdGl0bGUsXG4gICAgICAgIGhpZGVfYWRzLFxuICAgICAgICBpZGVuOiBjYXB0Y2hhX2lkZW4sXG4gICAgICAgIGxhbmcsXG4gICAgICAgIGxpbmtfdHlwZSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgb3Zlcl8xOCxcbiAgICAgICAgcHVibGljX2Rlc2NyaXB0aW9uLFxuICAgICAgICBwdWJsaWNfdHJhZmZpYyxcbiAgICAgICAgc2hvd19tZWRpYSxcbiAgICAgICAgc2hvd19tZWRpYV9wcmV2aWV3LFxuICAgICAgICBzcGFtX2NvbW1lbnRzLFxuICAgICAgICBzcGFtX2xpbmtzLFxuICAgICAgICBzcGFtX3NlbGZwb3N0cyxcbiAgICAgICAgc3BvaWxlcnNfZW5hYmxlZCxcbiAgICAgICAgc3IsXG4gICAgICAgIHN1Ym1pdF9saW5rX2xhYmVsLFxuICAgICAgICBzdWJtaXRfdGV4dCxcbiAgICAgICAgc3VibWl0X3RleHRfbGFiZWwsXG4gICAgICAgIHN1Z2dlc3RlZF9jb21tZW50X3NvcnQsXG4gICAgICAgIHRpdGxlLFxuICAgICAgICB0eXBlLFxuICAgICAgICB3aWtpX2VkaXRfYWdlLFxuICAgICAgICB3aWtpX2VkaXRfa2FybWEsXG4gICAgICAgIHdpa2ltb2RlXG4gICAgICB9LCBvdGhlcktleXMpXG4gICAgfSkudGhlbigoMCwgX2hlbHBlcnMuaGFuZGxlSnNvbkVycm9ycykodGhpcy5nZXRTdWJyZWRkaXQobmFtZSB8fCBzcikpKTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIG5ldyBzdWJyZWRkaXQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm5hbWUgVGhlIG5hbWUgb2YgdGhlIG5ldyBzdWJyZWRkaXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudGl0bGUgVGhlIHRleHQgdGhhdCBzaG91bGQgYXBwZWFyIGluIHRoZSBoZWFkZXIgb2YgdGhlIHN1YnJlZGRpdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5wdWJsaWNfZGVzY3JpcHRpb24gVGhlIHRleHQgdGhhdCBhcHBlYXJzIHdpdGggdGhpcyBzdWJyZWRkaXQgb24gdGhlIHNlYXJjaCBwYWdlLCBvciBvbiB0aGVcbiAgIGJsb2NrZWQtYWNjZXNzIHBhZ2UgaWYgdGhpcyBzdWJyZWRkaXQgaXMgcHJpdmF0ZS4gKDUwMCBjaGFyYWN0ZXJzIG1heClcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuZGVzY3JpcHRpb24gVGhlIHNpZGViYXIgdGV4dCBmb3IgdGhlIHN1YnJlZGRpdC4gKDUxMjAgY2hhcmFjdGVycyBtYXgpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zdWJtaXRfdGV4dD0nJ10gVGhlIHRleHQgdG8gc2hvdyBiZWxvdyB0aGUgc3VibWlzc2lvbiBwYWdlICgxMDI0IGNoYXJhY3RlcnMgbWF4KVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmhpZGVfYWRzPWZhbHNlXSBEZXRlcm1pbmVzIHdoZXRoZXIgYWRzIHNob3VsZCBiZSBoaWRkZW4gb24gdGhpcyBzdWJyZWRkaXQuIChUaGlzIGlzIG9ubHlcbiAgIGFsbG93ZWQgZm9yIGdvbGQtb25seSBzdWJyZWRkaXRzLilcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxhbmc9J2VuJ10gVGhlIGxhbmd1YWdlIG9mIHRoZSBzdWJyZWRkaXQgKHJlcHJlc2VudGVkIGFzIGFuIElFVEYgbGFuZ3VhZ2UgdGFnKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudHlwZT0ncHVibGljJ10gRGV0ZXJtaW5lcyB3aG8gc2hvdWxkIGJlIGFibGUgdG8gYWNjZXNzIHRoZSBzdWJyZWRkaXQuIFRoaXMgc2hvdWxkIGJlIG9uZSBvZlxuICAgYHB1YmxpYywgcHJpdmF0ZSwgcmVzdHJpY3RlZCwgZ29sZF9yZXN0cmljdGVkLCBnb2xkX29ubHksIGFyY2hpdmVkLCBlbXBsb3llZXNfb25seWAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5saW5rX3R5cGU9J2FueSddIERldGVybWluZXMgd2hhdCB0eXBlcyBvZiBzdWJtaXNzaW9ucyBhcmUgYWxsb3dlZCBvbiB0aGUgc3VicmVkZGl0LiBUaGlzIHNob3VsZFxuICAgYmUgb25lIG9mIGBhbnksIGxpbmssIHNlbGZgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc3VibWl0X2xpbmtfbGFiZWw9dW5kZWZpbmVkXSBDdXN0b20gdGV4dCB0byBkaXNwbGF5IG9uIHRoZSBidXR0b24gdGhhdCBzdWJtaXRzIGEgbGluay4gSWZcbiAgIHRoaXMgaXMgb21pdHRlZCwgdGhlIGRlZmF1bHQgdGV4dCB3aWxsIGJlIGRpc3BsYXllZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnN1Ym1pdF90ZXh0X2xhYmVsPXVuZGVmaW5lZF0gQ3VzdG9tIHRleHQgdG8gZGlzcGxheSBvbiB0aGUgYnV0dG9uIHRoYXQgc3VibWl0cyBhIHNlbGZwb3N0LiBJZlxuICAgdGhpcyBpcyBvbWl0dGVkLCB0aGUgZGVmYXVsdCB0ZXh0IHdpbGwgYmUgZGlzcGxheWVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMud2lraW1vZGU9J21vZG9ubHknXSBEZXRlcm1pbmVzIHdobyBjYW4gZWRpdCB3aWtpIHBhZ2VzIG9uIHRoZSBzdWJyZWRkaXQuIFRoaXMgc2hvdWxkIGJlIG9uZSBvZlxuICAgYG1vZG9ubHksIGFueW9uZSwgZGlzYWJsZWRgLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMud2lraV9lZGl0X2thcm1hPTBdIFRoZSBtaW5pbXVtIGFtb3VudCBvZiBzdWJyZWRkaXQga2FybWEgbmVlZGVkIGZvciBzb21lb25lIHRvIGVkaXQgdGhpc1xuICAgc3VicmVkZGl0J3Mgd2lraS4gKFRoaXMgaXMgb25seSByZWxldmFudCBpZiBgb3B0aW9ucy53aWtpbW9kZWAgaXMgc2V0IHRvIGBhbnlvbmVgLilcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLndpa2lfZWRpdF9hZ2U9MF0gVGhlIG1pbmltdW0gYWNjb3VudCBhZ2UgKGluIGRheXMpIG5lZWRlZCBmb3Igc29tZW9uZSB0byBlZGl0IHRoaXMgc3VicmVkZGl0J3NcbiAgIHdpa2kuIChUaGlzIGlzIG9ubHkgcmVsZXZhbnQgaWYgYG9wdGlvbnMud2lraW1vZGVgIGlzIHNldCB0byBgYW55b25lYC4pXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zcGFtX2xpbmtzPSdoaWdoJ10gVGhlIHNwYW0gZmlsdGVyIHN0cmVuZ3RoIGZvciBsaW5rcyBvbiB0aGlzIHN1YnJlZGRpdC4gVGhpcyBzaG91bGQgYmUgb25lIG9mXG4gICBgbG93LCBoaWdoLCBhbGxgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc3BhbV9zZWxmcG9zdHM9J2hpZ2gnXSBUaGUgc3BhbSBmaWx0ZXIgc3RyZW5ndGggZm9yIHNlbGZwb3N0cyBvbiB0aGlzIHN1YnJlZGRpdC4gVGhpcyBzaG91bGQgYmVcbiAgIG9uZSBvZiBgbG93LCBoaWdoLCBhbGxgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc3BhbV9jb21tZW50cz0naGlnaCddIFRoZSBzcGFtIGZpbHRlciBzdHJlbmd0aCBmb3IgY29tbWVudHMgb24gdGhpcyBzdWJyZWRkaXQuIFRoaXMgc2hvdWxkIGJlIG9uZVxuICAgb2YgYGxvdywgaGlnaCwgYWxsYC5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5vdmVyXzE4PWZhbHNlXSBEZXRlcm1pbmVzIHdoZXRoZXIgdGhpcyBzdWJyZWRkaXQgc2hvdWxkIGJlIGNsYXNzaWZpZWQgYXMgTlNGV1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFsbG93X3RvcD10cnVlXSBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG5ldyBzdWJyZWRkaXQgc2hvdWxkIGJlIGFibGUgdG8gYXBwZWFyIGluIC9yL2FsbCBhbmRcbiAgIHRyZW5kaW5nIHN1YnJlZGRpdHNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zaG93X21lZGlhPWZhbHNlXSBEZXRlcm1pbmVzIHdoZXRoZXIgaW1hZ2UgdGh1bWJuYWlscyBzaG91bGQgYmUgZW5hYmxlZCBvbiB0aGlzIHN1YnJlZGRpdFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNob3dfbWVkaWFfcHJldmlldz10cnVlXSBEZXRlcm1pbmVzIHdoZXRoZXIgbWVkaWEgcHJldmlld3Mgc2hvdWxkIGJlIGV4cGFuZGVkIGJ5IGRlZmF1bHQgb24gdGhpc1xuICAgc3VicmVkZGl0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYWxsb3dfaW1hZ2VzPXRydWVdIERldGVybWluZXMgd2hldGhlciBpbWFnZSB1cGxvYWRzIGFuZCBsaW5rcyB0byBpbWFnZSBob3N0aW5nIHNpdGVzIHNob3VsZCBiZVxuICAgZW5hYmxlZCBvbiB0aGlzIHN1YnJlZGRpdFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmV4Y2x1ZGVfYmFubmVkX21vZHF1ZXVlPWZhbHNlXSBEZXRlcm1pbmVzIHdoZXRoZXIgcG9zdHMgYnkgc2l0ZS13aWRlIGJhbm5lZCB1c2VycyBzaG91bGQgYmVcbiAgIGV4Y2x1ZGVkIGZyb20gdGhlIG1vZHF1ZXVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnB1YmxpY190cmFmZmljPWZhbHNlXSBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIC9hYm91dC90cmFmZmljIHBhZ2UgZm9yIHRoaXMgc3VicmVkZGl0IHNob3VsZCBiZVxuICAgdmlld2FibGUgYnkgYW55b25lLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNvbGxhcHNlX2RlbGV0ZWRfY29tbWVudHM9ZmFsc2VdIERldGVybWluZXMgd2hldGhlciBkZWxldGVkIGFuZCByZW1vdmVkIGNvbW1lbnRzIHNob3VsZCBiZVxuICAgY29sbGFwc2VkIGJ5IGRlZmF1bHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnN1Z2dlc3RlZF9jb21tZW50X3NvcnQ9dW5kZWZpbmVkXSBUaGUgc3VnZ2VzdGVkIGNvbW1lbnQgc29ydCBmb3IgdGhlIHN1YnJlZGRpdC4gVGhpcyBzaG91bGQgYmVcbiAgIG9uZSBvZiBgY29uZmlkZW5jZSwgdG9wLCBuZXcsIGNvbnRyb3ZlcnNpYWwsIG9sZCwgcmFuZG9tLCBxYWAuSWYgbGVmdCBibGFuaywgdGhlcmUgd2lsbCBiZSBubyBzdWdnZXN0ZWQgc29ydCxcbiAgIHdoaWNoIG1lYW5zIHRoYXQgdXNlcnMgd2lsbCBzZWUgdGhlIHNvcnQgbWV0aG9kIHRoYXQgaXMgc2V0IGluIHRoZWlyIG93biBwcmVmZXJlbmNlcyAodXN1YWxseSBgY29uZmlkZW5jZWAuKVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNwb2lsZXJzX2VuYWJsZWQ9ZmFsc2VdIERldGVybWluZXMgd2hldGhlciB1c2VycyBjYW4gbWFyayB0aGVpciBwb3N0cyBhcyBzcG9pbGVyc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIGZvciB0aGUgbmV3bHktY3JlYXRlZCBzdWJyZWRkaXQgb2JqZWN0LlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmNyZWF0ZVN1YnJlZGRpdCh7XG4gICAqICAgbmFtZTogJ3Nub293cmFwX3Rlc3RpbmcyJyxcbiAgICogICB0aXRsZTogJ3Nub293cmFwIHRlc3Rpbmc6IHRoZSBzZXF1ZWwnLFxuICAgKiAgIHB1YmxpY19kZXNjcmlwdGlvbjogJ3RoYW5rcyBmb3IgcmVhZGluZyB0aGUgc25vb3dyYXAgZG9jcyEnLFxuICAgKiAgIGRlc2NyaXB0aW9uOiAnVGhpcyB0ZXh0IHdpbGwgZ28gb24gdGhlIHNpZGViYXInLFxuICAgKiAgIHR5cGU6ICdwcml2YXRlJ1xuICAgKiB9KS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBTdWJyZWRkaXQgeyBkaXNwbGF5X25hbWU6ICdzbm9vd3JhcF90ZXN0aW5nMicgfVxuICAgKiAvLyAoL3Ivc25vb3dyYXBfdGVzdGluZzIgY3JlYXRlZCBvbiByZWRkaXQpXG4gICAqL1xuXG5cbiAgY3JlYXRlU3VicmVkZGl0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlT3JFZGl0U3VicmVkZGl0KG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBTZWFyY2hlcyBzdWJyZWRkaXRzIGJ5IHRvcGljLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5xdWVyeSBUaGUgc2VhcmNoIHF1ZXJ5LiAoNTAgY2hhcmFjdGVycyBtYXgpXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBbiBBcnJheSBvZiBzdWJyZWRkaXQgb2JqZWN0cyBjb3JyZXNwb25kaW5nIHRvIHRoZSBzZWFyY2ggcmVzdWx0c1xuICAgKiBAZGVwcmVjYXRlZCBSZWRkaXQgbm8gbG9uZ2VyIHByb3ZpZGVzIHRoZSBjb3JyZXNwb25kaW5nIEFQSSBlbmRwb2ludC5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5zZWFyY2hTdWJyZWRkaXRUb3BpY3Moe3F1ZXJ5OiAnbW92aWVzJ30pLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IFtcbiAgICogLy8gIFN1YnJlZGRpdCB7IGRpc3BsYXlfbmFtZTogJ3RpcG9mbXl0b25ndWUnIH0sXG4gICAqIC8vICBTdWJyZWRkaXQgeyBkaXNwbGF5X25hbWU6ICdyZW1vdmUnIH0sXG4gICAqIC8vICBTdWJyZWRkaXQgeyBkaXNwbGF5X25hbWU6ICdob3Jyb3InIH0sXG4gICAqIC8vICAuLi5cbiAgICogLy8gXVxuICAgKi9cblxuXG4gIHNlYXJjaFN1YnJlZGRpdFRvcGljcyhfcmVmMTEpIHtcbiAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG5cbiAgICB2YXIgcXVlcnkgPSBfcmVmMTEucXVlcnk7XG4gICAgcmV0dXJuIHRoaXMuX2dldCh7XG4gICAgICB1cmk6ICdhcGkvc3VicmVkZGl0c19ieV90b3BpYycsXG4gICAgICBxczoge1xuICAgICAgICBxdWVyeVxuICAgICAgfVxuICAgIH0pLm1hcChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gX3RoaXMxMC5nZXRTdWJyZWRkaXQocmVzdWx0Lm5hbWUpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBHZXRzIGEgbGlzdCBvZiBzdWJyZWRkaXRzIHRoYXQgdGhlIGN1cnJlbnRseS1hdXRoZW50aWNhdGVkIHVzZXIgaXMgc3Vic2NyaWJlZCB0by5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIGZvciB0aGUgcmVzdWx0aW5nIExpc3RpbmdcbiAgICogQHJldHVybnMge1Byb21pc2V9IEEgTGlzdGluZyBjb250YWluaW5nIFN1YnJlZGRpdHNcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXRTdWJzY3JpcHRpb25zKHtsaW1pdDogMn0pLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IExpc3RpbmcgW1xuICAgKiAvLyAgU3VicmVkZGl0IHtcbiAgICogLy8gICAgZGlzcGxheV9uYW1lOiAnZ2FkZ2V0cycsXG4gICAqIC8vICAgIHRpdGxlOiAncmVkZGl0IGdhZGdldCBndWlkZScsXG4gICAqIC8vICAgIC4uLlxuICAgKiAvLyAgfSxcbiAgICogLy8gIFN1YnJlZGRpdCB7XG4gICAqIC8vICAgIGRpc3BsYXlfbmFtZTogJ3Nwb3J0cycsXG4gICAqIC8vICAgIHRpdGxlOiAndGhlIHNwb3J0c3BhZ2Ugb2YgdGhlIEludGVybmV0JyxcbiAgICogLy8gICAgLi4uXG4gICAqIC8vICB9XG4gICAqIC8vIF1cbiAgICovXG5cblxuICBnZXRTdWJzY3JpcHRpb25zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0TGlzdGluZyh7XG4gICAgICB1cmk6ICdzdWJyZWRkaXRzL21pbmUvc3Vic2NyaWJlcicsXG4gICAgICBxczogb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBHZXRzIGEgbGlzdCBvZiBzdWJyZWRkaXRzIGluIHdoaWNoIHRoZSBjdXJyZW50bHktYXV0aGVudGljYXRlZCB1c2VyIGlzIGFuIGFwcHJvdmVkIHN1Ym1pdHRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIGZvciB0aGUgcmVzdWx0aW5nIExpc3RpbmdcbiAgICogQHJldHVybnMge1Byb21pc2V9IEEgTGlzdGluZyBjb250YWluaW5nIFN1YnJlZGRpdHNcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXRDb250cmlidXRvclN1YnJlZGRpdHMoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFtcbiAgICogLy8gIFN1YnJlZGRpdCB7XG4gICAqIC8vICAgIGRpc3BsYXlfbmFtZTogJ3Nub293cmFwX3Rlc3RpbmcnLFxuICAgKiAvLyAgICB0aXRsZTogJ3Nub293cmFwJyxcbiAgICogLy8gICAgLi4uXG4gICAqIC8vICB9XG4gICAqIC8vIF1cbiAgICpcbiAgICovXG5cblxuICBnZXRDb250cmlidXRvclN1YnJlZGRpdHMob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9nZXRMaXN0aW5nKHtcbiAgICAgIHVyaTogJ3N1YnJlZGRpdHMvbWluZS9jb250cmlidXRvcicsXG4gICAgICBxczogb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBHZXRzIGEgbGlzdCBvZiBzdWJyZWRkaXRzIGluIHdoaWNoIHRoZSBjdXJyZW50bHktYXV0aGVudGljYXRlZCB1c2VyIGlzIGEgbW9kZXJhdG9yLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgZm9yIHRoZSByZXN1bHRpbmcgTGlzdGluZ1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBMaXN0aW5nIGNvbnRhaW5pbmcgU3VicmVkZGl0c1xuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmdldE1vZGVyYXRlZFN1YnJlZGRpdHMoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFtcbiAgICogLy8gIFN1YnJlZGRpdCB7XG4gICAqIC8vICAgIGRpc3BsYXlfbmFtZTogJ3Nub293cmFwX3Rlc3RpbmcnLFxuICAgKiAvLyAgICB0aXRsZTogJ3Nub293cmFwJyxcbiAgICogLy8gICAgLi4uXG4gICAqIC8vICB9XG4gICAqIC8vIF1cbiAgICovXG5cblxuICBnZXRNb2RlcmF0ZWRTdWJyZWRkaXRzKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0TGlzdGluZyh7XG4gICAgICB1cmk6ICdzdWJyZWRkaXRzL21pbmUvbW9kZXJhdG9yJyxcbiAgICAgIHFzOiBvcHRpb25zXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IFNlYXJjaGVzIHN1YnJlZGRpdHMgYnkgdGl0bGUgYW5kIGRlc2NyaXB0aW9uLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgc2VhcmNoLiBNYXkgYWxzbyBjb250YWluIExpc3RpbmcgcGFyYW1ldGVycy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMucXVlcnkgVGhlIHNlYXJjaCBxdWVyeVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBMaXN0aW5nIGNvbnRhaW5pbmcgU3VicmVkZGl0c1xuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLnNlYXJjaFN1YnJlZGRpdHMoe3F1ZXJ5OiAnY29va2llcyd9KS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFsgU3VicmVkZGl0IHsgLi4uIH0sIFN1YnJlZGRpdCB7IC4uLiB9LCAuLi5dXG4gICAqL1xuXG5cbiAgc2VhcmNoU3VicmVkZGl0cyhvcHRpb25zKSB7XG4gICAgb3B0aW9ucy5xID0gb3B0aW9ucy5xdWVyeTtcbiAgICByZXR1cm4gdGhpcy5fZ2V0TGlzdGluZyh7XG4gICAgICB1cmk6ICdzdWJyZWRkaXRzL3NlYXJjaCcsXG4gICAgICBxczogKDAsIF9sb2Rhc2gub21pdCkob3B0aW9ucywgJ3F1ZXJ5JylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyBhIGxpc3Qgb2Ygc3VicmVkZGl0cywgYXJyYW5nZWQgYnkgcG9wdWxhcml0eS5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIGZvciB0aGUgcmVzdWx0aW5nIExpc3RpbmdcbiAgICogQHJldHVybnMge1Byb21pc2V9IEEgTGlzdGluZyBjb250YWluaW5nIFN1YnJlZGRpdHNcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXRQb3B1bGFyU3VicmVkZGl0cygpLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IExpc3RpbmcgWyBTdWJyZWRkaXQgeyAuLi4gfSwgU3VicmVkZGl0IHsgLi4uIH0sIC4uLl1cbiAgICovXG5cblxuICBnZXRQb3B1bGFyU3VicmVkZGl0cyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldExpc3Rpbmcoe1xuICAgICAgdXJpOiAnc3VicmVkZGl0cy9wb3B1bGFyJyxcbiAgICAgIHFzOiBvcHRpb25zXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgYSBsaXN0IG9mIHN1YnJlZGRpdHMsIGFycmFuZ2VkIGJ5IGFnZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIGZvciB0aGUgcmVzdWx0aW5nIExpc3RpbmdcbiAgICogQHJldHVybnMge1Byb21pc2V9IEEgTGlzdGluZyBjb250YWluaW5nIFN1YnJlZGRpdHNcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXROZXdTdWJyZWRkaXRzKCkudGhlbihjb25zb2xlLmxvZylcbiAgICogLy8gPT4gTGlzdGluZyBbIFN1YnJlZGRpdCB7IC4uLiB9LCBTdWJyZWRkaXQgeyAuLi4gfSwgLi4uXVxuICAgKi9cblxuXG4gIGdldE5ld1N1YnJlZGRpdHMob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9nZXRMaXN0aW5nKHtcbiAgICAgIHVyaTogJ3N1YnJlZGRpdHMvbmV3JyxcbiAgICAgIHFzOiBvcHRpb25zXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEdldHMgYSBsaXN0IG9mIGdvbGQtZXhjbHVzaXZlIHN1YnJlZGRpdHMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBmb3IgdGhlIHJlc3VsdGluZyBMaXN0aW5nXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIExpc3RpbmcgY29udGFpbmluZyBTdWJyZWRkaXRzXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0R29sZFN1YnJlZGRpdHMoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFsgU3VicmVkZGl0IHsgLi4uIH0sIFN1YnJlZGRpdCB7IC4uLiB9LCAuLi5dXG4gICAqL1xuXG5cbiAgZ2V0R29sZFN1YnJlZGRpdHMob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9nZXRMaXN0aW5nKHtcbiAgICAgIHVyaTogJ3N1YnJlZGRpdHMvZ29sZCcsXG4gICAgICBxczogb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBHZXRzIGEgbGlzdCBvZiBkZWZhdWx0IHN1YnJlZGRpdHMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBmb3IgdGhlIHJlc3VsdGluZyBMaXN0aW5nXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIExpc3RpbmcgY29udGFpbmluZyBTdWJyZWRkaXRzXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuZ2V0RGVmYXVsdFN1YnJlZGRpdHMoKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiBMaXN0aW5nIFsgU3VicmVkZGl0IHsgLi4uIH0sIFN1YnJlZGRpdCB7IC4uLiB9LCAuLi5dXG4gICAqL1xuXG5cbiAgZ2V0RGVmYXVsdFN1YnJlZGRpdHMob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9nZXRMaXN0aW5nKHtcbiAgICAgIHVyaTogJ3N1YnJlZGRpdHMvZGVmYXVsdCcsXG4gICAgICBxczogb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAc3VtbWFyeSBDaGVja3Mgd2hldGhlciBhIGdpdmVuIHVzZXJuYW1lIGlzIGF2YWlsYWJsZSBmb3IgcmVnaXN0cmF0aW9uXG4gICAqIEBkZXNjICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIHdpbGwgbm90IHdvcmsgd2hlbiBzbm9vd3JhcCBpcyBydW5uaW5nIGluIGEgYnJvd3NlciwgZHVlIHRvIGFuIGlzc3VlIHdpdGggcmVkZGl0J3MgQ09SU1xuICAgc2V0dGluZ3MuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSB1c2VybmFtZSBpbiBxdWVzdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgZnVsZmlsbHMgd2l0aCBhIEJvb2xlYW4gKGB0cnVlYCBvciBgZmFsc2VgKVxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmNoZWNrVXNlcm5hbWVBdmFpbGFiaWxpdHkoJ25vdF9hbl9hYXJkdmFyaycpLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IGZhbHNlXG4gICAqIHIuY2hlY2tVc2VybmFtZUF2YWlsYWJpbGl0eSgnZXF3WkFyOXF1bng3SUhxeldWZUYnKS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiAvLyA9PiB0cnVlXG4gICAqL1xuXG5cbiAgY2hlY2tVc2VybmFtZUF2YWlsYWJpbGl0eShuYW1lKSB7XG4gICAgLy8gVGhlIG9hdXRoIGVuZHBvaW50IGxpc3RlZCBpbiByZWRkaXQncyBkb2N1bWVudGF0aW9uIGRvZXNuJ3QgYWN0dWFsbHkgd29yaywgc28ganVzdCBzZW5kIGFuIHVuYXV0aGVudGljYXRlZCByZXF1ZXN0LlxuICAgIHJldHVybiB0aGlzLnVuYXV0aGVudGljYXRlZFJlcXVlc3Qoe1xuICAgICAgdXJpOiAnYXBpL3VzZXJuYW1lX2F2YWlsYWJsZS5qc29uJyxcbiAgICAgIHFzOiB7XG4gICAgICAgIHVzZXI6IG5hbWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIG5ldyBMaXZlVGhyZWFkLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy50aXRsZSBUaGUgdGl0bGUgb2YgdGhlIGxpdmV0aHJlYWQgKDEwMCBjaGFyYWN0ZXJzIG1heClcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmRlc2NyaXB0aW9uXSBBIGRlc2NyaXB0aW9ucyBvZiB0aGUgdGhyZWFkLiAxMjAgY2hhcmFjdGVycyBtYXhcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnJlc291cmNlc10gSW5mb3JtYXRpb24gYW5kIHVzZWZ1bCBsaW5rcyByZWxhdGVkIHRvIHRoZSB0aHJlYWQuIDEyMCBjaGFyYWN0ZXJzIG1heFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm5zZnc9ZmFsc2VdIERldGVybWluZXMgd2hldGhlciB0aGUgdGhyZWFkIGlzIE5vdCBTYWZlIEZvciBXb3JrXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCBmdWxmaWxscyB3aXRoIHRoZSBuZXcgTGl2ZVRocmVhZCB3aGVuIHRoZSByZXF1ZXN0IGlzIGNvbXBsZXRlXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIHIuY3JlYXRlTGl2ZXRocmVhZCh7dGl0bGU6ICdNeSBsaXZldGhyZWFkJ30pLnRoZW4oY29uc29sZS5sb2cpXG4gICAqIC8vID0+IExpdmVUaHJlYWQgeyBpZDogJ3dwaW1uY20xZjAxaicgfVxuICAgKi9cblxuXG4gIGNyZWF0ZUxpdmV0aHJlYWQoX3JlZjEyKSB7XG4gICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuXG4gICAgdmFyIHRpdGxlID0gX3JlZjEyLnRpdGxlLFxuICAgICAgICBkZXNjcmlwdGlvbiA9IF9yZWYxMi5kZXNjcmlwdGlvbixcbiAgICAgICAgcmVzb3VyY2VzID0gX3JlZjEyLnJlc291cmNlcyxcbiAgICAgICAgX3JlZjEyJG5zZncgPSBfcmVmMTIubnNmdyxcbiAgICAgICAgbnNmdyA9IF9yZWYxMiRuc2Z3ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYxMiRuc2Z3O1xuICAgIHJldHVybiB0aGlzLl9wb3N0KHtcbiAgICAgIHVyaTogJ2FwaS9saXZlL2NyZWF0ZScsXG4gICAgICBmb3JtOiB7XG4gICAgICAgIGFwaV90eXBlLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgbnNmdyxcbiAgICAgICAgcmVzb3VyY2VzLFxuICAgICAgICB0aXRsZVxuICAgICAgfVxuICAgIH0pLnRhcCgoMCwgX2hlbHBlcnMuaGFuZGxlSnNvbkVycm9ycykodGhpcykpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgcmV0dXJuIF90aGlzMTEuZ2V0TGl2ZXRocmVhZChyZXN1bHQuanNvbi5kYXRhLmlkKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyB0aGUgXCJoYXBwZW5pbmcgbm93XCIgTGl2ZVRocmVhZCwgaWYgaXQgZXhpc3RzXG4gICAqIEBkZXNjIFRoaXMgaXMgdGhlIExpdmVUaHJlYWQgdGhhdCBpcyBvY2Nhc2lvbmFsbHkgbGlua2VkIGF0IHRoZSB0b3Agb2YgcmVkZGl0LmNvbSwgcmVsYXRpbmcgdG8gY3VycmVudCBldmVudHMuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCBmdWxmaWxscyB3aXRoIHRoZSBcImhhcHBlbmluZyBub3dcIiBMaXZlVGhyZWFkIGlmIGl0IGV4aXN0cywgb3IgcmVqZWN0cyB3aXRoIGEgNDA0IGVycm9yXG4gICBvdGhlcndpc2UuXG4gICAqIEBleGFtcGxlIHIuZ2V0Q3VycmVudEV2ZW50c0xpdmV0aHJlYWQoKS50aGVuKHRocmVhZCA9PiB0aHJlYWQuc3RyZWFtLm9uKCd1cGRhdGUnLCBjb25zb2xlLmxvZykpXG4gICAqL1xuXG5cbiAgZ2V0U3RpY2tpZWRMaXZldGhyZWFkKCkge1xuICAgIHJldHVybiB0aGlzLl9nZXQoe1xuICAgICAgdXJpOiAnYXBpL2xpdmUvaGFwcGVuaW5nX25vdydcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgR2V0cyB0aGUgdXNlcidzIG93biBtdWx0aXJlZGRpdHMuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIFByb21pc2UgZm9yIGFuIEFycmF5IGNvbnRhaW5pbmcgdGhlIHJlcXVlc3RlcidzIE11bHRpUmVkZGl0cy5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogci5nZXRNeU11bHRpcmVkZGl0cygpLnRoZW4oY29uc29sZS5sb2cpXG4gICAqID0+IFsgTXVsdGlSZWRkaXQgeyAuLi4gfSwgTXVsdGlSZWRkaXQgeyAuLi4gfSwgLi4uIF1cbiAgICovXG5cblxuICBnZXRNeU11bHRpcmVkZGl0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0KHtcbiAgICAgIHVyaTogJ2FwaS9tdWx0aS9taW5lJyxcbiAgICAgIHFzOiB7XG4gICAgICAgIGV4cGFuZF9zcnM6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIG5ldyBtdWx0aXJlZGRpdC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubmFtZSBUaGUgbmFtZSBvZiB0aGUgbmV3IG11bHRpcmVkZGl0LiA1MCBjaGFyYWN0ZXJzIG1heFxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5kZXNjcmlwdGlvbiBBIGRlc2NyaXB0aW9uIGZvciB0aGUgbmV3IG11bHRpcmVkZGl0LCBpbiBtYXJrZG93bi5cbiAgICogQHBhcmFtIHtBcnJheX0gb3B0aW9ucy5zdWJyZWRkaXRzIEFuIEFycmF5IG9mIFN1YnJlZGRpdCBvYmplY3RzIChvciBzdWJyZWRkaXQgbmFtZXMpIHRoYXQgdGhpcyBtdWx0aXJlZGRpdCBzaG91bGQgY29tcG9zZSBvZlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmlzaWJpbGl0eT0ncHJpdmF0ZSddIFRoZSBtdWx0aXJlZGRpdCdzIHZpc2liaWxpdHkgc2V0dGluZy4gT25lIG9mIGBwcml2YXRlYCwgYHB1YmxpY2AsIGBoaWRkZW5gLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaWNvbl9uYW1lPScnXSBPbmUgb2YgYGFydCBhbmQgZGVzaWduYCwgYGFza2AsIGBib29rc2AsIGBidXNpbmVzc2AsIGBjYXJzYCwgYGNvbWljc2AsXG4gICBgY3V0ZSBhbmltYWxzYCwgYGRpeWAsIGBlbnRlcnRhaW5tZW50YCwgYGZvb2QgYW5kIGRyaW5rYCwgYGZ1bm55YCwgYGdhbWVzYCwgYGdyb29taW5nYCwgYGhlYWx0aGAsIGBsaWZlIGFkdmljZWAsIGBtaWxpdGFyeWAsXG4gICBgbW9kZWxzIHBpbnVwYCwgYG11c2ljYCwgYG5ld3NgLCBgcGhpbG9zb3BoeWAsIGBwaWN0dXJlcyBhbmQgZ2lmc2AsIGBzY2llbmNlYCwgYHNob3BwaW5nYCwgYHNwb3J0c2AsIGBzdHlsZWAsIGB0ZWNoYCxcbiAgIGB0cmF2ZWxgLCBgdW51c3VhbCBzdG9yaWVzYCwgYHZpZGVvYCwgYE5vbmVgXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5rZXlfY29sb3I9JyMwMDAwMDAnXSBBIHNpeC1kaWdpdCBSR0IgaGV4IGNvbG9yLCBwcmVjZWRlZCBieSAnIydcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLndlaWdodGluZ19zY2hlbWU9J2NsYXNzaWMnXSBPbmUgb2YgYGNsYXNzaWNgLCBgZnJlc2hgXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIFByb21pc2UgZm9yIHRoZSBuZXdseS1jcmVhdGVkIE11bHRpUmVkZGl0IG9iamVjdFxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiByLmNyZWF0ZU11bHRpcmVkZGl0KHtcbiAgICogICBuYW1lOiAnbXlNdWx0aScsXG4gICAqICAgZGVzY3JpcHRpb246ICdBbiBleGFtcGxlIG11bHRpcmVkZGl0JyxcbiAgICogICBzdWJyZWRkaXRzOiBbJ3Nub293cmFwJywgJ3Nub293cmFwX3Rlc3RpbmcnXVxuICAgKiB9KS50aGVuKGNvbnNvbGUubG9nKVxuICAgKiA9PiBNdWx0aVJlZGRpdCB7IGRpc3BsYXlfbmFtZTogJ215TXVsdGknLCAuLi4gfVxuICAgKi9cblxuXG4gIGNyZWF0ZU11bHRpcmVkZGl0KF9yZWYxMykge1xuICAgIHZhciBuYW1lID0gX3JlZjEzLm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uID0gX3JlZjEzLmRlc2NyaXB0aW9uLFxuICAgICAgICBzdWJyZWRkaXRzID0gX3JlZjEzLnN1YnJlZGRpdHMsXG4gICAgICAgIF9yZWYxMyR2aXNpYmlsaXR5ID0gX3JlZjEzLnZpc2liaWxpdHksXG4gICAgICAgIHZpc2liaWxpdHkgPSBfcmVmMTMkdmlzaWJpbGl0eSA9PT0gdm9pZCAwID8gJ3ByaXZhdGUnIDogX3JlZjEzJHZpc2liaWxpdHksXG4gICAgICAgIF9yZWYxMyRpY29uX25hbWUgPSBfcmVmMTMuaWNvbl9uYW1lLFxuICAgICAgICBpY29uX25hbWUgPSBfcmVmMTMkaWNvbl9uYW1lID09PSB2b2lkIDAgPyAnJyA6IF9yZWYxMyRpY29uX25hbWUsXG4gICAgICAgIF9yZWYxMyRrZXlfY29sb3IgPSBfcmVmMTMua2V5X2NvbG9yLFxuICAgICAgICBrZXlfY29sb3IgPSBfcmVmMTMka2V5X2NvbG9yID09PSB2b2lkIDAgPyAnIzAwMDAwMCcgOiBfcmVmMTMka2V5X2NvbG9yLFxuICAgICAgICBfcmVmMTMkd2VpZ2h0aW5nX3NjaGUgPSBfcmVmMTMud2VpZ2h0aW5nX3NjaGVtZSxcbiAgICAgICAgd2VpZ2h0aW5nX3NjaGVtZSA9IF9yZWYxMyR3ZWlnaHRpbmdfc2NoZSA9PT0gdm9pZCAwID8gJ2NsYXNzaWMnIDogX3JlZjEzJHdlaWdodGluZ19zY2hlO1xuICAgIHJldHVybiB0aGlzLl9wb3N0KHtcbiAgICAgIHVyaTogJ2FwaS9tdWx0aScsXG4gICAgICBmb3JtOiB7XG4gICAgICAgIG1vZGVsOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgZGlzcGxheV9uYW1lOiBuYW1lLFxuICAgICAgICAgIGRlc2NyaXB0aW9uX21kOiBkZXNjcmlwdGlvbixcbiAgICAgICAgICBpY29uX25hbWUsXG4gICAgICAgICAga2V5X2NvbG9yLFxuICAgICAgICAgIHN1YnJlZGRpdHM6IHN1YnJlZGRpdHMubWFwKGZ1bmN0aW9uIChzdWIpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIG5hbWU6IHR5cGVvZiBzdWIgPT09ICdzdHJpbmcnID8gc3ViIDogc3ViLmRpc3BsYXlfbmFtZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB2aXNpYmlsaXR5LFxuICAgICAgICAgIHdlaWdodGluZ19zY2hlbWVcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF9yZXZva2VUb2tlbih0b2tlbikge1xuICAgIHJldHVybiB0aGlzLmNyZWRlbnRpYWxlZENsaWVudFJlcXVlc3Qoe1xuICAgICAgdXJpOiAnYXBpL3YxL3Jldm9rZV90b2tlbicsXG4gICAgICBmb3JtOiB7XG4gICAgICAgIHRva2VuXG4gICAgICB9LFxuICAgICAgbWV0aG9kOiAncG9zdCdcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgSW52YWxpZGF0ZXMgdGhlIGN1cnJlbnQgYWNjZXNzIHRva2VuLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgZnVsZmlsbHMgd2hlbiB0aGlzIHJlcXVlc3QgaXMgY29tcGxldGVcbiAgICogQGRlc2MgKipOb3RlKio6IFRoaXMgY2FuIG9ubHkgYmUgdXNlZCBpZiB0aGUgY3VycmVudCByZXF1ZXN0ZXIgd2FzIHN1cHBsaWVkIHdpdGggYSBgY2xpZW50X2lkYCBhbmQgYGNsaWVudF9zZWNyZXRgLiBJZiB0aGVcbiAgIGN1cnJlbnQgcmVxdWVzdGVyIHdhcyBzdXBwbGllZCB3aXRoIGEgcmVmcmVzaCB0b2tlbiwgaXQgd2lsbCBhdXRvbWF0aWNhbGx5IGNyZWF0ZSBhIG5ldyBhY2Nlc3MgdG9rZW4gaWYgYW55IG1vcmUgcmVxdWVzdHNcbiAgIGFyZSBtYWRlIGFmdGVyIHRoaXMgb25lLlxuICAgKiBAZXhhbXBsZSByLnJldm9rZUFjY2Vzc1Rva2VuKCk7XG4gICAqL1xuXG5cbiAgcmV2b2tlQWNjZXNzVG9rZW4oKSB7XG4gICAgdmFyIF90aGlzMTIgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuX3Jldm9rZVRva2VuKHRoaXMuYWNjZXNzVG9rZW4pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMxMi5hY2Nlc3NUb2tlbiA9IG51bGw7XG4gICAgICBfdGhpczEyLnRva2VuRXhwaXJhdGlvbiA9IG51bGw7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEludmFsaWRhdGVzIHRoZSBjdXJyZW50IHJlZnJlc2ggdG9rZW4uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCBmdWxmaWxscyB3aGVuIHRoaXMgcmVxdWVzdCBpcyBjb21wbGV0ZVxuICAgKiBAZGVzYyAqKk5vdGUqKjogVGhpcyBjYW4gb25seSBiZSB1c2VkIGlmIHRoZSBjdXJyZW50IHJlcXVlc3RlciB3YXMgc3VwcGxpZWQgd2l0aCBhIGBjbGllbnRfaWRgIGFuZCBgY2xpZW50X3NlY3JldGAuIEFsbFxuICAgYWNjZXNzIHRva2VucyBnZW5lcmF0ZWQgYnkgdGhpcyByZWZyZXNoIHRva2VuIHdpbGwgYWxzbyBiZSBpbnZhbGlkYXRlZC4gVGhpcyBlZmZlY3RpdmVseSBkZS1hdXRoZW50aWNhdGVzIHRoZSByZXF1ZXN0ZXIgYW5kXG4gICBwcmV2ZW50cyBpdCBmcm9tIG1ha2luZyBhbnkgbW9yZSB2YWxpZCByZXF1ZXN0cy4gVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIGluIGEgZmV3IGNhc2VzLCBlLmcuIGlmIHRoaXMgdG9rZW4gaGFzXG4gICBiZWVuIGFjY2lkZW50YWxseSBsZWFrZWQgdG8gYSB0aGlyZCBwYXJ0eS5cbiAgICogQGV4YW1wbGUgci5yZXZva2VSZWZyZXNoVG9rZW4oKTtcbiAgICovXG5cblxuICByZXZva2VSZWZyZXNoVG9rZW4oKSB7XG4gICAgdmFyIF90aGlzMTMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuX3Jldm9rZVRva2VuKHRoaXMucmVmcmVzaFRva2VuKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMTMucmVmcmVzaFRva2VuID0gbnVsbDtcbiAgICAgIF90aGlzMTMuYWNjZXNzVG9rZW4gPSBudWxsOyAvLyBSZXZva2luZyBhIHJlZnJlc2ggdG9rZW4gYWxzbyByZXZva2VzIGFueSBhc3NvY2lhdGVkIGFjY2VzcyB0b2tlbnMuXG5cbiAgICAgIF90aGlzMTMudG9rZW5FeHBpcmF0aW9uID0gbnVsbDtcbiAgICB9KTtcbiAgfVxuXG4gIF9zZWxlY3RGbGFpcihfcmVmMTQpIHtcbiAgICB2YXIgX3RoaXMxNCA9IHRoaXM7XG5cbiAgICB2YXIgZmxhaXJfdGVtcGxhdGVfaWQgPSBfcmVmMTQuZmxhaXJfdGVtcGxhdGVfaWQsXG4gICAgICAgIGxpbmsgPSBfcmVmMTQubGluayxcbiAgICAgICAgbmFtZSA9IF9yZWYxNC5uYW1lLFxuICAgICAgICB0ZXh0ID0gX3JlZjE0LnRleHQsXG4gICAgICAgIHN1YnJlZGRpdE5hbWUgPSBfcmVmMTQuc3VicmVkZGl0TmFtZTtcblxuICAgIGlmICghZmxhaXJfdGVtcGxhdGVfaWQpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZE1ldGhvZENhbGxFcnJvcignTm8gZmxhaXIgdGVtcGxhdGUgSUQgcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX1Byb21pc2UuZGVmYXVsdC5yZXNvbHZlKHN1YnJlZGRpdE5hbWUpLnRoZW4oZnVuY3Rpb24gKHN1Yk5hbWUpIHtcbiAgICAgIHJldHVybiBfdGhpczE0Ll9wb3N0KHtcbiAgICAgICAgdXJpOiBcInIvXCIuY29uY2F0KHN1Yk5hbWUsIFwiL2FwaS9zZWxlY3RmbGFpclwiKSxcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGFwaV90eXBlLFxuICAgICAgICAgIGZsYWlyX3RlbXBsYXRlX2lkLFxuICAgICAgICAgIGxpbmssXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICB0ZXh0XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2Fzc2lnbkZsYWlyKF9yZWYxNSkge1xuICAgIHZhciBfdGhpczE1ID0gdGhpcztcblxuICAgIHZhciBjc3NfY2xhc3MgPSBfcmVmMTUuY3NzX2NsYXNzLFxuICAgICAgICBfcmVmMTUkY3NzQ2xhc3MgPSBfcmVmMTUuY3NzQ2xhc3MsXG4gICAgICAgIGNzc0NsYXNzID0gX3JlZjE1JGNzc0NsYXNzID09PSB2b2lkIDAgPyBjc3NfY2xhc3MgOiBfcmVmMTUkY3NzQ2xhc3MsXG4gICAgICAgIGxpbmsgPSBfcmVmMTUubGluayxcbiAgICAgICAgbmFtZSA9IF9yZWYxNS5uYW1lLFxuICAgICAgICB0ZXh0ID0gX3JlZjE1LnRleHQsXG4gICAgICAgIHN1YnJlZGRpdF9uYW1lID0gX3JlZjE1LnN1YnJlZGRpdF9uYW1lLFxuICAgICAgICBfcmVmMTUkc3VicmVkZGl0TmFtZSA9IF9yZWYxNS5zdWJyZWRkaXROYW1lLFxuICAgICAgICBzdWJyZWRkaXROYW1lID0gX3JlZjE1JHN1YnJlZGRpdE5hbWUgPT09IHZvaWQgMCA/IHN1YnJlZGRpdF9uYW1lIDogX3JlZjE1JHN1YnJlZGRpdE5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX3Byb21pc2VXcmFwKF9Qcm9taXNlLmRlZmF1bHQucmVzb2x2ZShzdWJyZWRkaXROYW1lKS50aGVuKGZ1bmN0aW9uIChkaXNwbGF5TmFtZSkge1xuICAgICAgcmV0dXJuIF90aGlzMTUuX3Bvc3Qoe1xuICAgICAgICB1cmk6IFwici9cIi5jb25jYXQoZGlzcGxheU5hbWUsIFwiL2FwaS9mbGFpclwiKSxcbiAgICAgICAgZm9ybToge1xuICAgICAgICAgIGFwaV90eXBlLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgdGV4dCxcbiAgICAgICAgICBsaW5rLFxuICAgICAgICAgIGNzc19jbGFzczogY3NzQ2xhc3NcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSkpO1xuICB9XG5cbiAgX3BvcHVsYXRlKHJlc3BvbnNlVHJlZSkge1xuICAgIHZhciBfdGhpczE2ID0gdGhpcztcblxuICAgIGlmICh0eXBlb2YgcmVzcG9uc2VUcmVlID09PSAnb2JqZWN0JyAmJiByZXNwb25zZVRyZWUgIT09IG51bGwpIHtcbiAgICAgIC8vIE1hcCB7a2luZDogJ3QyJywgZGF0YToge25hbWU6ICdzb21lX3VzZXJuYW1lJywgLi4uIH19IHRvIGEgUmVkZGl0VXNlciAoZS5nLikgd2l0aCB0aGUgc2FtZSBwcm9wZXJ0aWVzXG4gICAgICBpZiAoT2JqZWN0LmtleXMocmVzcG9uc2VUcmVlKS5sZW5ndGggPT09IDIgJiYgcmVzcG9uc2VUcmVlLmtpbmQgJiYgcmVzcG9uc2VUcmVlLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25ld09iamVjdChfY29uc3RhbnRzLktJTkRTW3Jlc3BvbnNlVHJlZS5raW5kXSB8fCAnUmVkZGl0Q29udGVudCcsIHRoaXMuX3BvcHVsYXRlKHJlc3BvbnNlVHJlZS5kYXRhKSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSAoQXJyYXkuaXNBcnJheShyZXNwb25zZVRyZWUpID8gX2xvZGFzaC5tYXAgOiBfbG9kYXNoLm1hcFZhbHVlcykocmVzcG9uc2VUcmVlLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAvLyBNYXBzIHthdXRob3I6ICdzb21lX3VzZXJuYW1lJ30gdG8ge2F1dGhvcjogUmVkZGl0VXNlciB7IG5hbWU6ICdzb21lX3VzZXJuYW1lJyB9IH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIF9jb25zdGFudHMuVVNFUl9LRVlTLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTYuX25ld09iamVjdCgnUmVkZGl0VXNlcicsIHtcbiAgICAgICAgICAgIG5hbWU6IHZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgX2NvbnN0YW50cy5TVUJSRURESVRfS0VZUy5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczE2Ll9uZXdPYmplY3QoJ1N1YnJlZGRpdCcsIHtcbiAgICAgICAgICAgIGRpc3BsYXlfbmFtZTogdmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfdGhpczE2Ll9wb3B1bGF0ZSh2YWx1ZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDIgJiYgcmVzdWx0WzBdIGluc3RhbmNlb2Ygc25vb3dyYXAub2JqZWN0cy5MaXN0aW5nICYmIHJlc3VsdFswXVswXSBpbnN0YW5jZW9mIHNub293cmFwLm9iamVjdHMuU3VibWlzc2lvbiAmJiByZXN1bHRbMV0gaW5zdGFuY2VvZiBzbm9vd3JhcC5vYmplY3RzLkxpc3RpbmcpIHtcbiAgICAgICAgaWYgKHJlc3VsdFsxXS5fbW9yZSAmJiAhcmVzdWx0WzFdLl9tb3JlLmxpbmtfaWQpIHtcbiAgICAgICAgICByZXN1bHRbMV0uX21vcmUubGlua19pZCA9IHJlc3VsdFswXVswXS5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0WzBdWzBdLmNvbW1lbnRzID0gcmVzdWx0WzFdO1xuICAgICAgICByZXR1cm4gcmVzdWx0WzBdWzBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZVRyZWU7XG4gIH1cblxuICBfZ2V0TGlzdGluZyhfcmVmMTYpIHtcbiAgICB2YXIgdXJpID0gX3JlZjE2LnVyaSxcbiAgICAgICAgX3JlZjE2JHFzID0gX3JlZjE2LnFzLFxuICAgICAgICBxcyA9IF9yZWYxNiRxcyA9PT0gdm9pZCAwID8ge30gOiBfcmVmMTYkcXMsXG4gICAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjE2LCBbXCJ1cmlcIiwgXCJxc1wiXSk7XG5cbiAgICAvKiBXaGVuIHRoZSByZXNwb25zZSB0eXBlIGlzIGV4cGVjdGVkIHRvIGJlIGEgTGlzdGluZywgYWRkIGEgYGNvdW50YCBwYXJhbWV0ZXIgd2l0aCBhIHZlcnkgaGlnaCBudW1iZXIuXG4gICAgVGhpcyBlbnN1cmVzIHRoYXQgcmVkZGl0IHJldHVybnMgYSBgYmVmb3JlYCBwcm9wZXJ0eSBpbiB0aGUgcmVzdWx0aW5nIExpc3RpbmcgdG8gZW5hYmxlIHBhZ2luYXRpb24uXG4gICAgKEFzaWRlIGZyb20gdGhlIGFkZGl0aW9uYWwgcGFyYW1ldGVyLCB0aGlzIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gc25vb3dyYXAucHJvdG90eXBlLl9nZXQpICovXG4gICAgdmFyIG1lcmdlZFF1ZXJ5ID0gX29iamVjdFNwcmVhZCh7XG4gICAgICBjb3VudDogOTk5OVxuICAgIH0sIHFzKTtcblxuICAgIHJldHVybiBxcy5saW1pdCB8fCAhKDAsIF9sb2Rhc2guaXNFbXB0eSkob3B0aW9ucykgPyB0aGlzLl9uZXdPYmplY3QoJ0xpc3RpbmcnLCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIF9xdWVyeTogbWVyZ2VkUXVlcnksXG4gICAgICBfdXJpOiB1cmlcbiAgICB9LCBvcHRpb25zKSkuZmV0Y2hNb3JlKHFzLmxpbWl0IHx8IF9jb25zdGFudHMuTUFYX0xJU1RJTkdfSVRFTVMpXG4gICAgLyogVGhpcyBzZWNvbmQgY2FzZSBpcyB1c2VkIGFzIGEgZmFsbGJhY2sgaW4gY2FzZSB0aGUgZW5kcG9pbnQgdW5leHBlY3RlZGx5IGVuZHMgdXAgcmV0dXJuaW5nIHNvbWV0aGluZyBvdGhlciB0aGFuIGFcbiAgICBMaXN0aW5nIChlLmcuIFN1Ym1pc3Npb24jZ2V0UmVsYXRlZCwgd2hpY2ggdXNlZCB0byByZXR1cm4gYSBMaXN0aW5nIGJ1dCBubyBsb25nZXIgZG9lcyBkdWUgdG8gdXBzdHJlYW0gcmVkZGl0IEFQSVxuICAgIGNoYW5nZXMpLCBpbiB3aGljaCBjYXNlIHVzaW5nIGZldGNoX21vcmUoKSBhcyBhYm92ZSB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICBUaGlzIGZhbGxiYWNrIG9ubHkgd29ya3MgaWYgdGhlcmUgYXJlIG5vIG90aGVyIG1ldGEtcHJvcGVydGllcyBwcm92aWRlZCBmb3IgdGhlIExpc3RpbmcsIHN1Y2ggYXMgX3RyYW5zZm9ybS4gSWYgdGhlcmUgYXJlXG4gICAgb3RoZXIgbWV0YS1wcm9wZXJ0aWVzLCAgdGhlIGZ1bmN0aW9uIHdpbGwgc3RpbGwgZW5kIHVwIHRocm93aW5nIGFuIGVycm9yLCBidXQgdGhlcmUncyBub3QgcmVhbGx5IGFueSBnb29kIHdheSB0byBoYW5kbGUgaXRcbiAgICAocHJlZGljdGluZyB1cHN0cmVhbSBjaGFuZ2VzIGNhbiBvbmx5IGdvIHNvIGZhcikuIE1vcmUgaW1wb3J0YW50bHksIGluIHRoZSBsaW1pdGVkIGNhc2VzIHdoZXJlIGl0J3MgdXNlZCwgdGhlIGZhbGxiYWNrXG4gICAgc2hvdWxkIGhhdmUgbm8gZWZmZWN0IG9uIHRoZSByZXR1cm5lZCByZXN1bHRzICovXG4gICAgOiB0aGlzLl9nZXQoe1xuICAgICAgdXJpLFxuICAgICAgcXM6IG1lcmdlZFF1ZXJ5XG4gICAgfSkudGhlbihmdW5jdGlvbiAobGlzdGluZykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkobGlzdGluZykpIHtcbiAgICAgICAgbGlzdGluZy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbS5jb25zdHJ1Y3Rvci5fbmFtZSA9PT0gJ0NvbW1lbnQnO1xuICAgICAgICB9KS5mb3JFYWNoKF9oZWxwZXJzLmFkZEVtcHR5UmVwbGllc0xpc3RpbmcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGluZztcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQHN1bW1hcnkgSW4gYnJvd3NlcnMsIHJlc3RvcmVzIHRoZSBgd2luZG93LnNub293cmFwYCBwcm9wZXJ0eSB0byB3aGF0ZXZlciBpdCB3YXMgYmVmb3JlIHRoaXMgaW5zdGFuY2Ugb2Ygc25vb3dyYXAgd2FzXG4gICBsb2FkZWQuIFRoaXMgaXMgYSBuby1vcCBpbiBOb2RlLlxuICAgKiBAcmV0dXJucyBUaGlzIGluc3RhbmNlIG9mIHRoZSBzbm9vd3JhcCBjb25zdHJ1Y3RvclxuICAgKiBAZXhhbXBsZSB2YXIgc25vb3dyYXAgPSB3aW5kb3cuc25vb3dyYXAubm9Db25mbGljdCgpO1xuICAgKi9cblxuXG4gIHN0YXRpYyBub0NvbmZsaWN0KCkge1xuICAgIGlmIChfaGVscGVycy5pc0Jyb3dzZXIpIHtcbiAgICAgIGdsb2JhbFtfY29uc3RhbnRzLk1PRFVMRV9OQU1FXSA9IHRoaXMuX3ByZXZpb3VzU25vb3dyYXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufTtcblxuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4oMCwgX2hlbHBlcnMuZGVmaW5lSW5zcGVjdEZ1bmMpKHNub293cmFwLnByb3RvdHlwZSwgZnVuY3Rpb24gKCkge1xuICAvLyBIaWRlIGNvbmZpZGVudGlhbCBpbmZvcm1hdGlvbiAodG9rZW5zLCBjbGllbnQgSURzLCBldGMuKSwgYXMgd2VsbCBhcyBwcml2YXRlIHByb3BlcnRpZXMsIGZyb20gdGhlIGNvbnNvbGUubG9nIG91dHB1dC5cbiAgdmFyIGtleXNGb3JIaWRkZW5WYWx1ZXMgPSBbJ2NsaWVudFNlY3JldCcsICdyZWZyZXNoVG9rZW4nLCAnYWNjZXNzVG9rZW4nLCAncGFzc3dvcmQnXTtcbiAgdmFyIGZvcm1hdHRlZCA9ICgwLCBfbG9kYXNoLm1hcFZhbHVlcykoKDAsIF9sb2Rhc2gub21pdEJ5KSh0aGlzLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHJldHVybiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuc3RhcnRzV2l0aCgnXycpO1xuICB9KSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICByZXR1cm4gKDAsIF9sb2Rhc2guaW5jbHVkZXMpKGtleXNGb3JIaWRkZW5WYWx1ZXMsIGtleSkgPyB2YWx1ZSAmJiAnKHJlZGFjdGVkKScgOiB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBcIlwiLmNvbmNhdChfY29uc3RhbnRzLk1PRFVMRV9OQU1FLCBcIiBcIikuY29uY2F0KF91dGlsLmRlZmF1bHQuaW5zcGVjdChmb3JtYXR0ZWQpKTtcbn0pO1xudmFyIGNsYXNzRnVuY0Rlc2NyaXB0b3JzID0ge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHdyaXRhYmxlOiB0cnVlXG59O1xuLyogQWRkIHRoZSByZXF1ZXN0X2hhbmRsZXIgZnVuY3Rpb25zIChvYXV0aF9yZXF1ZXN0LCBjcmVkZW50aWFsZWRfY2xpZW50X3JlcXVlc3QsIGV0Yy4pIHRvIHRoZSBzbm9vd3JhcCBwcm90b3R5cGUuIFVzZVxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgdG8gZW5zdXJlIHRoYXQgdGhlIHByb3BlcnRpZXMgYXJlIG5vbi1lbnVtZXJhYmxlLiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhzbm9vd3JhcC5wcm90b3R5cGUsICgwLCBfbG9kYXNoLm1hcFZhbHVlcykocmVxdWVzdEhhbmRsZXIsIGZ1bmN0aW9uIChmdW5jKSB7XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKHtcbiAgICB2YWx1ZTogZnVuY1xuICB9LCBjbGFzc0Z1bmNEZXNjcmlwdG9ycyk7XG59KSk7XG5cbl9jb25zdGFudHMuSFRUUF9WRVJCUy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLyogRGVmaW5lIG1ldGhvZCBzaG9ydGN1dHMgZm9yIGVhY2ggb2YgdGhlIEhUVFAgdmVyYnMuIGkuZS4gYHNub293cmFwLnByb3RvdHlwZS5fcG9zdGAgaXMgdGhlIHNhbWUgYXMgYG9hdXRoX3JlcXVlc3RgIGV4Y2VwdFxuICB0aGF0IHRoZSBIVFRQIG1ldGhvZCBkZWZhdWx0cyB0byBgcG9zdGAsIGFuZCB0aGUgcmVzdWx0IGlzIHByb21pc2Utd3JhcHBlZC4gVXNlIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0byBlbnN1cmUgdGhhdCB0aGVcbiAgcHJvcGVydGllcyBhcmUgbm9uLWVudW1lcmFibGUuICovXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzbm9vd3JhcC5wcm90b3R5cGUsIFwiX1wiLmNvbmNhdChtZXRob2QpLCBfb2JqZWN0U3ByZWFkKHtcbiAgICB2YWx1ZShvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZVdyYXAodGhpcy5vYXV0aFJlcXVlc3QoX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucywge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pKSk7XG4gICAgfVxuXG4gIH0sIGNsYXNzRnVuY0Rlc2NyaXB0b3JzKSk7XG59KTtcbi8qIGBvYmplY3RzYCB3aWxsIGJlIGFuIG9iamVjdCBjb250YWluaW5nIGdldHRlcnMgZm9yIGVhY2ggY29udGVudCB0eXBlLCBkdWUgdG8gdGhlIHdheSBvYmplY3RzIGFyZSBleHBvcnRlZCBmcm9tXG5vYmplY3RzL2luZGV4LmpzLiBUbyB1bndyYXAgdGhlc2UgZ2V0dGVycyBpbnRvIGRpcmVjdCBwcm9wZXJ0aWVzLCB1c2UgbG9kYXNoLm1hcFZhbHVlcyB3aXRoIGFuIGlkZW50aXR5IGZ1bmN0aW9uLiAqL1xuXG5cbnNub293cmFwLm9iamVjdHMgPSAoMCwgX2xvZGFzaC5tYXBWYWx1ZXMpKG9iamVjdHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59KTtcbigwLCBfbG9kYXNoLmZvck93bikoX2NvbnN0YW50cy5LSU5EUywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHNub293cmFwLm9iamVjdHNbdmFsdWVdID0gc25vb3dyYXAub2JqZWN0c1t2YWx1ZV0gfHwgY2xhc3MgZXh0ZW5kcyBvYmplY3RzLlJlZGRpdENvbnRlbnQge307XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzbm9vd3JhcC5vYmplY3RzW3ZhbHVlXSwgJ19uYW1lJywge1xuICAgIHZhbHVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn0pOyAvLyBBbGlhcyBhbGwgZnVuY3Rpb25zIG9uIHNub293cmFwJ3MgcHJvdG90eXBlIGFuZCBzbm9vd3JhcCdzIG9iamVjdCBwcm90b3R5cGVzIGluIHNuYWtlX2Nhc2UuXG5cbigwLCBfbG9kYXNoLnZhbHVlcykoc25vb3dyYXAub2JqZWN0cykuY29uY2F0KHNub293cmFwKS5tYXAoZnVuY3Rpb24gKGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmMucHJvdG90eXBlO1xufSkuZm9yRWFjaChmdW5jdGlvbiAoZnVuY1Byb3RvKSB7XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGZ1bmNQcm90bykuZmlsdGVyKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICFuYW1lLnN0YXJ0c1dpdGgoJ18nKSAmJiBuYW1lICE9PSAoMCwgX2xvZGFzaC5zbmFrZUNhc2UpKG5hbWUpICYmIHR5cGVvZiBmdW5jUHJvdG9bbmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGZ1bmNQcm90bywgKDAsIF9sb2Rhc2guc25ha2VDYXNlKShuYW1lKSwgX29iamVjdFNwcmVhZCh7XG4gICAgICB2YWx1ZTogZnVuY1Byb3RvW25hbWVdXG4gICAgfSwgY2xhc3NGdW5jRGVzY3JpcHRvcnMpKTtcbiAgfSk7XG59KTtcbnNub293cmFwLmVycm9ycyA9IGVycm9ycztcbnNub293cmFwLnZlcnNpb24gPSBfY29uc3RhbnRzLlZFUlNJT047XG5cbmlmICghbW9kdWxlLnBhcmVudCAmJiBfaGVscGVycy5pc0Jyb3dzZXIpIHtcbiAgLy8gY2hlY2sgaWYgdGhlIGNvZGUgaXMgYmVpbmcgcnVuIGluIGEgYnJvd3NlciB0aHJvdWdoIGJyb3dzZXJpZnksIGV0Yy5cbiAgc25vb3dyYXAuX3ByZXZpb3VzU25vb3dyYXAgPSBnbG9iYWxbX2NvbnN0YW50cy5NT0RVTEVfTkFNRV07XG4gIGdsb2JhbFtfY29uc3RhbnRzLk1PRFVMRV9OQU1FXSA9IHNub293cmFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNub293cmFwOyJdLCJuYW1lcyI6WyJfbG9kYXNoIiwicmVxdWlyZSIsIl9Qcm9taXNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9wcm9taXNlQ2hhaW5zIiwiX3V0aWwiLCJyZXF1ZXN0SGFuZGxlciIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2NvbnN0YW50cyIsImVycm9ycyIsIl9oZWxwZXJzIiwiX2NyZWF0ZV9jb25maWciLCJvYmplY3RzIiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldCIsInNldCIsImRlZmF1bHQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJzb3VyY2UiLCJleGNsdWRlZCIsInRhcmdldCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiaSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJsZW5ndGgiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzb3VyY2VLZXlzIiwia2V5cyIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcGlfdHlwZSIsInNub293cmFwIiwiY29uc3RydWN0b3IiLCJfcmVmIiwidW5kZWZpbmVkIiwidXNlcl9hZ2VudCIsIl9yZWYkdXNlckFnZW50IiwidXNlckFnZW50IiwiY2xpZW50X2lkIiwiX3JlZiRjbGllbnRJZCIsImNsaWVudElkIiwiY2xpZW50X3NlY3JldCIsIl9yZWYkY2xpZW50U2VjcmV0IiwiY2xpZW50U2VjcmV0IiwicmVmcmVzaF90b2tlbiIsIl9yZWYkcmVmcmVzaFRva2VuIiwicmVmcmVzaFRva2VuIiwiYWNjZXNzX3Rva2VuIiwiX3JlZiRhY2Nlc3NUb2tlbiIsImFjY2Vzc1Rva2VuIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImlzQnJvd3NlciIsInJlcXVpcmVkQXJnIiwiTm9DcmVkZW50aWFsc0Vycm9yIiwiZ2xvYmFsIiwibmF2aWdhdG9yIiwiZGVmYXVsdHMiLCJyYXRlbGltaXRSZW1haW5pbmciLCJyYXRlbGltaXRFeHBpcmF0aW9uIiwidG9rZW5FeHBpcmF0aW9uIiwic2NvcGUiLCJfY29uZmlnIiwiX25leHRSZXF1ZXN0VGltZXN0YW1wIiwiSW5maW5pdHkiLCJhZGRTbmFrZUNhc2VTaGFkb3dQcm9wcyIsImdldEF1dGhVcmwiLCJfcmVmMiIsIl9yZWYyJGNsaWVudElkIiwiX3JlZjIkc2NvcGUiLCJfcmVmMiRyZWRpcmVjdFVyaSIsInJlZGlyZWN0VXJpIiwiX3JlZjIkcGVybWFuZW50IiwicGVybWFuZW50IiwiX3JlZjIkc3RhdGUiLCJzdGF0ZSIsIl9yZWYyJGVuZHBvaW50RG9tYWluIiwiZW5kcG9pbnREb21haW4iLCJBcnJheSIsImlzQXJyYXkiLCJldmVyeSIsInNjb3BlVmFsdWUiLCJUeXBlRXJyb3IiLCJjb25jYXQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJqb2luIiwicmVwbGFjZSIsImZyb21BdXRoQ29kZSIsIl9yZWYzIiwiX3RoaXMiLCJfcmVmMyRjb2RlIiwiY29kZSIsIl9yZWYzJHVzZXJBZ2VudCIsIl9yZWYzJGNsaWVudElkIiwiX3JlZjMkcmVkaXJlY3RVcmkiLCJfcmVmMyRlbmRwb2ludERvbWFpbiIsImNyZWRlbnRpYWxlZENsaWVudFJlcXVlc3QiLCJyYXdSZXF1ZXN0IiwibWV0aG9kIiwiYmFzZVVybCIsInVyaSIsImZvcm0iLCJncmFudF90eXBlIiwicmVkaXJlY3RfdXJpIiwidGhlbiIsInJlc3BvbnNlIiwiZXJyb3IiLCJSZXF1ZXN0RXJyb3IiLCJlcnJvcl9kZXNjcmlwdGlvbiIsInJlcXVlc3RlciIsImNvbmZpZyIsImdyYW50VHlwZSIsIkNMSUVOVF9DUkVERU5USUFMUyIsIklOU1RBTExFRF9DTElFTlQiLCJmcm9tQXBwbGljYXRpb25Pbmx5QXV0aCIsIl9yZWY0IiwiX3RoaXMyIiwiX3JlZjQkdXNlckFnZW50IiwiX3JlZjQkY2xpZW50SWQiLCJkZXZpY2VJZCIsIl9yZWY0JGdyYW50VHlwZSIsIl9yZWY0JHBlcm1hbmVudCIsIl9yZWY0JGVuZHBvaW50RG9tYWluIiwiZGV2aWNlX2lkIiwiZHVyYXRpb24iLCJfbmV3T2JqZWN0Iiwib2JqZWN0VHlwZSIsImNvbnRlbnQiLCJfaGFzRmV0Y2hlZCIsIl90aGlzMyIsIm9wdGlvbnMiLCJpbnZhbGlkS2V5IiwiZmluZCIsImFzc2lnbiIsIl93YXJuIiwid2FybmluZ3MiLCJfdGhpcyRfY29uZmlnJGxvZ2dlciIsImxvZ2dlciIsIndhcm4iLCJfZGVidWciLCJkZWJ1ZyIsIl90aGlzJF9jb25maWckbG9nZ2VyMiIsIl9wcm9taXNlV3JhcCIsInByb3hpZXMiLCJpZGVudGl0eSIsImdldFVzZXIiLCJuYW1lIiwiZ2V0Q29tbWVudCIsImNvbW1lbnRJZCIsImFkZEZ1bGxuYW1lUHJlZml4IiwiZ2V0U3VicmVkZGl0IiwiZGlzcGxheU5hbWUiLCJkaXNwbGF5X25hbWUiLCJnZXRTdWJtaXNzaW9uIiwic3VibWlzc2lvbklkIiwiZ2V0TWVzc2FnZSIsIm1lc3NhZ2VJZCIsImdldExpdmV0aHJlYWQiLCJ0aHJlYWRJZCIsImlkIiwic2xpY2UiLCJnZXRNZSIsIl90aGlzNCIsIl9nZXQiLCJyZXN1bHQiLCJfb3duVXNlckluZm8iLCJfZ2V0TXlOYW1lIiwicmVzb2x2ZSIsImdldEthcm1hIiwiZ2V0UHJlZmVyZW5jZXMiLCJ1cGRhdGVQcmVmZXJlbmNlcyIsInVwZGF0ZWRQcmVmZXJlbmNlcyIsIl9wYXRjaCIsImJvZHkiLCJnZXRNeVRyb3BoaWVzIiwiZ2V0RnJpZW5kcyIsImdldEJsb2NrZWRVc2VycyIsImNoZWNrQ2FwdGNoYVJlcXVpcmVtZW50IiwiZ2V0TmV3Q2FwdGNoYUlkZW50aWZpZXIiLCJfcG9zdCIsInJlcyIsImpzb24iLCJkYXRhIiwiaWRlbiIsImdldENhcHRjaGFJbWFnZSIsImlkZW50aWZpZXIiLCJnZXRTYXZlZENhdGVnb3JpZXMiLCJtYXJrQXNWaXNpdGVkIiwibGlua3MiLCJtYXAiLCJfc3VibWl0IiwiX3JlZjUiLCJfdGhpczUiLCJjYXB0Y2hhX3Jlc3BvbnNlIiwiX3JlZjUkY2FwdGNoYVJlc3BvbnNlIiwiY2FwdGNoYVJlc3BvbnNlIiwiY2FwdGNoYV9pZGVuIiwiX3JlZjUkY2FwdGNoYUlkZW4iLCJjYXB0Y2hhSWRlbiIsImtpbmQiLCJfcmVmNSRyZXN1Ym1pdCIsInJlc3VibWl0IiwiX3JlZjUkc2VuZF9yZXBsaWVzIiwic2VuZF9yZXBsaWVzIiwiX3JlZjUkc2VuZFJlcGxpZXMiLCJzZW5kUmVwbGllcyIsImNyb3NzcG9zdF9mdWxsbmFtZSIsInRleHQiLCJ0aXRsZSIsInVybCIsInN1YnJlZGRpdF9uYW1lIiwiX3JlZjUkc3VicmVkZGl0TmFtZSIsInN1YnJlZGRpdE5hbWUiLCJuc2Z3Iiwic3BvaWxlciIsImZsYWlySWQiLCJmbGFpclRleHQiLCJjYXB0Y2hhIiwic2VuZHJlcGxpZXMiLCJzciIsImZsYWlyX2lkIiwiZmxhaXJfdGV4dCIsInRhcCIsImhhbmRsZUpzb25FcnJvcnMiLCJzdWJtaXRTZWxmcG9zdCIsInN1Ym1pdExpbmsiLCJzdWJtaXRDcm9zc3Bvc3QiLCJvcmlnaW5hbFBvc3QiLCJTdWJtaXNzaW9uIiwiX2dldFNvcnRlZEZyb250cGFnZSIsInNvcnRUeXBlIiwib3B0cyIsInN1Yk5hbWUiLCJpc0VtcHR5Iiwib21pdEJ5Iiwib3B0aW9uIiwicGFyc2VkT3B0aW9ucyIsIm9taXQiLCJ0IiwidGltZSIsIl9nZXRMaXN0aW5nIiwicXMiLCJnZXRIb3QiLCJnZXRCZXN0IiwiZ2V0TmV3IiwiZ2V0TmV3Q29tbWVudHMiLCJnZXRDb250ZW50QnlJZHMiLCJpZHMiLCJwcmVmaXhlZElkcyIsIkNvbW1lbnQiLCJ0ZXN0IiwiZ2V0UmFuZG9tU3VibWlzc2lvbiIsImdldFRvcCIsImdldENvbnRyb3ZlcnNpYWwiLCJnZXRSaXNpbmciLCJnZXRVbnJlYWRNZXNzYWdlcyIsImdldEluYm94IiwiX3JlZjYiLCJnZXRNb2RtYWlsIiwiZ2V0TmV3TW9kbWFpbENvbnZlcnNhdGlvbnMiLCJfdGhpczYiLCJfbmFtZSIsIl90cmFuc2Zvcm0iLCJhZnRlciIsImJlZm9yZSIsImNoaWxkcmVuIiwiY29udmVyc2F0aW9uIiwiY29udmVyc2F0aW9uSWRzIiwiY29udmVyc2F0aW9ucyIsInBhcnRpY2lwYW50IiwiY29udmVyc2F0aW9uT2JqZWN0cyIsIk1vZG1haWxDb252ZXJzYXRpb24iLCJfZ2V0Q29udmVyc2F0aW9uT2JqZWN0cyIsImNyZWF0ZU1vZG1haWxEaXNjdXNzaW9uIiwiX3JlZjciLCJfdGhpczciLCJzdWJqZWN0Iiwic3JOYW1lIiwicGFyc2VkRnJvbVNyIiwiZ2V0TmV3TW9kbWFpbENvbnZlcnNhdGlvbiIsIm1hcmtOZXdNb2RtYWlsQ29udmVyc2F0aW9uc0FzUmVhZCIsIm1lc3NhZ2UiLCJtYXJrTmV3TW9kbWFpbENvbnZlcnNhdGlvbnNBc1VucmVhZCIsImdldE5ld01vZG1haWxTdWJyZWRkaXRzIiwiX3RoaXM4IiwidmFsdWVzIiwic3VicmVkZGl0cyIsInMiLCJnZXRVbnJlYWROZXdNb2RtYWlsQ29udmVyc2F0aW9uc0NvdW50IiwiYnVsa1JlYWROZXdNb2RtYWlsIiwiX3RoaXM5Iiwic3VicmVkZGl0TmFtZXMiLCJlbnRpdHkiLCJjb252ZXJzYXRpb25faWRzIiwiZ2V0U2VudE1lc3NhZ2VzIiwibWFya01lc3NhZ2VzQXNSZWFkIiwibWVzc2FnZXMiLCJtZXNzYWdlSWRzIiwibWFya01lc3NhZ2VzQXNVbnJlYWQiLCJyZWFkQWxsTWVzc2FnZXMiLCJjb21wb3NlTWVzc2FnZSIsIl9yZWY4IiwiZnJvbV9zdWJyZWRkaXQiLCJfcmVmOCRmcm9tU3VicmVkZGl0IiwiZnJvbVN1YnJlZGRpdCIsIl9yZWY4JGNhcHRjaGFJZGVuIiwidG8iLCJwYXJzZWRUbyIsIlJlZGRpdFVzZXIiLCJTdWJyZWRkaXQiLCJmcm9tX3NyIiwicmV0dXJuIiwiZ2V0T2F1dGhTY29wZUxpc3QiLCJzZWFyY2giLCJzdWJyZWRkaXQiLCJyZXN0cmljdFNyIiwic3ludGF4IiwicGFyc2VkUXVlcnkiLCJxIiwicXVlcnkiLCJyZXN0cmljdF9zciIsInNlYXJjaFN1YnJlZGRpdE5hbWVzIiwiX3JlZjkiLCJfcmVmOSRleGFjdCIsImV4YWN0IiwiX3JlZjkkaW5jbHVkZV9uc2Z3IiwiaW5jbHVkZV9uc2Z3IiwiX3JlZjkkaW5jbHVkZU5zZnciLCJpbmNsdWRlTnNmdyIsImluY2x1ZGVfb3Zlcl8xOCIsIl9jcmVhdGVPckVkaXRTdWJyZWRkaXQiLCJfcmVmMTAiLCJfcmVmMTAkYWxsb3dfaW1hZ2VzIiwiYWxsb3dfaW1hZ2VzIiwiX3JlZjEwJGFsbG93X3RvcCIsImFsbG93X3RvcCIsIl9yZWYxMCRjb2xsYXBzZV9kZWxldCIsImNvbGxhcHNlX2RlbGV0ZWRfY29tbWVudHMiLCJfcmVmMTAkY29tbWVudF9zY29yZV8iLCJjb21tZW50X3Njb3JlX2hpZGVfbWlucyIsImRlc2NyaXB0aW9uIiwiX3JlZjEwJGV4Y2x1ZGVfYmFubmVkIiwiZXhjbHVkZV9iYW5uZWRfbW9kcXVldWUiLCJoZWFkZXJfdGl0bGUiLCJfcmVmMTAkaGlkZV9hZHMiLCJoaWRlX2FkcyIsIl9yZWYxMCRsYW5nIiwibGFuZyIsIl9yZWYxMCRsaW5rX3R5cGUiLCJsaW5rX3R5cGUiLCJfcmVmMTAkb3Zlcl8iLCJvdmVyXzE4IiwicHVibGljX2Rlc2NyaXB0aW9uIiwiX3JlZjEwJHB1YmxpY190cmFmZmljIiwicHVibGljX3RyYWZmaWMiLCJfcmVmMTAkc2hvd19tZWRpYSIsInNob3dfbWVkaWEiLCJfcmVmMTAkc2hvd19tZWRpYV9wcmUiLCJzaG93X21lZGlhX3ByZXZpZXciLCJfcmVmMTAkc3BhbV9jb21tZW50cyIsInNwYW1fY29tbWVudHMiLCJfcmVmMTAkc3BhbV9saW5rcyIsInNwYW1fbGlua3MiLCJfcmVmMTAkc3BhbV9zZWxmcG9zdHMiLCJzcGFtX3NlbGZwb3N0cyIsIl9yZWYxMCRzcG9pbGVyc19lbmFibCIsInNwb2lsZXJzX2VuYWJsZWQiLCJfcmVmMTAkc3VibWl0X2xpbmtfbGEiLCJzdWJtaXRfbGlua19sYWJlbCIsIl9yZWYxMCRzdWJtaXRfdGV4dF9sYSIsInN1Ym1pdF90ZXh0X2xhYmVsIiwiX3JlZjEwJHN1Ym1pdF90ZXh0Iiwic3VibWl0X3RleHQiLCJfcmVmMTAkc3VnZ2VzdGVkX2NvbW0iLCJzdWdnZXN0ZWRfY29tbWVudF9zb3J0IiwiX3JlZjEwJHR5cGUiLCJ0eXBlIiwid2lraV9lZGl0X2FnZSIsIndpa2lfZWRpdF9rYXJtYSIsIl9yZWYxMCR3aWtpbW9kZSIsIndpa2ltb2RlIiwib3RoZXJLZXlzIiwiY3JlYXRlU3VicmVkZGl0Iiwic2VhcmNoU3VicmVkZGl0VG9waWNzIiwiX3JlZjExIiwiX3RoaXMxMCIsImdldFN1YnNjcmlwdGlvbnMiLCJnZXRDb250cmlidXRvclN1YnJlZGRpdHMiLCJnZXRNb2RlcmF0ZWRTdWJyZWRkaXRzIiwic2VhcmNoU3VicmVkZGl0cyIsImdldFBvcHVsYXJTdWJyZWRkaXRzIiwiZ2V0TmV3U3VicmVkZGl0cyIsImdldEdvbGRTdWJyZWRkaXRzIiwiZ2V0RGVmYXVsdFN1YnJlZGRpdHMiLCJjaGVja1VzZXJuYW1lQXZhaWxhYmlsaXR5IiwidW5hdXRoZW50aWNhdGVkUmVxdWVzdCIsInVzZXIiLCJjcmVhdGVMaXZldGhyZWFkIiwiX3JlZjEyIiwiX3RoaXMxMSIsInJlc291cmNlcyIsIl9yZWYxMiRuc2Z3IiwiZ2V0U3RpY2tpZWRMaXZldGhyZWFkIiwiZ2V0TXlNdWx0aXJlZGRpdHMiLCJleHBhbmRfc3JzIiwiY3JlYXRlTXVsdGlyZWRkaXQiLCJfcmVmMTMiLCJfcmVmMTMkdmlzaWJpbGl0eSIsInZpc2liaWxpdHkiLCJfcmVmMTMkaWNvbl9uYW1lIiwiaWNvbl9uYW1lIiwiX3JlZjEzJGtleV9jb2xvciIsImtleV9jb2xvciIsIl9yZWYxMyR3ZWlnaHRpbmdfc2NoZSIsIndlaWdodGluZ19zY2hlbWUiLCJtb2RlbCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZXNjcmlwdGlvbl9tZCIsInN1YiIsIl9yZXZva2VUb2tlbiIsInRva2VuIiwicmV2b2tlQWNjZXNzVG9rZW4iLCJfdGhpczEyIiwicmV2b2tlUmVmcmVzaFRva2VuIiwiX3RoaXMxMyIsIl9zZWxlY3RGbGFpciIsIl9yZWYxNCIsIl90aGlzMTQiLCJmbGFpcl90ZW1wbGF0ZV9pZCIsImxpbmsiLCJJbnZhbGlkTWV0aG9kQ2FsbEVycm9yIiwiX2Fzc2lnbkZsYWlyIiwiX3JlZjE1IiwiX3RoaXMxNSIsImNzc19jbGFzcyIsIl9yZWYxNSRjc3NDbGFzcyIsImNzc0NsYXNzIiwiX3JlZjE1JHN1YnJlZGRpdE5hbWUiLCJfcG9wdWxhdGUiLCJyZXNwb25zZVRyZWUiLCJfdGhpczE2IiwiS0lORFMiLCJtYXBWYWx1ZXMiLCJVU0VSX0tFWVMiLCJoYXMiLCJTVUJSRURESVRfS0VZUyIsIkxpc3RpbmciLCJfbW9yZSIsImxpbmtfaWQiLCJjb21tZW50cyIsIl9yZWYxNiIsIl9yZWYxNiRxcyIsIm1lcmdlZFF1ZXJ5IiwiY291bnQiLCJsaW1pdCIsIl9xdWVyeSIsIl91cmkiLCJmZXRjaE1vcmUiLCJNQVhfTElTVElOR19JVEVNUyIsImxpc3RpbmciLCJpdGVtIiwiYWRkRW1wdHlSZXBsaWVzTGlzdGluZyIsIm5vQ29uZmxpY3QiLCJNT0RVTEVfTkFNRSIsIl9wcmV2aW91c1Nub293cmFwIiwiZGVmaW5lSW5zcGVjdEZ1bmMiLCJrZXlzRm9ySGlkZGVuVmFsdWVzIiwiZm9ybWF0dGVkIiwic3RhcnRzV2l0aCIsImluY2x1ZGVzIiwiaW5zcGVjdCIsImNsYXNzRnVuY0Rlc2NyaXB0b3JzIiwiZnVuYyIsIkhUVFBfVkVSQlMiLCJvYXV0aFJlcXVlc3QiLCJmb3JPd24iLCJSZWRkaXRDb250ZW50IiwiZnVuY1Byb3RvIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNuYWtlQ2FzZSIsInZlcnNpb24iLCJWRVJTSU9OIiwibW9kdWxlIiwicGFyZW50IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/snoowrap.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snoowrap/dist/xhr.js":
/*!*******************************************!*\
  !*** ./node_modules/snoowrap/dist/xhr.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _Promise = _interopRequireDefault(__webpack_require__(/*! ./Promise.js */ \"(rsc)/./node_modules/snoowrap/dist/Promise.js\"));\nvar _url = _interopRequireDefault(__webpack_require__(/*! url */ \"url\"));\nvar _querystring = __webpack_require__(/*! querystring */ \"querystring\");\nvar _errors = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/snoowrap/dist/errors.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/* eslint-env browser */ // Provide a shim for some of the functionality of the `request-promise` npm package in browsers.\n// Previously, snoowrap depended on browserify to package `request-promise` for the browser bundle, and while this worked\n// properly, it caused the snoowrap bundle to be very large since `request-promise` contains many dependencies that snoowrap\n// doesn't actually need.\nfunction noop() {}\nfunction tryParseJson(maybeJson) {\n    try {\n        return JSON.parse(maybeJson);\n    } catch (e) {\n        return maybeJson;\n    }\n}\nfunction parseHeaders(headerString) {\n    return headerString.split(\"\\r\\n\").filter(function(line) {\n        return line;\n    }).reduce(function(accumulator, line) {\n        var index = line.indexOf(\": \");\n        accumulator[line.slice(0, index)] = line.slice(index + 2);\n        return accumulator;\n    }, {});\n}\nmodule.exports = function rawRequest(options) {\n    // It would be nice to be able to use the `URL` API in browsers, but Safari 9 doesn't support `URLSearchParams`.\n    var parsedUrl = _url.default.parse(options.url || _url.default.resolve(options.baseUrl, options.uri), true);\n    parsedUrl.search = (0, _querystring.stringify)(Object.assign({}, parsedUrl.query, options.qs)); // create a new url object with the new qs params, to ensure that the `href` value changes (to use later for parsing response)\n    var finalUrl = _url.default.parse(parsedUrl.format());\n    var xhr = new XMLHttpRequest();\n    var method = options.method ? options.method.toUpperCase() : \"GET\";\n    xhr.open(method, finalUrl.href);\n    Object.keys(options.headers).filter(function(header) {\n        return header.toLowerCase() !== \"user-agent\";\n    }).forEach(function(key) {\n        return xhr.setRequestHeader(key, options.headers[key]);\n    });\n    if (options.auth) {\n        xhr.setRequestHeader(\"Authorization\", options.auth.bearer ? \"bearer \".concat(options.auth.bearer) : \"basic \" + btoa(\"\".concat(options.auth.user, \":\").concat(options.auth.pass)));\n    }\n    var requestBody;\n    if (options.formData) {\n        requestBody = new FormData();\n        Object.keys(options.formData).forEach(function(key) {\n            return requestBody.append(key, options.formData[key]);\n        });\n        if (options.form) {\n            Object.keys(options.form).forEach(function(key) {\n                return requestBody.append(key, options.form[key]);\n            });\n        }\n        xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\n    } else if (options.form) {\n        requestBody = (0, _querystring.stringify)(options.form);\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    } else if (options.json) {\n        requestBody = JSON.stringify(options.body);\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    } else {\n        requestBody = options.body;\n    }\n    return new _Promise.default(function(resolve, reject, onCancel) {\n        onCancel(function() {\n            return xhr.abort();\n        });\n        xhr.onload = function() {\n            var _this = this;\n            var success = this.status >= 200 && this.status < 300;\n            var settleFunc = success ? resolve : function(err) {\n                return reject(Object.assign(new _errors.StatusCodeError(_this.status + \"\"), err));\n            };\n            var response = {\n                statusCode: this.status,\n                body: (options.json ? tryParseJson : noop)(xhr.response),\n                headers: parseHeaders(xhr.getAllResponseHeaders()),\n                request: {\n                    method,\n                    uri: finalUrl\n                }\n            };\n            if (typeof options.transform === \"function\") {\n                settleFunc(options.transform(response.body, response));\n            } else if (!success || options.resolveWithFullResponse) {\n                settleFunc(response);\n            } else {\n                settleFunc(response.body);\n            }\n        };\n        xhr.onerror = function(err) {\n            return reject(Object.assign(new _errors.RequestError(), err));\n        };\n        xhr.send(requestBody);\n    }).timeout(options.timeout || Math.pow(2, 31) - 1, \"Error: ETIMEDOUT\").catch(_Promise.default.TimeoutError, function(err) {\n        xhr.abort();\n        throw err;\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snoowrap/dist/xhr.js\n");

/***/ })

};
;
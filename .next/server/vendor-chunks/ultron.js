"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ultron";
exports.ids = ["vendor-chunks/ultron"];
exports.modules = {

/***/ "(rsc)/./node_modules/ultron/index.js":
/*!**************************************!*\
  !*** ./node_modules/ultron/index.js ***!
  \**************************************/
/***/ ((module) => {

eval("\nvar has = Object.prototype.hasOwnProperty;\n/**\n * An auto incrementing id which we can use to create \"unique\" Ultron instances\n * so we can track the event emitters that are added through the Ultron\n * interface.\n *\n * @type {Number}\n * @private\n */ var id = 0;\n/**\n * Ultron is high-intelligence robot. It gathers intelligence so it can start improving\n * upon his rudimentary design. It will learn from your EventEmitting patterns\n * and exterminate them.\n *\n * @constructor\n * @param {EventEmitter} ee EventEmitter instance we need to wrap.\n * @api public\n */ function Ultron(ee) {\n    if (!(this instanceof Ultron)) return new Ultron(ee);\n    this.id = id++;\n    this.ee = ee;\n}\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Functon} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @returns {Ultron}\n * @api public\n */ Ultron.prototype.on = function on(event, fn, context) {\n    fn.__ultron = this.id;\n    this.ee.on(event, fn, context);\n    return this;\n};\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @returns {Ultron}\n * @api public\n */ Ultron.prototype.once = function once(event, fn, context) {\n    fn.__ultron = this.id;\n    this.ee.once(event, fn, context);\n    return this;\n};\n/**\n * Remove the listeners we assigned for the given event.\n *\n * @returns {Ultron}\n * @api public\n */ Ultron.prototype.remove = function remove() {\n    var args = arguments, ee = this.ee, event;\n    //\n    // When no event names are provided we assume that we need to clear all the\n    // events that were assigned through us.\n    //\n    if (args.length === 1 && \"string\" === typeof args[0]) {\n        args = args[0].split(/[, ]+/);\n    } else if (!args.length) {\n        if (ee.eventNames) {\n            args = ee.eventNames();\n        } else if (ee._events) {\n            args = [];\n            for(event in ee._events){\n                if (has.call(ee._events, event)) args.push(event);\n            }\n            if (Object.getOwnPropertySymbols) {\n                args = args.concat(Object.getOwnPropertySymbols(ee._events));\n            }\n        }\n    }\n    for(var i = 0; i < args.length; i++){\n        var listeners = ee.listeners(args[i]);\n        for(var j = 0; j < listeners.length; j++){\n            event = listeners[j];\n            //\n            // Once listeners have a `listener` property that stores the real listener\n            // in the EventEmitter that ships with Node.js.\n            //\n            if (event.listener) {\n                if (event.listener.__ultron !== this.id) continue;\n            } else if (event.__ultron !== this.id) {\n                continue;\n            }\n            ee.removeListener(args[i], event);\n        }\n    }\n    return this;\n};\n/**\n * Destroy the Ultron instance, remove all listeners and release all references.\n *\n * @returns {Boolean}\n * @api public\n */ Ultron.prototype.destroy = function destroy() {\n    if (!this.ee) return false;\n    this.remove();\n    this.ee = null;\n    return true;\n};\n//\n// Expose the module.\n//\nmodule.exports = Ultron;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdWx0cm9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsTUFBTUMsT0FBT0MsU0FBUyxDQUFDQyxjQUFjO0FBRXpDOzs7Ozs7O0NBT0MsR0FDRCxJQUFJQyxLQUFLO0FBRVQ7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTQyxPQUFPQyxFQUFFO0lBQ2hCLElBQUksQ0FBRSxLQUFJLFlBQVlELE1BQUssR0FBSSxPQUFPLElBQUlBLE9BQU9DO0lBRWpELElBQUksQ0FBQ0YsRUFBRSxHQUFHQTtJQUNWLElBQUksQ0FBQ0UsRUFBRSxHQUFHQTtBQUNaO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDREQsT0FBT0gsU0FBUyxDQUFDSyxFQUFFLEdBQUcsU0FBU0EsR0FBR0MsS0FBSyxFQUFFQyxFQUFFLEVBQUVDLE9BQU87SUFDbERELEdBQUdFLFFBQVEsR0FBRyxJQUFJLENBQUNQLEVBQUU7SUFDckIsSUFBSSxDQUFDRSxFQUFFLENBQUNDLEVBQUUsQ0FBQ0MsT0FBT0MsSUFBSUM7SUFFdEIsT0FBTyxJQUFJO0FBQ2I7QUFDQTs7Ozs7Ozs7Q0FRQyxHQUNETCxPQUFPSCxTQUFTLENBQUNVLElBQUksR0FBRyxTQUFTQSxLQUFLSixLQUFLLEVBQUVDLEVBQUUsRUFBRUMsT0FBTztJQUN0REQsR0FBR0UsUUFBUSxHQUFHLElBQUksQ0FBQ1AsRUFBRTtJQUNyQixJQUFJLENBQUNFLEVBQUUsQ0FBQ00sSUFBSSxDQUFDSixPQUFPQyxJQUFJQztJQUV4QixPQUFPLElBQUk7QUFDYjtBQUVBOzs7OztDQUtDLEdBQ0RMLE9BQU9ILFNBQVMsQ0FBQ1csTUFBTSxHQUFHLFNBQVNBO0lBQ2pDLElBQUlDLE9BQU9DLFdBQ1BULEtBQUssSUFBSSxDQUFDQSxFQUFFLEVBQ1pFO0lBRUosRUFBRTtJQUNGLDJFQUEyRTtJQUMzRSx3Q0FBd0M7SUFDeEMsRUFBRTtJQUNGLElBQUlNLEtBQUtFLE1BQU0sS0FBSyxLQUFLLGFBQWEsT0FBT0YsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNwREEsT0FBT0EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0csS0FBSyxDQUFDO0lBQ3ZCLE9BQU8sSUFBSSxDQUFDSCxLQUFLRSxNQUFNLEVBQUU7UUFDdkIsSUFBSVYsR0FBR1ksVUFBVSxFQUFFO1lBQ2pCSixPQUFPUixHQUFHWSxVQUFVO1FBQ3RCLE9BQU8sSUFBSVosR0FBR2EsT0FBTyxFQUFFO1lBQ3JCTCxPQUFPLEVBQUU7WUFFVCxJQUFLTixTQUFTRixHQUFHYSxPQUFPLENBQUU7Z0JBQ3hCLElBQUluQixJQUFJb0IsSUFBSSxDQUFDZCxHQUFHYSxPQUFPLEVBQUVYLFFBQVFNLEtBQUtPLElBQUksQ0FBQ2I7WUFDN0M7WUFFQSxJQUFJUCxPQUFPcUIscUJBQXFCLEVBQUU7Z0JBQ2hDUixPQUFPQSxLQUFLUyxNQUFNLENBQUN0QixPQUFPcUIscUJBQXFCLENBQUNoQixHQUFHYSxPQUFPO1lBQzVEO1FBQ0Y7SUFDRjtJQUVBLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJVixLQUFLRSxNQUFNLEVBQUVRLElBQUs7UUFDcEMsSUFBSUMsWUFBWW5CLEdBQUdtQixTQUFTLENBQUNYLElBQUksQ0FBQ1UsRUFBRTtRQUVwQyxJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSUQsVUFBVVQsTUFBTSxFQUFFVSxJQUFLO1lBQ3pDbEIsUUFBUWlCLFNBQVMsQ0FBQ0MsRUFBRTtZQUVwQixFQUFFO1lBQ0YsMEVBQTBFO1lBQzFFLCtDQUErQztZQUMvQyxFQUFFO1lBQ0YsSUFBSWxCLE1BQU1tQixRQUFRLEVBQUU7Z0JBQ2xCLElBQUluQixNQUFNbUIsUUFBUSxDQUFDaEIsUUFBUSxLQUFLLElBQUksQ0FBQ1AsRUFBRSxFQUFFO1lBQzNDLE9BQU8sSUFBSUksTUFBTUcsUUFBUSxLQUFLLElBQUksQ0FBQ1AsRUFBRSxFQUFFO2dCQUNyQztZQUNGO1lBRUFFLEdBQUdzQixjQUFjLENBQUNkLElBQUksQ0FBQ1UsRUFBRSxFQUFFaEI7UUFDN0I7SUFDRjtJQUVBLE9BQU8sSUFBSTtBQUNiO0FBRUE7Ozs7O0NBS0MsR0FDREgsT0FBT0gsU0FBUyxDQUFDMkIsT0FBTyxHQUFHLFNBQVNBO0lBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUN2QixFQUFFLEVBQUUsT0FBTztJQUVyQixJQUFJLENBQUNPLE1BQU07SUFDWCxJQUFJLENBQUNQLEVBQUUsR0FBRztJQUVWLE9BQU87QUFDVDtBQUVBLEVBQUU7QUFDRixxQkFBcUI7QUFDckIsRUFBRTtBQUNGd0IsT0FBT0MsT0FBTyxHQUFHMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtYW5hbHl0aWNzLy4vbm9kZV9tb2R1bGVzL3VsdHJvbi9pbmRleC5qcz80MmU1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQW4gYXV0byBpbmNyZW1lbnRpbmcgaWQgd2hpY2ggd2UgY2FuIHVzZSB0byBjcmVhdGUgXCJ1bmlxdWVcIiBVbHRyb24gaW5zdGFuY2VzXG4gKiBzbyB3ZSBjYW4gdHJhY2sgdGhlIGV2ZW50IGVtaXR0ZXJzIHRoYXQgYXJlIGFkZGVkIHRocm91Z2ggdGhlIFVsdHJvblxuICogaW50ZXJmYWNlLlxuICpcbiAqIEB0eXBlIHtOdW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgaWQgPSAwO1xuXG4vKipcbiAqIFVsdHJvbiBpcyBoaWdoLWludGVsbGlnZW5jZSByb2JvdC4gSXQgZ2F0aGVycyBpbnRlbGxpZ2VuY2Ugc28gaXQgY2FuIHN0YXJ0IGltcHJvdmluZ1xuICogdXBvbiBoaXMgcnVkaW1lbnRhcnkgZGVzaWduLiBJdCB3aWxsIGxlYXJuIGZyb20geW91ciBFdmVudEVtaXR0aW5nIHBhdHRlcm5zXG4gKiBhbmQgZXh0ZXJtaW5hdGUgdGhlbS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlZSBFdmVudEVtaXR0ZXIgaW5zdGFuY2Ugd2UgbmVlZCB0byB3cmFwLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gVWx0cm9uKGVlKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBVbHRyb24pKSByZXR1cm4gbmV3IFVsdHJvbihlZSk7XG5cbiAgdGhpcy5pZCA9IGlkKys7XG4gIHRoaXMuZWUgPSBlZTtcbn1cblxuLyoqXG4gKiBSZWdpc3RlciBhIG5ldyBFdmVudExpc3RlbmVyIGZvciB0aGUgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IE5hbWUgb2YgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtGdW5jdG9ufSBmbiBDYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7TWl4ZWR9IGNvbnRleHQgVGhlIGNvbnRleHQgb2YgdGhlIGZ1bmN0aW9uLlxuICogQHJldHVybnMge1VsdHJvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblVsdHJvbi5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgZm4uX191bHRyb24gPSB0aGlzLmlkO1xuICB0aGlzLmVlLm9uKGV2ZW50LCBmbiwgY29udGV4dCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuLyoqXG4gKiBBZGQgYW4gRXZlbnRMaXN0ZW5lciB0aGF0J3Mgb25seSBjYWxsZWQgb25jZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgTmFtZSBvZiB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBDYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7TWl4ZWR9IGNvbnRleHQgVGhlIGNvbnRleHQgb2YgdGhlIGZ1bmN0aW9uLlxuICogQHJldHVybnMge1VsdHJvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblVsdHJvbi5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIGZuLl9fdWx0cm9uID0gdGhpcy5pZDtcbiAgdGhpcy5lZS5vbmNlKGV2ZW50LCBmbiwgY29udGV4dCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgbGlzdGVuZXJzIHdlIGFzc2lnbmVkIGZvciB0aGUgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHJldHVybnMge1VsdHJvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblVsdHJvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50c1xuICAgICwgZWUgPSB0aGlzLmVlXG4gICAgLCBldmVudDtcblxuICAvL1xuICAvLyBXaGVuIG5vIGV2ZW50IG5hbWVzIGFyZSBwcm92aWRlZCB3ZSBhc3N1bWUgdGhhdCB3ZSBuZWVkIHRvIGNsZWFyIGFsbCB0aGVcbiAgLy8gZXZlbnRzIHRoYXQgd2VyZSBhc3NpZ25lZCB0aHJvdWdoIHVzLlxuICAvL1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgJ3N0cmluZycgPT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgYXJncyA9IGFyZ3NbMF0uc3BsaXQoL1ssIF0rLyk7XG4gIH0gZWxzZSBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgaWYgKGVlLmV2ZW50TmFtZXMpIHtcbiAgICAgIGFyZ3MgPSBlZS5ldmVudE5hbWVzKCk7XG4gICAgfSBlbHNlIGlmIChlZS5fZXZlbnRzKSB7XG4gICAgICBhcmdzID0gW107XG5cbiAgICAgIGZvciAoZXZlbnQgaW4gZWUuX2V2ZW50cykge1xuICAgICAgICBpZiAoaGFzLmNhbGwoZWUuX2V2ZW50cywgZXZlbnQpKSBhcmdzLnB1c2goZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICBhcmdzID0gYXJncy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlZS5fZXZlbnRzKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGxpc3RlbmVycyA9IGVlLmxpc3RlbmVycyhhcmdzW2ldKTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGlzdGVuZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICBldmVudCA9IGxpc3RlbmVyc1tqXTtcblxuICAgICAgLy9cbiAgICAgIC8vIE9uY2UgbGlzdGVuZXJzIGhhdmUgYSBgbGlzdGVuZXJgIHByb3BlcnR5IHRoYXQgc3RvcmVzIHRoZSByZWFsIGxpc3RlbmVyXG4gICAgICAvLyBpbiB0aGUgRXZlbnRFbWl0dGVyIHRoYXQgc2hpcHMgd2l0aCBOb2RlLmpzLlxuICAgICAgLy9cbiAgICAgIGlmIChldmVudC5saXN0ZW5lcikge1xuICAgICAgICBpZiAoZXZlbnQubGlzdGVuZXIuX191bHRyb24gIT09IHRoaXMuaWQpIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChldmVudC5fX3VsdHJvbiAhPT0gdGhpcy5pZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZWUucmVtb3ZlTGlzdGVuZXIoYXJnc1tpXSwgZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBEZXN0cm95IHRoZSBVbHRyb24gaW5zdGFuY2UsIHJlbW92ZSBhbGwgbGlzdGVuZXJzIGFuZCByZWxlYXNlIGFsbCByZWZlcmVuY2VzLlxuICpcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuVWx0cm9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgaWYgKCF0aGlzLmVlKSByZXR1cm4gZmFsc2U7XG5cbiAgdGhpcy5yZW1vdmUoKTtcbiAgdGhpcy5lZSA9IG51bGw7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xubW9kdWxlLmV4cG9ydHMgPSBVbHRyb247XG4iXSwibmFtZXMiOlsiaGFzIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJpZCIsIlVsdHJvbiIsImVlIiwib24iLCJldmVudCIsImZuIiwiY29udGV4dCIsIl9fdWx0cm9uIiwib25jZSIsInJlbW92ZSIsImFyZ3MiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzcGxpdCIsImV2ZW50TmFtZXMiLCJfZXZlbnRzIiwiY2FsbCIsInB1c2giLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjb25jYXQiLCJpIiwibGlzdGVuZXJzIiwiaiIsImxpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJkZXN0cm95IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ultron/index.js\n");

/***/ })

};
;